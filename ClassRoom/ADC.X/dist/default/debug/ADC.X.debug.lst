

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Wed Jan 24 20:05:18 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21     0000                     
    22                           ; Generated 22/03/2023 GMT
    23                           ; 
    24                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56     0000                     	;# 
    57     0001                     	;# 
    58     0002                     	;# 
    59     0003                     	;# 
    60     0004                     	;# 
    61     0005                     	;# 
    62     0006                     	;# 
    63     0007                     	;# 
    64     0008                     	;# 
    65     0009                     	;# 
    66     000A                     	;# 
    67     000B                     	;# 
    68     000C                     	;# 
    69     000D                     	;# 
    70     000E                     	;# 
    71     000E                     	;# 
    72     000F                     	;# 
    73     0010                     	;# 
    74     0011                     	;# 
    75     0012                     	;# 
    76     0013                     	;# 
    77     0014                     	;# 
    78     0015                     	;# 
    79     0015                     	;# 
    80     0016                     	;# 
    81     0017                     	;# 
    82     0018                     	;# 
    83     0019                     	;# 
    84     001A                     	;# 
    85     001B                     	;# 
    86     001B                     	;# 
    87     001C                     	;# 
    88     001D                     	;# 
    89     001E                     	;# 
    90     001F                     	;# 
    91     0081                     	;# 
    92     0085                     	;# 
    93     0086                     	;# 
    94     0087                     	;# 
    95     0088                     	;# 
    96     0089                     	;# 
    97     008C                     	;# 
    98     008D                     	;# 
    99     008E                     	;# 
   100     0091                     	;# 
   101     0092                     	;# 
   102     0093                     	;# 
   103     0094                     	;# 
   104     0098                     	;# 
   105     0099                     	;# 
   106     009C                     	;# 
   107     009D                     	;# 
   108     009E                     	;# 
   109     009F                     	;# 
   110     010C                     	;# 
   111     010D                     	;# 
   112     010E                     	;# 
   113     010F                     	;# 
   114     018C                     	;# 
   115     018D                     	;# 
   116     0000                     	;# 
   117     0001                     	;# 
   118     0002                     	;# 
   119     0003                     	;# 
   120     0004                     	;# 
   121     0005                     	;# 
   122     0006                     	;# 
   123     0007                     	;# 
   124     0008                     	;# 
   125     0009                     	;# 
   126     000A                     	;# 
   127     000B                     	;# 
   128     000C                     	;# 
   129     000D                     	;# 
   130     000E                     	;# 
   131     000E                     	;# 
   132     000F                     	;# 
   133     0010                     	;# 
   134     0011                     	;# 
   135     0012                     	;# 
   136     0013                     	;# 
   137     0014                     	;# 
   138     0015                     	;# 
   139     0015                     	;# 
   140     0016                     	;# 
   141     0017                     	;# 
   142     0018                     	;# 
   143     0019                     	;# 
   144     001A                     	;# 
   145     001B                     	;# 
   146     001B                     	;# 
   147     001C                     	;# 
   148     001D                     	;# 
   149     001E                     	;# 
   150     001F                     	;# 
   151     0081                     	;# 
   152     0085                     	;# 
   153     0086                     	;# 
   154     0087                     	;# 
   155     0088                     	;# 
   156     0089                     	;# 
   157     008C                     	;# 
   158     008D                     	;# 
   159     008E                     	;# 
   160     0091                     	;# 
   161     0092                     	;# 
   162     0093                     	;# 
   163     0094                     	;# 
   164     0098                     	;# 
   165     0099                     	;# 
   166     009C                     	;# 
   167     009D                     	;# 
   168     009E                     	;# 
   169     009F                     	;# 
   170     010C                     	;# 
   171     010D                     	;# 
   172     010E                     	;# 
   173     010F                     	;# 
   174     018C                     	;# 
   175     018D                     	;# 
   176     0008                     _PORTD	set	8
   177     0007                     _PORTC	set	7
   178     001E                     _ADRESH	set	30
   179     001F                     _ADCON0	set	31
   180     009F                     _ADCON1	set	159
   181     0088                     _TRISD	set	136
   182     0087                     _TRISC	set	135
   183     0085                     _TRISA	set	133
   184     009E                     _ADRESL	set	158
   185                           
   186                           	psect	cinit
   187     07F3                     start_initialization:	
   188                           ; #config settings
   189                           
   190     07F3                     __initialization:
   191                           
   192                           ; Clear objects allocated to BANK0
   193     07F3  1383               	bcf	3,7	;select IRP bank0
   194     07F4  3020               	movlw	low __pbssBANK0
   195     07F5  0084               	movwf	4
   196     07F6  303B               	movlw	low (__pbssBANK0+27)
   197     07F7  120A  118A  2542  120A  118A  	fcall	clear_ram0
   198     07FC                     end_of_initialization:	
   199                           ;End of C runtime variable initialization code
   200                           
   201     07FC                     __end_of__initialization:
   202     07FC  0183               	clrf	3
   203     07FD  120A  118A  2F72   	ljmp	_main	;jump to C main() function
   204                           
   205                           	psect	bssBANK0
   206     0020                     __pbssBANK0:
   207     0020                     _k:
   208     0020                     	ds	10
   209     002A                     _voltage:
   210     002A                     	ds	4
   211     002E                     _val:
   212     002E                     	ds	4
   213     0032                     _m:
   214     0032                     	ds	2
   215     0034                     _loval:
   216     0034                     	ds	2
   217     0036                     _hival:
   218     0036                     	ds	2
   219     0038                     _s:
   220     0038                     	ds	1
   221     0039                     _n:
   222     0039                     	ds	1
   223     003A                     _j:
   224     003A                     	ds	1
   225                           
   226                           	psect	clrtext
   227     0542                     clear_ram0:	
   228                           ;	Called with FSR containing the base address, and
   229                           ;	W with the last address+1
   230                           
   231     0542  0064               	clrwdt	;clear the watchdog before getting into this loop
   232     0543                     clrloop0:
   233     0543  0180               	clrf	0	;clear RAM location pointed to by FSR
   234     0544  0A84               	incf	4,f	;increment pointer
   235     0545  0604               	xorwf	4,w	;XOR with final address
   236     0546  1903               	btfsc	3,2	;have we reached the end yet?
   237     0547  3400               	retlw	0	;all done for this memory range, return
   238     0548  0604               	xorwf	4,w	;XOR again to restore value
   239     0549  2D43               	goto	clrloop0	;do the next byte
   240                           
   241                           	psect	cstackCOMMON
   242     0070                     __pcstackCOMMON:
   243     0070                     ?_init:
   244     0070                     ?_cmd:	
   245                           ; 1 bytes @ 0x0
   246                           
   247     0070                     ?_delay:	
   248                           ; 1 bytes @ 0x0
   249                           
   250     0070                     ?_data:	
   251                           ; 1 bytes @ 0x0
   252                           
   253     0070                     ?_main:	
   254                           ; 1 bytes @ 0x0
   255                           
   256     0070                     ?___lwdiv:	
   257                           ; 1 bytes @ 0x0
   258                           
   259     0070                     ?___lmul:	
   260                           ; 2 bytes @ 0x0
   261                           
   262     0070                     delay@x:	
   263                           ; 4 bytes @ 0x0
   264                           
   265     0070                     ___lwdiv@divisor:	
   266                           ; 2 bytes @ 0x0
   267                           
   268     0070                     ___lmul@multiplier:	
   269                           ; 2 bytes @ 0x0
   270                           
   271                           
   272                           ; 4 bytes @ 0x0
   273     0070                     	ds	2
   274     0072                     ??_cmd:
   275     0072                     ??_delay:	
   276                           ; 1 bytes @ 0x2
   277                           
   278     0072                     ??_data:	
   279                           ; 1 bytes @ 0x2
   280                           
   281     0072                     cmd@i:	
   282                           ; 1 bytes @ 0x2
   283                           
   284     0072                     data@i:	
   285                           ; 1 bytes @ 0x2
   286                           
   287     0072                     ___lwdiv@dividend:	
   288                           ; 1 bytes @ 0x2
   289                           
   290                           
   291                           ; 2 bytes @ 0x2
   292     0072                     	ds	1
   293     0073                     ??_init:
   294                           
   295                           ; 1 bytes @ 0x3
   296     0073                     	ds	1
   297     0074                     ??___lwdiv:
   298     0074                     ___lwdiv@quotient:	
   299                           ; 1 bytes @ 0x4
   300                           
   301     0074                     ___lmul@multiplicand:	
   302                           ; 2 bytes @ 0x4
   303                           
   304                           
   305                           ; 4 bytes @ 0x4
   306     0074                     	ds	2
   307     0076                     ___lwdiv@counter:
   308                           
   309                           ; 1 bytes @ 0x6
   310     0076                     	ds	1
   311     0077                     ?___bmul:
   312     0077                     ___bmul@multiplicand:	
   313                           ; 1 bytes @ 0x7
   314                           
   315                           
   316                           ; 1 bytes @ 0x7
   317     0077                     	ds	1
   318     0078                     ??___lmul:
   319     0078                     ??___bmul:	
   320                           ; 1 bytes @ 0x8
   321                           
   322     0078                     ___bmul@product:	
   323                           ; 1 bytes @ 0x8
   324                           
   325                           
   326                           ; 1 bytes @ 0x8
   327     0078                     	ds	1
   328     0079                     ___bmul@multiplier:
   329     0079                     ___lmul@product:	
   330                           ; 1 bytes @ 0x9
   331                           
   332                           
   333                           ; 4 bytes @ 0x9
   334     0079                     	ds	1
   335     007A                     ?_output:
   336     007A                     output@i:	
   337                           ; 1 bytes @ 0xA
   338                           
   339                           
   340                           ; 2 bytes @ 0xA
   341     007A                     	ds	2
   342     007C                     ??_output:
   343                           
   344                           ; 1 bytes @ 0xC
   345     007C                     	ds	1
   346     007D                     ??___lldiv:
   347                           
   348                           ; 1 bytes @ 0xD
   349     007D                     	ds	1
   350                           
   351                           	psect	cstackBANK0
   352     003B                     __pcstackBANK0:
   353     003B                     ?___lldiv:
   354     003B                     ___lldiv@divisor:	
   355                           ; 4 bytes @ 0x0
   356                           
   357                           
   358                           ; 4 bytes @ 0x0
   359     003B                     	ds	4
   360     003F                     ___lldiv@dividend:
   361                           
   362                           ; 4 bytes @ 0x4
   363     003F                     	ds	4
   364     0043                     ___lldiv@quotient:
   365                           
   366                           ; 4 bytes @ 0x8
   367     0043                     	ds	4
   368     0047                     ___lldiv@counter:
   369                           
   370                           ; 1 bytes @ 0xC
   371     0047                     	ds	1
   372     0048                     ??_main:
   373                           
   374                           ; 1 bytes @ 0xD
   375     0048                     	ds	2
   376                           
   377                           	psect	maintext
   378     0772                     __pmaintext:	
   379 ;;
   380 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   381 ;;
   382 ;; *************** function _main *****************
   383 ;; Defined at:
   384 ;;		line 29 in file "adc.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;		None
   387 ;; Auto vars:     Size  Location     Type
   388 ;;		None
   389 ;; Return value:  Size  Location     Type
   390 ;;                  1    wreg      void 
   391 ;; Registers used:
   392 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   393 ;; Tracked objects:
   394 ;;		On entry : B00/0
   395 ;;		On exit  : 0/0
   396 ;;		Unchanged: 0/0
   397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   398 ;;      Params:         0       0       0       0       0
   399 ;;      Locals:         0       0       0       0       0
   400 ;;      Temps:          0       2       0       0       0
   401 ;;      Totals:         0       2       0       0       0
   402 ;;Total ram usage:        2 bytes
   403 ;; Hardware stack levels required when called: 3
   404 ;; This function calls:
   405 ;;		___lldiv
   406 ;;		___lmul
   407 ;;		_cmd
   408 ;;		_delay
   409 ;;		_init
   410 ;;		_output
   411 ;; This function is called by:
   412 ;;		Startup code after reset
   413 ;; This function uses a non-reentrant model
   414 ;;
   415                           
   416     0772                     _main:	
   417                           ;psect for function _main
   418                           
   419     0772                     l970:	
   420                           ;incstack = 0
   421                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   422                           
   423                           
   424                           ;adc.c: 30:     init();
   425     0772  120A  118A  26FA  120A  118A  	fcall	_init
   426     0777                     l972:
   427                           
   428                           ;adc.c: 32:         ADCON0 = 0x81;
   429     0777  3081               	movlw	129
   430     0778  1283               	bcf	3,5	;RP0=0, select bank0
   431     0779  1303               	bcf	3,6	;RP1=0, select bank0
   432     077A  009F               	movwf	31	;volatile
   433     077B                     l974:
   434                           
   435                           ;adc.c: 33:         ADCON0 |= 0x04;
   436     077B  151F               	bsf	31,2	;volatile
   437     077C                     l52:	
   438                           ;adc.c: 34:         while(ADCON0&0x04);
   439                           
   440     077C  191F               	btfsc	31,2	;volatile
   441     077D  2F7F               	goto	u501
   442     077E  2F80               	goto	u500
   443     077F                     u501:
   444     077F  2F7C               	goto	l52
   445     0780                     u500:
   446     0780                     l976:
   447                           
   448                           ;adc.c: 35:         hival = ADRESH;
   449     0780  081E               	movf	30,w	;volatile
   450     0781  00C8               	movwf	??_main
   451     0782  01C9               	clrf	??_main+1
   452     0783  0848               	movf	??_main,w
   453     0784  00B6               	movwf	_hival
   454     0785  0849               	movf	??_main+1,w
   455     0786  00B7               	movwf	_hival+1
   456                           
   457                           ;adc.c: 36:         loval = ADRESL;
   458     0787  1683               	bsf	3,5	;RP0=1, select bank1
   459     0788  1303               	bcf	3,6	;RP1=0, select bank1
   460     0789  081E               	movf	30,w	;volatile
   461     078A  1283               	bcf	3,5	;RP0=0, select bank0
   462     078B  1303               	bcf	3,6	;RP1=0, select bank0
   463     078C  00C8               	movwf	??_main
   464     078D  01C9               	clrf	??_main+1
   465     078E  0848               	movf	??_main,w
   466     078F  00B4               	movwf	_loval
   467     0790  0849               	movf	??_main+1,w
   468     0791  00B5               	movwf	_loval+1
   469     0792                     l978:
   470                           
   471                           ;adc.c: 37:         val = ((unsigned int)(hival<<8))+(unsigned int)loval;
   472     0792  0836               	movf	_hival,w
   473     0793  00C9               	movwf	??_main+1
   474     0794  01C8               	clrf	??_main
   475     0795  0834               	movf	_loval,w
   476     0796  0748               	addwf	??_main,w
   477     0797  00AE               	movwf	_val
   478     0798  0835               	movf	_loval+1,w
   479     0799  1803               	skipnc
   480     079A  0A35               	incf	_loval+1,w
   481     079B  0749               	addwf	??_main+1,w
   482     079C  00AF               	movwf	_val+1
   483     079D  01B0               	clrf	_val+2
   484     079E  01B1               	clrf	_val+3
   485     079F                     l980:
   486                           
   487                           ;adc.c: 38:         voltage = (val*48)/1023;
   488     079F  3000               	movlw	0
   489     07A0  00BE               	movwf	___lldiv@divisor+3
   490     07A1  3000               	movlw	0
   491     07A2  00BD               	movwf	___lldiv@divisor+2
   492     07A3  3003               	movlw	3
   493     07A4  00BC               	movwf	___lldiv@divisor+1
   494     07A5  30FF               	movlw	255
   495     07A6  00BB               	movwf	___lldiv@divisor
   496     07A7  0831               	movf	_val+3,w
   497     07A8  00F3               	movwf	___lmul@multiplier+3
   498     07A9  0830               	movf	_val+2,w
   499     07AA  00F2               	movwf	___lmul@multiplier+2
   500     07AB  082F               	movf	_val+1,w
   501     07AC  00F1               	movwf	___lmul@multiplier+1
   502     07AD  082E               	movf	_val,w
   503     07AE  00F0               	movwf	___lmul@multiplier
   504     07AF  3000               	movlw	0
   505     07B0  00F7               	movwf	___lmul@multiplicand+3
   506     07B1  3000               	movlw	0
   507     07B2  00F6               	movwf	___lmul@multiplicand+2
   508     07B3  3000               	movlw	0
   509     07B4  00F5               	movwf	___lmul@multiplicand+1
   510     07B5  3030               	movlw	48
   511     07B6  00F4               	movwf	___lmul@multiplicand
   512     07B7  120A  118A  25DD  120A  118A  	fcall	___lmul
   513     07BC  0873               	movf	?___lmul+3,w
   514     07BD  1283               	bcf	3,5	;RP0=0, select bank0
   515     07BE  1303               	bcf	3,6	;RP1=0, select bank0
   516     07BF  00C2               	movwf	___lldiv@dividend+3
   517     07C0  0872               	movf	?___lmul+2,w
   518     07C1  00C1               	movwf	___lldiv@dividend+2
   519     07C2  0871               	movf	?___lmul+1,w
   520     07C3  00C0               	movwf	___lldiv@dividend+1
   521     07C4  0870               	movf	?___lmul,w
   522     07C5  00BF               	movwf	___lldiv@dividend
   523     07C6  120A  118A  2623  120A  118A  	fcall	___lldiv
   524     07CB  1283               	bcf	3,5	;RP0=0, select bank0
   525     07CC  1303               	bcf	3,6	;RP1=0, select bank0
   526     07CD  083E               	movf	?___lldiv+3,w
   527     07CE  00AD               	movwf	_voltage+3
   528     07CF  083D               	movf	?___lldiv+2,w
   529     07D0  00AC               	movwf	_voltage+2
   530     07D1  083C               	movf	?___lldiv+1,w
   531     07D2  00AB               	movwf	_voltage+1
   532     07D3  083B               	movf	?___lldiv,w
   533     07D4  00AA               	movwf	_voltage
   534     07D5                     l982:
   535                           
   536                           ;adc.c: 39:         cmd(0x80);
   537     07D5  3080               	movlw	128
   538     07D6  120A  118A  2581  120A  118A  	fcall	_cmd
   539     07DB                     l984:
   540                           
   541                           ;adc.c: 40:         output(voltage);
   542     07DB  1283               	bcf	3,5	;RP0=0, select bank0
   543     07DC  1303               	bcf	3,6	;RP1=0, select bank0
   544     07DD  082B               	movf	_voltage+1,w
   545     07DE  00FB               	movwf	output@i+1
   546     07DF  082A               	movf	_voltage,w
   547     07E0  00FA               	movwf	output@i
   548     07E1  120A  118A  268B  120A  118A  	fcall	_output
   549     07E6                     l986:
   550                           
   551                           ;adc.c: 41:         delay(1000);
   552     07E6  30E8               	movlw	232
   553     07E7  00F0               	movwf	delay@x
   554     07E8  3003               	movlw	3
   555     07E9  00F1               	movwf	delay@x+1
   556     07EA  120A  118A  254A  120A  118A  	fcall	_delay
   557     07EF  2F77               	goto	l972
   558     07F0  120A  118A  2800   	ljmp	start
   559     07F3                     __end_of_main:
   560                           
   561                           	psect	text1
   562     068B                     __ptext1:	
   563 ;; *************** function _output *****************
   564 ;; Defined at:
   565 ;;		line 65 in file "adc.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;  i               2   10[COMMON] unsigned int 
   568 ;; Auto vars:     Size  Location     Type
   569 ;;		None
   570 ;; Return value:  Size  Location     Type
   571 ;;                  1    wreg      void 
   572 ;; Registers used:
   573 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   574 ;; Tracked objects:
   575 ;;		On entry : 0/0
   576 ;;		On exit  : 0/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   579 ;;      Params:         2       0       0       0       0
   580 ;;      Locals:         0       0       0       0       0
   581 ;;      Temps:          0       0       0       0       0
   582 ;;      Totals:         2       0       0       0       0
   583 ;;Total ram usage:        2 bytes
   584 ;; Hardware stack levels used: 1
   585 ;; Hardware stack levels required when called: 2
   586 ;; This function calls:
   587 ;;		___bmul
   588 ;;		___lwdiv
   589 ;;		_data
   590 ;; This function is called by:
   591 ;;		_main
   592 ;; This function uses a non-reentrant model
   593 ;;
   594                           
   595     068B                     _output:	
   596                           ;psect for function _output
   597                           
   598     068B                     l906:	
   599                           ;incstack = 0
   600                           ; Regs used in _output: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   601                           
   602                           
   603                           ;adc.c: 66:     m = i; j=1;
   604     068B  087B               	movf	output@i+1,w
   605     068C  1283               	bcf	3,5	;RP0=0, select bank0
   606     068D  1303               	bcf	3,6	;RP1=0, select bank0
   607     068E  00B3               	movwf	_m+1
   608     068F  087A               	movf	output@i,w
   609     0690  00B2               	movwf	_m
   610     0691                     l908:
   611     0691  01BA               	clrf	_j
   612     0692  0ABA               	incf	_j,f
   613                           
   614                           ;adc.c: 67:     while(m) {
   615     0693  2ECA               	goto	l918
   616     0694                     l910:
   617                           
   618                           ;adc.c: 68:         s = m-(m/10)*10;
   619     0694  30F6               	movlw	246
   620     0695  00F7               	movwf	___bmul@multiplicand
   621     0696  0833               	movf	_m+1,w
   622     0697  00F3               	movwf	___lwdiv@dividend+1
   623     0698  0832               	movf	_m,w
   624     0699  00F2               	movwf	___lwdiv@dividend
   625     069A  300A               	movlw	10
   626     069B  00F0               	movwf	___lwdiv@divisor
   627     069C  3000               	movlw	0
   628     069D  00F1               	movwf	___lwdiv@divisor+1
   629     069E  120A  118A  2599  120A  118A  	fcall	___lwdiv
   630     06A3  0870               	movf	?___lwdiv,w
   631     06A4  120A  118A  2557  120A  118A  	fcall	___bmul
   632     06A9  1283               	bcf	3,5	;RP0=0, select bank0
   633     06AA  1303               	bcf	3,6	;RP1=0, select bank0
   634     06AB  0732               	addwf	_m,w
   635     06AC  00B8               	movwf	_s
   636     06AD                     l912:
   637                           
   638                           ;adc.c: 69:         k[j] = s; m/=10; j++;
   639     06AD  083A               	movf	_j,w
   640     06AE  3E20               	addlw	(low (_k| 0))& (0+255)
   641     06AF  0084               	movwf	4
   642     06B0  0838               	movf	_s,w
   643     06B1  1383               	bcf	3,7	;select IRP bank0
   644     06B2  0080               	movwf	0
   645     06B3                     l914:
   646     06B3  300A               	movlw	10
   647     06B4  00F0               	movwf	___lwdiv@divisor
   648     06B5  3000               	movlw	0
   649     06B6  00F1               	movwf	___lwdiv@divisor+1
   650     06B7  0833               	movf	_m+1,w
   651     06B8  00F3               	movwf	___lwdiv@dividend+1
   652     06B9  0832               	movf	_m,w
   653     06BA  00F2               	movwf	___lwdiv@dividend
   654     06BB  120A  118A  2599  120A  118A  	fcall	___lwdiv
   655     06C0  0871               	movf	?___lwdiv+1,w
   656     06C1  1283               	bcf	3,5	;RP0=0, select bank0
   657     06C2  1303               	bcf	3,6	;RP1=0, select bank0
   658     06C3  00B3               	movwf	_m+1
   659     06C4  0870               	movf	?___lwdiv,w
   660     06C5  00B2               	movwf	_m
   661     06C6                     l916:
   662     06C6  3001               	movlw	1
   663     06C7  00FF               	movwf	btemp+1
   664     06C8  087F               	movf	btemp+1,w
   665     06C9  07BA               	addwf	_j,f
   666     06CA                     l918:
   667                           
   668                           ;adc.c: 67:     while(m) {
   669     06CA  0832               	movf	_m,w
   670     06CB  0433               	iorwf	_m+1,w
   671     06CC  1D03               	btfss	3,2
   672     06CD  2ECF               	goto	u361
   673     06CE  2ED0               	goto	u360
   674     06CF                     u361:
   675     06CF  2E94               	goto	l910
   676     06D0                     u360:
   677     06D0                     l920:
   678                           
   679                           ;adc.c: 71:     k[j]='\0';j--;
   680     06D0  083A               	movf	_j,w
   681     06D1  3E20               	addlw	(low (_k| 0))& (0+255)
   682     06D2  0084               	movwf	4
   683     06D3  1383               	bcf	3,7	;select IRP bank0
   684     06D4  0180               	clrf	0
   685     06D5                     l922:
   686     06D5  3001               	movlw	1
   687     06D6  02BA               	subwf	_j,f
   688     06D7                     l924:
   689                           
   690                           ;adc.c: 72:     if(k[2])
   691     06D7  0822               	movf	_k+2,w
   692     06D8  1903               	btfsc	3,2
   693     06D9  2EDB               	goto	u371
   694     06DA  2EDC               	goto	u370
   695     06DB                     u371:
   696     06DB  2EE4               	goto	l928
   697     06DC                     u370:
   698     06DC                     l926:
   699                           
   700                           ;adc.c: 73:         data(0x30+k[2]);
   701     06DC  0822               	movf	_k+2,w
   702     06DD  3E30               	addlw	48
   703     06DE  120A  118A  256C  120A  118A  	fcall	_data
   704     06E3  2EEA               	goto	l67
   705     06E4                     l928:
   706                           
   707                           ;adc.c: 75:         data(' ');
   708     06E4  3020               	movlw	32
   709     06E5  120A  118A  256C  120A  118A  	fcall	_data
   710     06EA                     l67:
   711                           
   712                           ;adc.c: 76:     data(0x30+k[1]);
   713     06EA  1283               	bcf	3,5	;RP0=0, select bank0
   714     06EB  1303               	bcf	3,6	;RP1=0, select bank0
   715     06EC  0821               	movf	_k+1,w
   716     06ED  3E30               	addlw	48
   717     06EE  120A  118A  256C  120A  118A  	fcall	_data
   718                           
   719                           ;adc.c: 77:     data('V');
   720     06F3  3056               	movlw	86
   721     06F4  120A  118A  256C  120A  118A  	fcall	_data
   722     06F9                     l68:
   723     06F9  0008               	return
   724     06FA                     __end_of_output:
   725                           
   726                           	psect	text2
   727     056C                     __ptext2:	
   728 ;; *************** function _data *****************
   729 ;; Defined at:
   730 ;;		line 86 in file "adc.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;  i               1    wreg     unsigned char 
   733 ;; Auto vars:     Size  Location     Type
   734 ;;  i               1    2[COMMON] unsigned char 
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      void 
   737 ;; Registers used:
   738 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   744 ;;      Params:         0       0       0       0       0
   745 ;;      Locals:         1       0       0       0       0
   746 ;;      Temps:          0       0       0       0       0
   747 ;;      Totals:         1       0       0       0       0
   748 ;;Total ram usage:        1 bytes
   749 ;; Hardware stack levels used: 1
   750 ;; Hardware stack levels required when called: 1
   751 ;; This function calls:
   752 ;;		_delay
   753 ;; This function is called by:
   754 ;;		_output
   755 ;; This function uses a non-reentrant model
   756 ;;
   757                           
   758     056C                     _data:	
   759                           ;psect for function _data
   760                           
   761                           
   762                           ;incstack = 0
   763                           ; Regs used in _data: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   764                           ;data@i stored from wreg
   765     056C  00F2               	movwf	data@i
   766     056D                     l820:
   767                           
   768                           ;adc.c: 87:     PORTC |= 0x08;
   769     056D  1283               	bcf	3,5	;RP0=0, select bank0
   770     056E  1303               	bcf	3,6	;RP1=0, select bank0
   771     056F  1587               	bsf	7,3	;volatile
   772     0570                     l822:
   773                           
   774                           ;adc.c: 88:     PORTD = i;
   775     0570  0872               	movf	data@i,w
   776     0571  0088               	movwf	8	;volatile
   777     0572                     l824:
   778                           
   779                           ;adc.c: 89:     PORTC |= 0x01;
   780     0572  1407               	bsf	7,0	;volatile
   781     0573                     l826:
   782                           
   783                           ;adc.c: 90:     PORTC &= ~(0x01);
   784     0573  30FE               	movlw	254
   785     0574  00FF               	movwf	btemp+1
   786     0575  087F               	movf	btemp+1,w
   787     0576  0587               	andwf	7,f	;volatile
   788     0577                     l828:
   789                           
   790                           ;adc.c: 91:     delay(100);
   791     0577  3064               	movlw	100
   792     0578  00F0               	movwf	delay@x
   793     0579  3000               	movlw	0
   794     057A  00F1               	movwf	delay@x+1
   795     057B  120A  118A  254A  120A  118A  	fcall	_delay
   796     0580                     l74:
   797     0580  0008               	return
   798     0581                     __end_of_data:
   799                           
   800                           	psect	text3
   801     0599                     __ptext3:	
   802 ;; *************** function ___lwdiv *****************
   803 ;; Defined at:
   804 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
   805 ;; Parameters:    Size  Location     Type
   806 ;;  divisor         2    0[COMMON] unsigned int 
   807 ;;  dividend        2    2[COMMON] unsigned int 
   808 ;; Auto vars:     Size  Location     Type
   809 ;;  quotient        2    4[COMMON] unsigned int 
   810 ;;  counter         1    6[COMMON] unsigned char 
   811 ;; Return value:  Size  Location     Type
   812 ;;                  2    0[COMMON] unsigned int 
   813 ;; Registers used:
   814 ;;		wreg, status,2, status,0, btemp+1
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   820 ;;      Params:         4       0       0       0       0
   821 ;;      Locals:         3       0       0       0       0
   822 ;;      Temps:          0       0       0       0       0
   823 ;;      Totals:         7       0       0       0       0
   824 ;;Total ram usage:        7 bytes
   825 ;; Hardware stack levels used: 1
   826 ;; This function calls:
   827 ;;		Nothing
   828 ;; This function is called by:
   829 ;;		_output
   830 ;; This function uses a non-reentrant model
   831 ;;
   832                           
   833     0599                     ___lwdiv:	
   834                           ;psect for function ___lwdiv
   835                           
   836     0599                     l846:	
   837                           ;incstack = 0
   838                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
   839                           
   840     0599  01F4               	clrf	___lwdiv@quotient
   841     059A  01F5               	clrf	___lwdiv@quotient+1
   842     059B                     l848:
   843     059B  0870               	movf	___lwdiv@divisor,w
   844     059C  0471               	iorwf	___lwdiv@divisor+1,w
   845     059D  1903               	btfsc	3,2
   846     059E  2DA0               	goto	u291
   847     059F  2DA1               	goto	u290
   848     05A0                     u291:
   849     05A0  2DD8               	goto	l868
   850     05A1                     u290:
   851     05A1                     l850:
   852     05A1  01F6               	clrf	___lwdiv@counter
   853     05A2  0AF6               	incf	___lwdiv@counter,f
   854     05A3  2DAF               	goto	l856
   855     05A4                     l852:
   856     05A4  3001               	movlw	1
   857     05A5                     u305:
   858     05A5  1003               	clrc
   859     05A6  0DF0               	rlf	___lwdiv@divisor,f
   860     05A7  0DF1               	rlf	___lwdiv@divisor+1,f
   861     05A8  3EFF               	addlw	-1
   862     05A9  1D03               	skipz
   863     05AA  2DA5               	goto	u305
   864     05AB                     l854:
   865     05AB  3001               	movlw	1
   866     05AC  00FF               	movwf	btemp+1
   867     05AD  087F               	movf	btemp+1,w
   868     05AE  07F6               	addwf	___lwdiv@counter,f
   869     05AF                     l856:
   870     05AF  1FF1               	btfss	___lwdiv@divisor+1,7
   871     05B0  2DB2               	goto	u311
   872     05B1  2DB3               	goto	u310
   873     05B2                     u311:
   874     05B2  2DA4               	goto	l852
   875     05B3                     u310:
   876     05B3                     l858:
   877     05B3  3001               	movlw	1
   878     05B4                     u325:
   879     05B4  1003               	clrc
   880     05B5  0DF4               	rlf	___lwdiv@quotient,f
   881     05B6  0DF5               	rlf	___lwdiv@quotient+1,f
   882     05B7  3EFF               	addlw	-1
   883     05B8  1D03               	skipz
   884     05B9  2DB4               	goto	u325
   885     05BA  0871               	movf	___lwdiv@divisor+1,w
   886     05BB  0273               	subwf	___lwdiv@dividend+1,w
   887     05BC  1D03               	skipz
   888     05BD  2DC0               	goto	u335
   889     05BE  0870               	movf	___lwdiv@divisor,w
   890     05BF  0272               	subwf	___lwdiv@dividend,w
   891     05C0                     u335:
   892     05C0  1C03               	skipc
   893     05C1  2DC3               	goto	u331
   894     05C2  2DC4               	goto	u330
   895     05C3                     u331:
   896     05C3  2DCB               	goto	l864
   897     05C4                     u330:
   898     05C4                     l860:
   899     05C4  0870               	movf	___lwdiv@divisor,w
   900     05C5  02F2               	subwf	___lwdiv@dividend,f
   901     05C6  0871               	movf	___lwdiv@divisor+1,w
   902     05C7  1C03               	skipc
   903     05C8  03F3               	decf	___lwdiv@dividend+1,f
   904     05C9  02F3               	subwf	___lwdiv@dividend+1,f
   905     05CA                     l862:
   906     05CA  1474               	bsf	___lwdiv@quotient,0
   907     05CB                     l864:
   908     05CB  3001               	movlw	1
   909     05CC                     u345:
   910     05CC  1003               	clrc
   911     05CD  0CF1               	rrf	___lwdiv@divisor+1,f
   912     05CE  0CF0               	rrf	___lwdiv@divisor,f
   913     05CF  3EFF               	addlw	-1
   914     05D0  1D03               	skipz
   915     05D1  2DCC               	goto	u345
   916     05D2                     l866:
   917     05D2  3001               	movlw	1
   918     05D3  02F6               	subwf	___lwdiv@counter,f
   919     05D4  1D03               	btfss	3,2
   920     05D5  2DD7               	goto	u351
   921     05D6  2DD8               	goto	u350
   922     05D7                     u351:
   923     05D7  2DB3               	goto	l858
   924     05D8                     u350:
   925     05D8                     l868:
   926     05D8  0875               	movf	___lwdiv@quotient+1,w
   927     05D9  00F1               	movwf	?___lwdiv+1
   928     05DA  0874               	movf	___lwdiv@quotient,w
   929     05DB  00F0               	movwf	?___lwdiv
   930     05DC                     l446:
   931     05DC  0008               	return
   932     05DD                     __end_of___lwdiv:
   933                           
   934                           	psect	text4
   935     0557                     __ptext4:	
   936 ;; *************** function ___bmul *****************
   937 ;; Defined at:
   938 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul8.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  multiplier      1    wreg     unsigned char 
   941 ;;  multiplicand    1    7[COMMON] unsigned char 
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  multiplier      1    9[COMMON] unsigned char 
   944 ;;  product         1    8[COMMON] unsigned char 
   945 ;; Return value:  Size  Location     Type
   946 ;;                  1    wreg      unsigned char 
   947 ;; Registers used:
   948 ;;		wreg, status,2, status,0, btemp+1
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   954 ;;      Params:         1       0       0       0       0
   955 ;;      Locals:         2       0       0       0       0
   956 ;;      Temps:          0       0       0       0       0
   957 ;;      Totals:         3       0       0       0       0
   958 ;;Total ram usage:        3 bytes
   959 ;; Hardware stack levels used: 1
   960 ;; This function calls:
   961 ;;		Nothing
   962 ;; This function is called by:
   963 ;;		_output
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967     0557                     ___bmul:	
   968                           ;psect for function ___bmul
   969                           
   970                           
   971                           ;incstack = 0
   972                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
   973                           ;___bmul@multiplier stored from wreg
   974     0557  00F9               	movwf	___bmul@multiplier
   975     0558                     l830:
   976     0558  01F8               	clrf	___bmul@product
   977     0559                     l832:
   978     0559  1C79               	btfss	___bmul@multiplier,0
   979     055A  2D5C               	goto	u271
   980     055B  2D5D               	goto	u270
   981     055C                     u271:
   982     055C  2D61               	goto	l836
   983     055D                     u270:
   984     055D                     l834:
   985     055D  0877               	movf	___bmul@multiplicand,w
   986     055E  00FF               	movwf	btemp+1
   987     055F  087F               	movf	btemp+1,w
   988     0560  07F8               	addwf	___bmul@product,f
   989     0561                     l836:
   990     0561  1003               	clrc
   991     0562  0DF7               	rlf	___bmul@multiplicand,f
   992     0563                     l838:
   993     0563  1003               	clrc
   994     0564  0CF9               	rrf	___bmul@multiplier,f
   995     0565                     l840:
   996     0565  0879               	movf	___bmul@multiplier,w
   997     0566  1D03               	btfss	3,2
   998     0567  2D69               	goto	u281
   999     0568  2D6A               	goto	u280
  1000     0569                     u281:
  1001     0569  2D59               	goto	l832
  1002     056A                     u280:
  1003     056A                     l842:
  1004     056A  0878               	movf	___bmul@product,w
  1005     056B                     l192:
  1006     056B  0008               	return
  1007     056C                     __end_of___bmul:
  1008                           
  1009                           	psect	text5
  1010     06FA                     __ptext5:	
  1011 ;; *************** function _init *****************
  1012 ;; Defined at:
  1013 ;;		line 44 in file "adc.c"
  1014 ;; Parameters:    Size  Location     Type
  1015 ;;		None
  1016 ;; Auto vars:     Size  Location     Type
  1017 ;;		None
  1018 ;; Return value:  Size  Location     Type
  1019 ;;                  1    wreg      void 
  1020 ;; Registers used:
  1021 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1027 ;;      Params:         0       0       0       0       0
  1028 ;;      Locals:         0       0       0       0       0
  1029 ;;      Temps:          0       0       0       0       0
  1030 ;;      Totals:         0       0       0       0       0
  1031 ;;Total ram usage:        0 bytes
  1032 ;; Hardware stack levels used: 1
  1033 ;; Hardware stack levels required when called: 2
  1034 ;; This function calls:
  1035 ;;		_cmd
  1036 ;;		_delay
  1037 ;; This function is called by:
  1038 ;;		_main
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042     06FA                     _init:	
  1043                           ;psect for function _init
  1044                           
  1045     06FA                     l872:	
  1046                           ;incstack = 0
  1047                           ; Regs used in _init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1048                           
  1049                           
  1050                           ;adc.c: 45:     TRISA = 0x01;
  1051     06FA  3001               	movlw	1
  1052     06FB  1683               	bsf	3,5	;RP0=1, select bank1
  1053     06FC  1303               	bcf	3,6	;RP1=0, select bank1
  1054     06FD  0085               	movwf	5	;volatile
  1055     06FE                     l874:
  1056                           
  1057                           ;adc.c: 46:     TRISC = 0x00;
  1058     06FE  0187               	clrf	7	;volatile
  1059     06FF                     l876:
  1060                           
  1061                           ;adc.c: 47:     TRISD = 0x00;
  1062     06FF  0188               	clrf	8	;volatile
  1063                           
  1064                           ;adc.c: 48:     ADCON0 = 0x81;
  1065     0700  3081               	movlw	129
  1066     0701  1283               	bcf	3,5	;RP0=0, select bank0
  1067     0702  1303               	bcf	3,6	;RP1=0, select bank0
  1068     0703  009F               	movwf	31	;volatile
  1069                           
  1070                           ;adc.c: 49:     ADCON1 = 0x8E;
  1071     0704  308E               	movlw	142
  1072     0705  1683               	bsf	3,5	;RP0=1, select bank1
  1073     0706  1303               	bcf	3,6	;RP1=0, select bank1
  1074     0707  009F               	movwf	31	;volatile
  1075     0708                     l878:
  1076                           
  1077                           ;adc.c: 50:     cmd(0x38);
  1078     0708  3038               	movlw	56
  1079     0709  120A  118A  2581  120A  118A  	fcall	_cmd
  1080     070E                     l880:
  1081                           
  1082                           ;adc.c: 51:     delay(100);
  1083     070E  3064               	movlw	100
  1084     070F  00F0               	movwf	delay@x
  1085     0710  3000               	movlw	0
  1086     0711  00F1               	movwf	delay@x+1
  1087     0712  120A  118A  254A  120A  118A  	fcall	_delay
  1088     0717                     l882:
  1089                           
  1090                           ;adc.c: 52:     cmd(0x38);
  1091     0717  3038               	movlw	56
  1092     0718  120A  118A  2581  120A  118A  	fcall	_cmd
  1093     071D                     l884:
  1094                           
  1095                           ;adc.c: 53:     delay(100);
  1096     071D  3064               	movlw	100
  1097     071E  00F0               	movwf	delay@x
  1098     071F  3000               	movlw	0
  1099     0720  00F1               	movwf	delay@x+1
  1100     0721  120A  118A  254A  120A  118A  	fcall	_delay
  1101     0726                     l886:
  1102                           
  1103                           ;adc.c: 54:     cmd(0x38);
  1104     0726  3038               	movlw	56
  1105     0727  120A  118A  2581  120A  118A  	fcall	_cmd
  1106     072C                     l888:
  1107                           
  1108                           ;adc.c: 55:     delay(100);
  1109     072C  3064               	movlw	100
  1110     072D  00F0               	movwf	delay@x
  1111     072E  3000               	movlw	0
  1112     072F  00F1               	movwf	delay@x+1
  1113     0730  120A  118A  254A  120A  118A  	fcall	_delay
  1114     0735                     l890:
  1115                           
  1116                           ;adc.c: 56:     cmd(0x38);
  1117     0735  3038               	movlw	56
  1118     0736  120A  118A  2581  120A  118A  	fcall	_cmd
  1119     073B                     l892:
  1120                           
  1121                           ;adc.c: 57:     delay(100);
  1122     073B  3064               	movlw	100
  1123     073C  00F0               	movwf	delay@x
  1124     073D  3000               	movlw	0
  1125     073E  00F1               	movwf	delay@x+1
  1126     073F  120A  118A  254A  120A  118A  	fcall	_delay
  1127     0744                     l894:
  1128                           
  1129                           ;adc.c: 58:     cmd(0x0C);
  1130     0744  300C               	movlw	12
  1131     0745  120A  118A  2581  120A  118A  	fcall	_cmd
  1132     074A                     l896:
  1133                           
  1134                           ;adc.c: 59:     delay(100);
  1135     074A  3064               	movlw	100
  1136     074B  00F0               	movwf	delay@x
  1137     074C  3000               	movlw	0
  1138     074D  00F1               	movwf	delay@x+1
  1139     074E  120A  118A  254A  120A  118A  	fcall	_delay
  1140     0753                     l898:
  1141                           
  1142                           ;adc.c: 60:     cmd(0x06);
  1143     0753  3006               	movlw	6
  1144     0754  120A  118A  2581  120A  118A  	fcall	_cmd
  1145     0759                     l900:
  1146                           
  1147                           ;adc.c: 61:     delay(100);
  1148     0759  3064               	movlw	100
  1149     075A  00F0               	movwf	delay@x
  1150     075B  3000               	movlw	0
  1151     075C  00F1               	movwf	delay@x+1
  1152     075D  120A  118A  254A  120A  118A  	fcall	_delay
  1153     0762                     l902:
  1154                           
  1155                           ;adc.c: 62:     cmd(0x01);
  1156     0762  3001               	movlw	1
  1157     0763  120A  118A  2581  120A  118A  	fcall	_cmd
  1158     0768                     l904:
  1159                           
  1160                           ;adc.c: 63:     delay(100);
  1161     0768  3064               	movlw	100
  1162     0769  00F0               	movwf	delay@x
  1163     076A  3000               	movlw	0
  1164     076B  00F1               	movwf	delay@x+1
  1165     076C  120A  118A  254A  120A  118A  	fcall	_delay
  1166     0771                     l60:
  1167     0771  0008               	return
  1168     0772                     __end_of_init:
  1169                           
  1170                           	psect	text6
  1171     0581                     __ptext6:	
  1172 ;; *************** function _cmd *****************
  1173 ;; Defined at:
  1174 ;;		line 79 in file "adc.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;  i               1    wreg     unsigned char 
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;  i               1    2[COMMON] unsigned char 
  1179 ;; Return value:  Size  Location     Type
  1180 ;;                  1    wreg      void 
  1181 ;; Registers used:
  1182 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 0/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1188 ;;      Params:         0       0       0       0       0
  1189 ;;      Locals:         1       0       0       0       0
  1190 ;;      Temps:          0       0       0       0       0
  1191 ;;      Totals:         1       0       0       0       0
  1192 ;;Total ram usage:        1 bytes
  1193 ;; Hardware stack levels used: 1
  1194 ;; Hardware stack levels required when called: 1
  1195 ;; This function calls:
  1196 ;;		_delay
  1197 ;; This function is called by:
  1198 ;;		_main
  1199 ;;		_init
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203     0581                     _cmd:	
  1204                           ;psect for function _cmd
  1205                           
  1206                           
  1207                           ;incstack = 0
  1208                           ; Regs used in _cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1209                           ;cmd@i stored from wreg
  1210     0581  00F2               	movwf	cmd@i
  1211     0582                     l810:
  1212                           
  1213                           ;adc.c: 80:     PORTC &= 0xF7;
  1214     0582  30F7               	movlw	247
  1215     0583  00FF               	movwf	btemp+1
  1216     0584  087F               	movf	btemp+1,w
  1217     0585  1283               	bcf	3,5	;RP0=0, select bank0
  1218     0586  1303               	bcf	3,6	;RP1=0, select bank0
  1219     0587  0587               	andwf	7,f	;volatile
  1220     0588                     l812:
  1221                           
  1222                           ;adc.c: 81:     PORTD = i;
  1223     0588  0872               	movf	cmd@i,w
  1224     0589  0088               	movwf	8	;volatile
  1225     058A                     l814:
  1226                           
  1227                           ;adc.c: 82:     PORTC |= 0x01;
  1228     058A  1407               	bsf	7,0	;volatile
  1229     058B                     l816:
  1230                           
  1231                           ;adc.c: 83:     PORTC &= ~(0x01);
  1232     058B  30FE               	movlw	254
  1233     058C  00FF               	movwf	btemp+1
  1234     058D  087F               	movf	btemp+1,w
  1235     058E  0587               	andwf	7,f	;volatile
  1236     058F                     l818:
  1237                           
  1238                           ;adc.c: 84:     delay(100);
  1239     058F  3064               	movlw	100
  1240     0590  00F0               	movwf	delay@x
  1241     0591  3000               	movlw	0
  1242     0592  00F1               	movwf	delay@x+1
  1243     0593  120A  118A  254A  120A  118A  	fcall	_delay
  1244     0598                     l71:
  1245     0598  0008               	return
  1246     0599                     __end_of_cmd:
  1247                           
  1248                           	psect	text7
  1249     054A                     __ptext7:	
  1250 ;; *************** function _delay *****************
  1251 ;; Defined at:
  1252 ;;		line 93 in file "adc.c"
  1253 ;; Parameters:    Size  Location     Type
  1254 ;;  x               2    0[COMMON] unsigned int 
  1255 ;; Auto vars:     Size  Location     Type
  1256 ;;		None
  1257 ;; Return value:  Size  Location     Type
  1258 ;;                  1    wreg      void 
  1259 ;; Registers used:
  1260 ;;		wreg, status,2, status,0
  1261 ;; Tracked objects:
  1262 ;;		On entry : 0/0
  1263 ;;		On exit  : 0/0
  1264 ;;		Unchanged: 0/0
  1265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1266 ;;      Params:         2       0       0       0       0
  1267 ;;      Locals:         0       0       0       0       0
  1268 ;;      Temps:          0       0       0       0       0
  1269 ;;      Totals:         2       0       0       0       0
  1270 ;;Total ram usage:        2 bytes
  1271 ;; Hardware stack levels used: 1
  1272 ;; This function calls:
  1273 ;;		Nothing
  1274 ;; This function is called by:
  1275 ;;		_main
  1276 ;;		_init
  1277 ;;		_cmd
  1278 ;;		_data
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282     054A                     _delay:	
  1283                           ;psect for function _delay
  1284                           
  1285     054A                     l806:	
  1286                           ;incstack = 0
  1287                           ; Regs used in _delay: [wreg+status,2+status,0]
  1288                           
  1289     054A                     l808:	
  1290                           ;adc.c: 94:     while(--x);
  1291                           
  1292     054A  3001               	movlw	1
  1293     054B  02F0               	subwf	delay@x,f
  1294     054C  3000               	movlw	0
  1295     054D  1C03               	skipc
  1296     054E  03F1               	decf	delay@x+1,f
  1297     054F  02F1               	subwf	delay@x+1,f
  1298     0550  0870               	movf	delay@x,w
  1299     0551  0471               	iorwf	delay@x+1,w
  1300     0552  1D03               	btfss	3,2
  1301     0553  2D55               	goto	u261
  1302     0554  2D56               	goto	u260
  1303     0555                     u261:
  1304     0555  2D4A               	goto	l808
  1305     0556                     u260:
  1306     0556                     l80:
  1307     0556  0008               	return
  1308     0557                     __end_of_delay:
  1309                           
  1310                           	psect	text8
  1311     05DD                     __ptext8:	
  1312 ;; *************** function ___lmul *****************
  1313 ;; Defined at:
  1314 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul32.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;  multiplier      4    0[COMMON] unsigned long 
  1317 ;;  multiplicand    4    4[COMMON] unsigned long 
  1318 ;; Auto vars:     Size  Location     Type
  1319 ;;  product         4    9[COMMON] unsigned long 
  1320 ;; Return value:  Size  Location     Type
  1321 ;;                  4    0[COMMON] unsigned long 
  1322 ;; Registers used:
  1323 ;;		wreg, status,2, status,0
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1329 ;;      Params:         8       0       0       0       0
  1330 ;;      Locals:         4       0       0       0       0
  1331 ;;      Temps:          1       0       0       0       0
  1332 ;;      Totals:        13       0       0       0       0
  1333 ;;Total ram usage:       13 bytes
  1334 ;; Hardware stack levels used: 1
  1335 ;; This function calls:
  1336 ;;		Nothing
  1337 ;; This function is called by:
  1338 ;;		_main
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342     05DD                     ___lmul:	
  1343                           ;psect for function ___lmul
  1344                           
  1345     05DD                     l930:	
  1346                           ;incstack = 0
  1347                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1348                           
  1349     05DD  3000               	movlw	0
  1350     05DE  00FC               	movwf	___lmul@product+3
  1351     05DF  3000               	movlw	0
  1352     05E0  00FB               	movwf	___lmul@product+2
  1353     05E1  3000               	movlw	0
  1354     05E2  00FA               	movwf	___lmul@product+1
  1355     05E3  3000               	movlw	0
  1356     05E4  00F9               	movwf	___lmul@product
  1357     05E5                     l932:
  1358     05E5  1C70               	btfss	___lmul@multiplier,0
  1359     05E6  2DE8               	goto	u381
  1360     05E7  2DE9               	goto	u380
  1361     05E8                     u381:
  1362     05E8  2E00               	goto	l936
  1363     05E9                     u380:
  1364     05E9                     l934:
  1365     05E9  0874               	movf	___lmul@multiplicand,w
  1366     05EA  07F9               	addwf	___lmul@product,f
  1367     05EB  0875               	movf	___lmul@multiplicand+1,w
  1368     05EC  1103               	clrz
  1369     05ED  1803               	skipnc
  1370     05EE  3E01               	addlw	1
  1371     05EF  1903               	skipnz
  1372     05F0  2DF2               	goto	u391
  1373     05F1  07FA               	addwf	___lmul@product+1,f
  1374     05F2                     u391:
  1375     05F2  0876               	movf	___lmul@multiplicand+2,w
  1376     05F3  1103               	clrz
  1377     05F4  1803               	skipnc
  1378     05F5  3E01               	addlw	1
  1379     05F6  1903               	skipnz
  1380     05F7  2DF9               	goto	u392
  1381     05F8  07FB               	addwf	___lmul@product+2,f
  1382     05F9                     u392:
  1383     05F9  0877               	movf	___lmul@multiplicand+3,w
  1384     05FA  1103               	clrz
  1385     05FB  1803               	skipnc
  1386     05FC  3E01               	addlw	1
  1387     05FD  1903               	skipnz
  1388     05FE  2E00               	goto	u393
  1389     05FF  07FC               	addwf	___lmul@product+3,f
  1390     0600                     u393:
  1391     0600                     l936:
  1392     0600  3001               	movlw	1
  1393     0601  00F8               	movwf	??___lmul
  1394     0602                     u405:
  1395     0602  1003               	clrc
  1396     0603  0DF4               	rlf	___lmul@multiplicand,f
  1397     0604  0DF5               	rlf	___lmul@multiplicand+1,f
  1398     0605  0DF6               	rlf	___lmul@multiplicand+2,f
  1399     0606  0DF7               	rlf	___lmul@multiplicand+3,f
  1400     0607  0BF8               	decfsz	??___lmul,f
  1401     0608  2E02               	goto	u405
  1402     0609                     l938:
  1403     0609  3001               	movlw	1
  1404     060A                     u415:
  1405     060A  1003               	clrc
  1406     060B  0CF3               	rrf	___lmul@multiplier+3,f
  1407     060C  0CF2               	rrf	___lmul@multiplier+2,f
  1408     060D  0CF1               	rrf	___lmul@multiplier+1,f
  1409     060E  0CF0               	rrf	___lmul@multiplier,f
  1410     060F  3EFF               	addlw	-1
  1411     0610  1D03               	skipz
  1412     0611  2E0A               	goto	u415
  1413     0612  0873               	movf	___lmul@multiplier+3,w
  1414     0613  0472               	iorwf	___lmul@multiplier+2,w
  1415     0614  0471               	iorwf	___lmul@multiplier+1,w
  1416     0615  0470               	iorwf	___lmul@multiplier,w
  1417     0616  1D03               	skipz
  1418     0617  2E19               	goto	u421
  1419     0618  2E1A               	goto	u420
  1420     0619                     u421:
  1421     0619  2DE5               	goto	l932
  1422     061A                     u420:
  1423     061A                     l940:
  1424     061A  087C               	movf	___lmul@product+3,w
  1425     061B  00F3               	movwf	?___lmul+3
  1426     061C  087B               	movf	___lmul@product+2,w
  1427     061D  00F2               	movwf	?___lmul+2
  1428     061E  087A               	movf	___lmul@product+1,w
  1429     061F  00F1               	movwf	?___lmul+1
  1430     0620  0879               	movf	___lmul@product,w
  1431     0621  00F0               	movwf	?___lmul
  1432     0622                     l180:
  1433     0622  0008               	return
  1434     0623                     __end_of___lmul:
  1435                           
  1436                           	psect	text9
  1437     0623                     __ptext9:	
  1438 ;; *************** function ___lldiv *****************
  1439 ;; Defined at:
  1440 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\__lldiv.c"
  1441 ;; Parameters:    Size  Location     Type
  1442 ;;  divisor         4    0[BANK0 ] unsigned long 
  1443 ;;  dividend        4    4[BANK0 ] unsigned long 
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;  quotient        4    8[BANK0 ] unsigned long 
  1446 ;;  counter         1   12[BANK0 ] unsigned char 
  1447 ;; Return value:  Size  Location     Type
  1448 ;;                  4    0[BANK0 ] unsigned long 
  1449 ;; Registers used:
  1450 ;;		wreg, status,2, status,0, btemp+1
  1451 ;; Tracked objects:
  1452 ;;		On entry : 0/0
  1453 ;;		On exit  : 0/0
  1454 ;;		Unchanged: 0/0
  1455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1456 ;;      Params:         0       8       0       0       0
  1457 ;;      Locals:         0       5       0       0       0
  1458 ;;      Temps:          1       0       0       0       0
  1459 ;;      Totals:         1      13       0       0       0
  1460 ;;Total ram usage:       14 bytes
  1461 ;; Hardware stack levels used: 1
  1462 ;; This function calls:
  1463 ;;		Nothing
  1464 ;; This function is called by:
  1465 ;;		_main
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469     0623                     ___lldiv:	
  1470                           ;psect for function ___lldiv
  1471                           
  1472     0623                     l944:	
  1473                           ;incstack = 0
  1474                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  1475                           
  1476     0623  3000               	movlw	0
  1477     0624  1283               	bcf	3,5	;RP0=0, select bank0
  1478     0625  1303               	bcf	3,6	;RP1=0, select bank0
  1479     0626  00C6               	movwf	___lldiv@quotient+3
  1480     0627  3000               	movlw	0
  1481     0628  00C5               	movwf	___lldiv@quotient+2
  1482     0629  3000               	movlw	0
  1483     062A  00C4               	movwf	___lldiv@quotient+1
  1484     062B  3000               	movlw	0
  1485     062C  00C3               	movwf	___lldiv@quotient
  1486     062D  083E               	movf	___lldiv@divisor+3,w
  1487     062E  043D               	iorwf	___lldiv@divisor+2,w
  1488     062F  043C               	iorwf	___lldiv@divisor+1,w
  1489     0630  043B               	iorwf	___lldiv@divisor,w
  1490     0631  1903               	skipnz
  1491     0632  2E34               	goto	u431
  1492     0633  2E35               	goto	u430
  1493     0634                     u431:
  1494     0634  2E82               	goto	l966
  1495     0635                     u430:
  1496     0635                     l946:
  1497     0635  01C7               	clrf	___lldiv@counter
  1498     0636  0AC7               	incf	___lldiv@counter,f
  1499     0637  2E45               	goto	l952
  1500     0638                     l948:
  1501     0638  3001               	movlw	1
  1502     0639  00FD               	movwf	??___lldiv
  1503     063A                     u445:
  1504     063A  1003               	clrc
  1505     063B  0DBB               	rlf	___lldiv@divisor,f
  1506     063C  0DBC               	rlf	___lldiv@divisor+1,f
  1507     063D  0DBD               	rlf	___lldiv@divisor+2,f
  1508     063E  0DBE               	rlf	___lldiv@divisor+3,f
  1509     063F  0BFD               	decfsz	??___lldiv,f
  1510     0640  2E3A               	goto	u445
  1511     0641                     l950:
  1512     0641  3001               	movlw	1
  1513     0642  00FF               	movwf	btemp+1
  1514     0643  087F               	movf	btemp+1,w
  1515     0644  07C7               	addwf	___lldiv@counter,f
  1516     0645                     l952:
  1517     0645  1FBE               	btfss	___lldiv@divisor+3,7
  1518     0646  2E48               	goto	u451
  1519     0647  2E49               	goto	u450
  1520     0648                     u451:
  1521     0648  2E38               	goto	l948
  1522     0649                     u450:
  1523     0649                     l954:
  1524     0649  3001               	movlw	1
  1525     064A  00FD               	movwf	??___lldiv
  1526     064B                     u465:
  1527     064B  1003               	clrc
  1528     064C  0DC3               	rlf	___lldiv@quotient,f
  1529     064D  0DC4               	rlf	___lldiv@quotient+1,f
  1530     064E  0DC5               	rlf	___lldiv@quotient+2,f
  1531     064F  0DC6               	rlf	___lldiv@quotient+3,f
  1532     0650  0BFD               	decfsz	??___lldiv,f
  1533     0651  2E4B               	goto	u465
  1534     0652                     l956:
  1535     0652  083E               	movf	___lldiv@divisor+3,w
  1536     0653  0242               	subwf	___lldiv@dividend+3,w
  1537     0654  1D03               	skipz
  1538     0655  2E60               	goto	u475
  1539     0656  083D               	movf	___lldiv@divisor+2,w
  1540     0657  0241               	subwf	___lldiv@dividend+2,w
  1541     0658  1D03               	skipz
  1542     0659  2E60               	goto	u475
  1543     065A  083C               	movf	___lldiv@divisor+1,w
  1544     065B  0240               	subwf	___lldiv@dividend+1,w
  1545     065C  1D03               	skipz
  1546     065D  2E60               	goto	u475
  1547     065E  083B               	movf	___lldiv@divisor,w
  1548     065F  023F               	subwf	___lldiv@dividend,w
  1549     0660                     u475:
  1550     0660  1C03               	skipc
  1551     0661  2E63               	goto	u471
  1552     0662  2E64               	goto	u470
  1553     0663                     u471:
  1554     0663  2E73               	goto	l962
  1555     0664                     u470:
  1556     0664                     l958:
  1557     0664  083B               	movf	___lldiv@divisor,w
  1558     0665  02BF               	subwf	___lldiv@dividend,f
  1559     0666  083C               	movf	___lldiv@divisor+1,w
  1560     0667  1C03               	skipc
  1561     0668  0F3C               	incfsz	___lldiv@divisor+1,w
  1562     0669  02C0               	subwf	___lldiv@dividend+1,f
  1563     066A  083D               	movf	___lldiv@divisor+2,w
  1564     066B  1C03               	skipc
  1565     066C  0F3D               	incfsz	___lldiv@divisor+2,w
  1566     066D  02C1               	subwf	___lldiv@dividend+2,f
  1567     066E  083E               	movf	___lldiv@divisor+3,w
  1568     066F  1C03               	skipc
  1569     0670  0F3E               	incfsz	___lldiv@divisor+3,w
  1570     0671  02C2               	subwf	___lldiv@dividend+3,f
  1571     0672                     l960:
  1572     0672  1443               	bsf	___lldiv@quotient,0
  1573     0673                     l962:
  1574     0673  3001               	movlw	1
  1575     0674                     u485:
  1576     0674  1003               	clrc
  1577     0675  0CBE               	rrf	___lldiv@divisor+3,f
  1578     0676  0CBD               	rrf	___lldiv@divisor+2,f
  1579     0677  0CBC               	rrf	___lldiv@divisor+1,f
  1580     0678  0CBB               	rrf	___lldiv@divisor,f
  1581     0679  3EFF               	addlw	-1
  1582     067A  1D03               	skipz
  1583     067B  2E74               	goto	u485
  1584     067C                     l964:
  1585     067C  3001               	movlw	1
  1586     067D  02C7               	subwf	___lldiv@counter,f
  1587     067E  1D03               	btfss	3,2
  1588     067F  2E81               	goto	u491
  1589     0680  2E82               	goto	u490
  1590     0681                     u491:
  1591     0681  2E49               	goto	l954
  1592     0682                     u490:
  1593     0682                     l966:
  1594     0682  0846               	movf	___lldiv@quotient+3,w
  1595     0683  00BE               	movwf	?___lldiv+3
  1596     0684  0845               	movf	___lldiv@quotient+2,w
  1597     0685  00BD               	movwf	?___lldiv+2
  1598     0686  0844               	movf	___lldiv@quotient+1,w
  1599     0687  00BC               	movwf	?___lldiv+1
  1600     0688  0843               	movf	___lldiv@quotient,w
  1601     0689  00BB               	movwf	?___lldiv
  1602     068A                     l202:
  1603     068A  0008               	return
  1604     068B                     __end_of___lldiv:
  1605     007E                     btemp	set	126	;btemp
  1606     007E                     wtemp0	set	126
  1607                           
  1608                           	psect	config
  1609                           
  1610                           ;Config register CONFIG @ 0x2007
  1611                           ;	Oscillator Selection bits
  1612                           ;	FOSC = EXTRC, RC oscillator
  1613                           ;	Watchdog Timer Enable bit
  1614                           ;	WDTE = OFF, WDT disabled
  1615                           ;	Power-up Timer Enable bit
  1616                           ;	PWRTE = OFF, PWRT disabled
  1617                           ;	Brown-out Reset Enable bit
  1618                           ;	BOREN = OFF, BOR disabled
  1619                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1620                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1621                           ;	Data EEPROM Memory Code Protection bit
  1622                           ;	CPD = OFF, Data EEPROM code protection off
  1623                           ;	Flash Program Memory Write Enable bits
  1624                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1625                           ;	In-Circuit Debugger Mode bit
  1626                           ;	DEBUG = 0x1, unprogrammed default
  1627                           ;	Flash Program Memory Code Protection bit
  1628                           ;	CP = OFF, Code protection off
  1629     2007                     	org	8199
  1630     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     15      42
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___lldiv
    _output->___bmul
    _data->_delay
    ___bmul->___lwdiv
    _init->_cmd
    _cmd->_delay
    ___lldiv->___lmul

Critical Paths under _main in BANK0

    _main->___lldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5266
                                             13 BANK0      2     2      0
                            ___lldiv
                             ___lmul
                                _cmd
                              _delay
                               _init
                             _output
 ---------------------------------------------------------------------------------
 (1) _output                                               2     0      2    1536
                                             10 COMMON     2     0      2
                             ___bmul
                            ___lwdiv
                               _data
 ---------------------------------------------------------------------------------
 (2) _data                                                 1     1      0     804
                                              2 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     466
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     168
                                              7 COMMON     3     2      1
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    1586
                                _cmd
                              _delay
 ---------------------------------------------------------------------------------
 (2) _cmd                                                  1     1      0     804
                                              2 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                2     0      2     782
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             14     6      8     314
                                             13 COMMON     1     1      0
                                              0 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lldiv
     ___lmul (ARG)
   ___lmul
   _cmd
     _delay
   _delay
   _init
     _cmd
     _delay
   _output
     ___bmul
       ___lwdiv (ARG)
     ___lwdiv
     _data
       _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      38       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      F      2A       5       52.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      38      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Wed Jan 24 20:05:18 2024

                      _j 003A                        _k 0020                        _m 0032  
                      _n 0039                        _s 0038           ___bmul@product 0078  
                     l60 0771                       l52 077C                       l71 0598  
                     l80 0556                       l74 0580                       l67 06EA  
                     l68 06F9                       fsr 0004                      l202 068A  
                    l180 0622                      l192 056B                      l446 05DC  
                    l810 0582                      l812 0588                      l900 0759  
                    l820 056D                      l806 054A                      l814 058A  
                    l902 0762                      l830 0558                      l822 0570  
                    l910 0694                      l808 054A                      l816 058B  
                    l904 0768                      l840 0565                      l832 0559  
                    l824 0572                      l920 06D0                      l912 06AD  
                    l930 05DD                      l818 058F                      l842 056A  
                    l834 055D                      l850 05A1                      l826 0573  
                    l922 06D5                      l914 06B3                      l906 068B  
                    l940 061A                      l932 05E5                      l836 0561  
                    l860 05C4                      l852 05A4                      l828 0577  
                    l924 06D7                      l916 06C6                      l908 0691  
                    l950 0641                      l934 05E9                      l838 0563  
                    l862 05CA                      l854 05AB                      l846 0599  
                    l926 06DC                      l918 06CA                      l960 0672  
                    l952 0645                      l944 0623                      l936 0600  
                    l880 070E                      l872 06FA                      l864 05CB  
                    l856 05AF                      l848 059B                      l928 06E4  
                    l962 0673                      l954 0649                      l946 0635  
                    l938 0609                      l890 0735                      l882 0717  
                    l874 06FE                      l866 05D2                      l858 05B3  
                    l970 0772                      l964 067C                      l956 0652  
                    l948 0638                      l892 073B                      l884 071D  
                    l876 06FF                      l868 05D8                      l980 079F  
                    l972 0777                      l958 0664                      l966 0682  
                    l894 0744                      l886 0726                      l878 0708  
                    l982 07D5                      l974 077B                      l896 074A  
                    l888 072C                      l984 07DB                      l976 0780  
                    l898 0753                      l986 07E6                      l978 0792  
                    u310 05B3                      u311 05B2                      u305 05A5  
                    u330 05C4                      u331 05C3                      u420 061A  
                    u260 0556                      u500 0780                      u421 0619  
                    u405 0602                      u261 0555                      u325 05B4  
                    u501 077F                      u430 0635                      u270 055D  
                    u350 05D8                      u431 0634                      u415 060A  
                    u271 055C                      u351 05D7                      u335 05C0  
                    u280 056A                      u360 06D0                      u281 0569  
                    u345 05CC                      u361 06CF                      u450 0649  
                    u290 05A1                      u370 06DC                      u451 0648  
                    u291 05A0                      u371 06DB                      u380 05E9  
                    u445 063A                      u381 05E8                      u470 0664  
                    u471 0663                      u391 05F2                      u392 05F9  
                    u465 064B                      u393 0600                      u490 0682  
                    u491 0681                      u475 0660                      u485 0674  
                    _cmd 0581                      _val 002E                      fsr0 0004  
                    indf 0000                     ?_cmd 0070                     _data 056C  
                   cmd@i 0072                     _main 0772                     _init 06FA  
                   btemp 007E                     start 0000        ___bmul@multiplier 0079  
                  ??_cmd 0072                    ?_data 0070                    ?_main 0070  
                  ?_init 0070          __end_of___lldiv 068B          __end_of___lwdiv 05DD  
                  _PORTC 0007                    _PORTD 0008                    _TRISA 0085  
                  _TRISC 0087                    _TRISD 0088      ___lmul@multiplicand 0074  
                  _delay 054A                    data@i 0072                    _hival 0036  
                  _loval 0034                    status 0003                    wtemp0 007E  
        __initialization 07F3             __end_of_data 0581             __end_of_main 07F3  
           __end_of_init 0772                   ??_data 0072                   ??_main 0048  
                 ??_init 0073                   ?_delay 0070                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
                 ___bmul 0557                   ___lmul 05DD                ??___lldiv 007D  
              ??___lwdiv 0074                   delay@x 0070                   _output 068B  
__end_of__initialization 07FC      ___bmul@multiplicand 0077           __pcstackCOMMON 0070  
          __end_of_delay 0557                  ??_delay 0072               __pbssBANK0 0020  
             __pmaintext 0772                  ?___bmul 0077                  ?___lmul 0070  
         ___lmul@product 0079                  ?_output 007A                  ___lldiv 0623  
                ___lwdiv 0599                  __ptext1 068B                  __ptext2 056C  
                __ptext3 0599                  __ptext4 0557                  __ptext5 06FA  
                __ptext6 0581                  __ptext7 054A                  __ptext8 05DD  
                __ptext9 0623                  clrloop0 0543                  _voltage 002A  
   end_of_initialization 07FC          ___lldiv@divisor 003B          ___lldiv@counter 0047  
                output@i 007A           __end_of___bmul 056C           __end_of___lmul 0623  
         __end_of_output 06FA      start_initialization 07F3              __end_of_cmd 0599  
               ??___bmul 0078                 ??___lmul 0078                 ??_output 007C  
              ___latbits 0002            __pcstackBANK0 003B         ___lwdiv@dividend 0072  
               ?___lldiv 003B                 ?___lwdiv 0070         ___lwdiv@quotient 0074  
              clear_ram0 0542        ___lmul@multiplier 0070          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0076         ___lldiv@dividend 003F         ___lldiv@quotient 0043  
