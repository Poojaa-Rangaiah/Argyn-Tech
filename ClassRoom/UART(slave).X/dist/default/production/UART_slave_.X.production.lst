

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue Feb 06 12:50:06 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    10                           	dabs	1,0x7E,2
    11     0000                     
    12                           ; Generated 22/03/2023 GMT
    13                           ; 
    14                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    15                           ; All rights reserved.
    16                           ; 
    17                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    18                           ; 
    19                           ; Redistribution and use in source and binary forms, with or without modification, are
    20                           ; permitted provided that the following conditions are met:
    21                           ; 
    22                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    23                           ;        conditions and the following disclaimer.
    24                           ; 
    25                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    26                           ;        of conditions and the following disclaimer in the documentation and/or other
    27                           ;        materials provided with the distribution. Publication is not required when
    28                           ;        this file is used in an embedded application.
    29                           ; 
    30                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    31                           ;        software without specific prior written permission.
    32                           ; 
    33                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    34                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    35                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    36                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    37                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    38                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    39                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    40                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    41                           ; 
    42                           ; 
    43                           ; Code-generator required, PIC16F877A Definitions
    44                           ; 
    45                           ; SFR Addresses
    46     0000                     	;# 
    47     0001                     	;# 
    48     0002                     	;# 
    49     0003                     	;# 
    50     0004                     	;# 
    51     0005                     	;# 
    52     0006                     	;# 
    53     0007                     	;# 
    54     0008                     	;# 
    55     0009                     	;# 
    56     000A                     	;# 
    57     000B                     	;# 
    58     000C                     	;# 
    59     000D                     	;# 
    60     000E                     	;# 
    61     000E                     	;# 
    62     000F                     	;# 
    63     0010                     	;# 
    64     0011                     	;# 
    65     0012                     	;# 
    66     0013                     	;# 
    67     0014                     	;# 
    68     0015                     	;# 
    69     0015                     	;# 
    70     0016                     	;# 
    71     0017                     	;# 
    72     0018                     	;# 
    73     0019                     	;# 
    74     001A                     	;# 
    75     001B                     	;# 
    76     001B                     	;# 
    77     001C                     	;# 
    78     001D                     	;# 
    79     001E                     	;# 
    80     001F                     	;# 
    81     0081                     	;# 
    82     0085                     	;# 
    83     0086                     	;# 
    84     0087                     	;# 
    85     0088                     	;# 
    86     0089                     	;# 
    87     008C                     	;# 
    88     008D                     	;# 
    89     008E                     	;# 
    90     0091                     	;# 
    91     0092                     	;# 
    92     0093                     	;# 
    93     0094                     	;# 
    94     0098                     	;# 
    95     0099                     	;# 
    96     009C                     	;# 
    97     009D                     	;# 
    98     009E                     	;# 
    99     009F                     	;# 
   100     010C                     	;# 
   101     010D                     	;# 
   102     010E                     	;# 
   103     010F                     	;# 
   104     018C                     	;# 
   105     018D                     	;# 
   106     0000                     	;# 
   107     0001                     	;# 
   108     0002                     	;# 
   109     0003                     	;# 
   110     0004                     	;# 
   111     0005                     	;# 
   112     0006                     	;# 
   113     0007                     	;# 
   114     0008                     	;# 
   115     0009                     	;# 
   116     000A                     	;# 
   117     000B                     	;# 
   118     000C                     	;# 
   119     000D                     	;# 
   120     000E                     	;# 
   121     000E                     	;# 
   122     000F                     	;# 
   123     0010                     	;# 
   124     0011                     	;# 
   125     0012                     	;# 
   126     0013                     	;# 
   127     0014                     	;# 
   128     0015                     	;# 
   129     0015                     	;# 
   130     0016                     	;# 
   131     0017                     	;# 
   132     0018                     	;# 
   133     0019                     	;# 
   134     001A                     	;# 
   135     001B                     	;# 
   136     001B                     	;# 
   137     001C                     	;# 
   138     001D                     	;# 
   139     001E                     	;# 
   140     001F                     	;# 
   141     0081                     	;# 
   142     0085                     	;# 
   143     0086                     	;# 
   144     0087                     	;# 
   145     0088                     	;# 
   146     0089                     	;# 
   147     008C                     	;# 
   148     008D                     	;# 
   149     008E                     	;# 
   150     0091                     	;# 
   151     0092                     	;# 
   152     0093                     	;# 
   153     0094                     	;# 
   154     0098                     	;# 
   155     0099                     	;# 
   156     009C                     	;# 
   157     009D                     	;# 
   158     009E                     	;# 
   159     009F                     	;# 
   160     010C                     	;# 
   161     010D                     	;# 
   162     010E                     	;# 
   163     010F                     	;# 
   164     018C                     	;# 
   165     018D                     	;# 
   166     0018                     _RCSTA	set	24
   167     0008                     _PORTD	set	8
   168     001A                     _RCREG	set	26
   169     0099                     _SPBRG	set	153
   170     0098                     _TXSTA	set	152
   171     0088                     _TRISD	set	136
   172     0087                     _TRISC	set	135
   173     0465                     _RCIE	set	1125
   174                           
   175                           	psect	cinit
   176     07FA                     start_initialization:	
   177                           ; #config settings
   178                           
   179     07FA                     __initialization:
   180                           
   181                           ; Clear objects allocated to COMMON
   182     07FA  01F0               	clrf	__pbssCOMMON& (0+127)
   183     07FB  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   184     07FC                     end_of_initialization:	
   185                           ;End of C runtime variable initialization code
   186                           
   187     07FC                     __end_of__initialization:
   188     07FC  0183               	clrf	3
   189     07FD  120A  118A  2FC4   	ljmp	_main	;jump to C main() function
   190                           
   191                           	psect	bssCOMMON
   192     0070                     __pbssCOMMON:
   193     0070                     _val:
   194     0070                     	ds	2
   195                           
   196                           	psect	cstackCOMMON
   197     0072                     __pcstackCOMMON:
   198     0072                     ?_init:
   199     0072                     ??_init:	
   200                           ; 1 bytes @ 0x0
   201                           
   202     0072                     ?_main:	
   203                           ; 1 bytes @ 0x0
   204                           
   205     0072                     ??_main:	
   206                           ; 1 bytes @ 0x0
   207                           
   208                           
   209                           ; 1 bytes @ 0x0
   210     0072                     	ds	2
   211                           
   212                           	psect	maintext
   213     07C4                     __pmaintext:	
   214 ;;
   215 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   216 ;;
   217 ;; *************** function _main *****************
   218 ;; Defined at:
   219 ;;		line 15 in file "slave.c"
   220 ;; Parameters:    Size  Location     Type
   221 ;;		None
   222 ;; Auto vars:     Size  Location     Type
   223 ;;		None
   224 ;; Return value:  Size  Location     Type
   225 ;;                  1    wreg      void 
   226 ;; Registers used:
   227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   228 ;; Tracked objects:
   229 ;;		On entry : B00/0
   230 ;;		On exit  : 0/0
   231 ;;		Unchanged: 0/0
   232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   233 ;;      Params:         0       0       0       0       0
   234 ;;      Locals:         0       0       0       0       0
   235 ;;      Temps:          2       0       0       0       0
   236 ;;      Totals:         2       0       0       0       0
   237 ;;Total ram usage:        2 bytes
   238 ;; Hardware stack levels required when called: 1
   239 ;; This function calls:
   240 ;;		_init
   241 ;; This function is called by:
   242 ;;		Startup code after reset
   243 ;; This function uses a non-reentrant model
   244 ;;
   245                           
   246     07C4                     _main:	
   247                           ;psect for function _main
   248                           
   249     07C4                     l588:	
   250                           ;incstack = 0
   251                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   252                           
   253                           
   254                           ;slave.c: 16:     init();
   255     07C4  120A  118A  27AF  120A  118A  	fcall	_init
   256     07C9                     l590:
   257                           
   258                           ;slave.c: 18:         if(RCIE) {
   259     07C9  1683               	bsf	3,5	;RP0=1, select bank1
   260     07CA  1303               	bcf	3,6	;RP1=0, select bank1
   261     07CB  1E8C               	btfss	12,5	;volatile
   262     07CC  2FCE               	goto	u11
   263     07CD  2FCF               	goto	u10
   264     07CE                     u11:
   265     07CE  2FC9               	goto	l590
   266     07CF                     u10:
   267     07CF                     l592:
   268                           
   269                           ;slave.c: 19:             val = RCREG;
   270     07CF  1283               	bcf	3,5	;RP0=0, select bank0
   271     07D0  1303               	bcf	3,6	;RP1=0, select bank0
   272     07D1  081A               	movf	26,w	;volatile
   273     07D2  00F2               	movwf	??_main
   274     07D3  01F3               	clrf	??_main+1
   275     07D4  0872               	movf	??_main,w
   276     07D5  00F0               	movwf	_val
   277     07D6  0873               	movf	??_main+1,w
   278     07D7  00F1               	movwf	_val+1
   279                           
   280                           ;slave.c: 20:             switch(val) {
   281     07D8  2FE4               	goto	l604
   282     07D9                     l594:
   283                           
   284                           ;slave.c: 22:                     PORTD = 0x40;;
   285     07D9  3040               	movlw	64
   286     07DA  0088               	movwf	8	;volatile
   287                           
   288                           ;slave.c: 23:                     break;
   289     07DB  2FC9               	goto	l590
   290     07DC                     l596:
   291                           
   292                           ;slave.c: 25:                     PORTD = 0x10;
   293     07DC  3010               	movlw	16
   294     07DD  0088               	movwf	8	;volatile
   295                           
   296                           ;slave.c: 26:                     break;
   297     07DE  2FC9               	goto	l590
   298     07DF                     l598:
   299                           
   300                           ;slave.c: 28:                     PORTD = 0x00;
   301     07DF  0188               	clrf	8	;volatile
   302                           
   303                           ;slave.c: 29:                     break;
   304     07E0  2FC9               	goto	l590
   305     07E1                     l600:
   306                           
   307                           ;slave.c: 31:                     PORTD = 0X50;
   308     07E1  3050               	movlw	80
   309     07E2  0088               	movwf	8	;volatile
   310                           
   311                           ;slave.c: 32:                     break;
   312     07E3  2FC9               	goto	l590
   313     07E4                     l604:
   314                           
   315                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   316                           ; Switch size 1, requested type "simple"
   317                           ; Number of cases is 1, Range of values is 0 to 0
   318                           ; switch strategies available:
   319                           ; Name         Instructions Cycles
   320                           ; simple_byte            4     3 (average)
   321                           ; direct_byte           11     8 (fixed)
   322                           ; jumptable            260     6 (fixed)
   323                           ;	Chosen strategy is simple_byte
   324     07E4  0871               	movf	_val+1,w
   325     07E5  3A00               	xorlw	0	; case 0
   326     07E6  1903               	skipnz
   327     07E7  2FE9               	goto	l630
   328     07E8  2FC9               	goto	l590
   329     07E9                     l630:
   330                           
   331                           ; Switch size 1, requested type "simple"
   332                           ; Number of cases is 4, Range of values is 65 to 68
   333                           ; switch strategies available:
   334                           ; Name         Instructions Cycles
   335                           ; simple_byte           13     7 (average)
   336                           ; direct_byte           23    11 (fixed)
   337                           ; jumptable            263     9 (fixed)
   338                           ;	Chosen strategy is simple_byte
   339     07E9  0870               	movf	_val,w
   340     07EA  3A41               	xorlw	65	; case 65
   341     07EB  1903               	skipnz
   342     07EC  2FD9               	goto	l594
   343     07ED  3A03               	xorlw	3	; case 66
   344     07EE  1903               	skipnz
   345     07EF  2FDC               	goto	l596
   346     07F0  3A01               	xorlw	1	; case 67
   347     07F1  1903               	skipnz
   348     07F2  2FDF               	goto	l598
   349     07F3  3A07               	xorlw	7	; case 68
   350     07F4  1903               	skipnz
   351     07F5  2FE1               	goto	l600
   352     07F6  2FC9               	goto	l590
   353     07F7  120A  118A  2800   	ljmp	start
   354     07FA                     __end_of_main:
   355                           
   356                           	psect	text1
   357     07AF                     __ptext1:	
   358 ;; *************** function _init *****************
   359 ;; Defined at:
   360 ;;		line 37 in file "slave.c"
   361 ;; Parameters:    Size  Location     Type
   362 ;;		None
   363 ;; Auto vars:     Size  Location     Type
   364 ;;		None
   365 ;; Return value:  Size  Location     Type
   366 ;;                  1    wreg      void 
   367 ;; Registers used:
   368 ;;		wreg, status,2
   369 ;; Tracked objects:
   370 ;;		On entry : 0/0
   371 ;;		On exit  : 0/0
   372 ;;		Unchanged: 0/0
   373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   374 ;;      Params:         0       0       0       0       0
   375 ;;      Locals:         0       0       0       0       0
   376 ;;      Temps:          0       0       0       0       0
   377 ;;      Totals:         0       0       0       0       0
   378 ;;Total ram usage:        0 bytes
   379 ;; Hardware stack levels used: 1
   380 ;; This function calls:
   381 ;;		Nothing
   382 ;; This function is called by:
   383 ;;		_main
   384 ;; This function uses a non-reentrant model
   385 ;;
   386                           
   387     07AF                     _init:	
   388                           ;psect for function _init
   389                           
   390     07AF                     l582:	
   391                           ;incstack = 0
   392                           ; Regs used in _init: [wreg+status,2]
   393                           
   394                           
   395                           ;slave.c: 38:     TRISC = 0xC0;
   396     07AF  30C0               	movlw	192
   397     07B0  1683               	bsf	3,5	;RP0=1, select bank1
   398     07B1  1303               	bcf	3,6	;RP1=0, select bank1
   399     07B2  0087               	movwf	7	;volatile
   400     07B3                     l584:
   401                           
   402                           ;slave.c: 39:     TRISD = 0x00;
   403     07B3  0188               	clrf	8	;volatile
   404     07B4                     l586:
   405                           
   406                           ;slave.c: 40:     PORTD = 0x00;
   407     07B4  1283               	bcf	3,5	;RP0=0, select bank0
   408     07B5  1303               	bcf	3,6	;RP1=0, select bank0
   409     07B6  0188               	clrf	8	;volatile
   410                           
   411                           ;slave.c: 41:     TXSTA = 0x24;
   412     07B7  3024               	movlw	36
   413     07B8  1683               	bsf	3,5	;RP0=1, select bank1
   414     07B9  1303               	bcf	3,6	;RP1=0, select bank1
   415     07BA  0098               	movwf	24	;volatile
   416                           
   417                           ;slave.c: 42:     RCSTA = 0x90;
   418     07BB  3090               	movlw	144
   419     07BC  1283               	bcf	3,5	;RP0=0, select bank0
   420     07BD  1303               	bcf	3,6	;RP1=0, select bank0
   421     07BE  0098               	movwf	24	;volatile
   422                           
   423                           ;slave.c: 43:     SPBRG = 0x38;
   424     07BF  3038               	movlw	56
   425     07C0  1683               	bsf	3,5	;RP0=1, select bank1
   426     07C1  1303               	bcf	3,6	;RP1=0, select bank1
   427     07C2  0099               	movwf	25	;volatile
   428     07C3                     l38:
   429     07C3  0008               	return
   430     07C4                     __end_of_init:
   431     007E                     btemp	set	126	;btemp
   432     007E                     wtemp0	set	126
   433                           
   434                           	psect	config
   435                           
   436                           ;Config register CONFIG @ 0x2007
   437                           ;	Oscillator Selection bits
   438                           ;	FOSC = EXTRC, RC oscillator
   439                           ;	Watchdog Timer Enable bit
   440                           ;	WDTE = OFF, WDT disabled
   441                           ;	Power-up Timer Enable bit
   442                           ;	PWRTE = OFF, PWRT disabled
   443                           ;	Brown-out Reset Enable bit
   444                           ;	BOREN = OFF, BOR disabled
   445                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   446                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   447                           ;	Data EEPROM Memory Code Protection bit
   448                           ;	CPD = OFF, Data EEPROM code protection off
   449                           ;	Flash Program Memory Write Enable bits
   450                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   451                           ;	In-Circuit Debugger Mode bit
   452                           ;	DEBUG = 0x1, unprogrammed default
   453                           ;	Flash Program Memory Code Protection bit
   454                           ;	CP = OFF, Code protection off
   455     2007                     	org	8199
   456     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      2       4
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       0
                                              0 COMMON     2     2      0
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      2       4       1       28.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       4       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       4      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue Feb 06 12:50:06 2024

                     l38 07C3                       u10 07CF                       u11 07CE  
                    l600 07E1                      l604 07E4                      l630 07E9  
                    l582 07AF                      l590 07C9                      l584 07B3  
                    l592 07CF                      l586 07B4                      l594 07D9  
                    l596 07DC                      l588 07C4                      l598 07DF  
                    _val 0070                     _RCIE 0465                     _main 07C4  
                   _init 07AF                     btemp 007E                     start 0000  
                  ?_main 0072                    ?_init 0072                    _RCREG 001A  
                  _RCSTA 0018                    _SPBRG 0099                    _PORTD 0008  
                  _TRISC 0087                    _TRISD 0088                    _TXSTA 0098  
                  status 0003                    wtemp0 007E          __initialization 07FA  
           __end_of_main 07FA             __end_of_init 07C4                   ??_main 0072  
                 ??_init 0072  __end_of__initialization 07FC           __pcstackCOMMON 0072  
             __pmaintext 07C4                  __ptext1 07AF     end_of_initialization 07FC  
    start_initialization 07FA              __pbssCOMMON 0070                ___latbits 0002  
