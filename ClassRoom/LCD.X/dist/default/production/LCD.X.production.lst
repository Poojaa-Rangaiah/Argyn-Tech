

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Mon Dec 25 00:54:17 2023

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 22/03/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     0008                     	;# 
    60     0009                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     000E                     	;# 
    66     000E                     	;# 
    67     000F                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001B                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     0087                     	;# 
    90     0088                     	;# 
    91     0089                     	;# 
    92     008C                     	;# 
    93     008D                     	;# 
    94     008E                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0098                     	;# 
   100     0099                     	;# 
   101     009C                     	;# 
   102     009D                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     010F                     	;# 
   109     018C                     	;# 
   110     018D                     	;# 
   111     0000                     	;# 
   112     0001                     	;# 
   113     0002                     	;# 
   114     0003                     	;# 
   115     0004                     	;# 
   116     0005                     	;# 
   117     0006                     	;# 
   118     0007                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     000C                     	;# 
   124     000D                     	;# 
   125     000E                     	;# 
   126     000E                     	;# 
   127     000F                     	;# 
   128     0010                     	;# 
   129     0011                     	;# 
   130     0012                     	;# 
   131     0013                     	;# 
   132     0014                     	;# 
   133     0015                     	;# 
   134     0015                     	;# 
   135     0016                     	;# 
   136     0017                     	;# 
   137     0018                     	;# 
   138     0019                     	;# 
   139     001A                     	;# 
   140     001B                     	;# 
   141     001B                     	;# 
   142     001C                     	;# 
   143     001D                     	;# 
   144     001E                     	;# 
   145     001F                     	;# 
   146     0081                     	;# 
   147     0085                     	;# 
   148     0086                     	;# 
   149     0087                     	;# 
   150     0088                     	;# 
   151     0089                     	;# 
   152     008C                     	;# 
   153     008D                     	;# 
   154     008E                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0094                     	;# 
   159     0098                     	;# 
   160     0099                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009E                     	;# 
   164     009F                     	;# 
   165     010C                     	;# 
   166     010D                     	;# 
   167     010E                     	;# 
   168     010F                     	;# 
   169     018C                     	;# 
   170     018D                     	;# 
   171                           
   172                           	psect	idataBANK0
   173     070F                     __pidataBANK0:
   174                           
   175                           ;initializer for _arr
   176     070F  3448               	retlw	72
   177     0710  3465               	retlw	101
   178     0711  346C               	retlw	108
   179     0712  346C               	retlw	108
   180     0713  346F               	retlw	111
   181     0714  3420               	retlw	32
   182     0715  3457               	retlw	87
   183     0716  346F               	retlw	111
   184     0717  3472               	retlw	114
   185     0718  346C               	retlw	108
   186     0719  3464               	retlw	100
   187     071A  3400               	retlw	0
   188     0008                     _PORTD	set	8
   189     0038                     _RC0	set	56
   190     003B                     _RC3	set	59
   191     0088                     _TRISD	set	136
   192     0087                     _TRISC	set	135
   193                           
   194                           	psect	cinit
   195     07ED                     start_initialization:	
   196                           ; #config settings
   197                           
   198     07ED                     __initialization:
   199                           
   200                           ; Initialize objects allocated to BANK0
   201     07ED  1383               	bcf	3,7	;select IRP bank0
   202     07EE  302C               	movlw	low (__pdataBANK0+12)
   203     07EF  00FD               	movwf	btemp+-1
   204     07F0  3007               	movlw	high __pidataBANK0
   205     07F1  00FE               	movwf	btemp
   206     07F2  300F               	movlw	low __pidataBANK0
   207     07F3  00FF               	movwf	btemp+1
   208     07F4  3020               	movlw	low __pdataBANK0
   209     07F5  0084               	movwf	4
   210     07F6  120A  118A  2745  120A  118A  	fcall	init_ram0
   211                           
   212                           ; Clear objects allocated to COMMON
   213     07FB  01F5               	clrf	__pbssCOMMON& (0+127)
   214     07FC                     end_of_initialization:	
   215                           ;End of C runtime variable initialization code
   216                           
   217     07FC                     __end_of__initialization:
   218     07FC  0183               	clrf	3
   219     07FD  120A  118A  2F54   	ljmp	_main	;jump to C main() function
   220                           
   221                           	psect	bssCOMMON
   222     0075                     __pbssCOMMON:
   223     0075                     _i:
   224     0075                     	ds	1
   225                           
   226                           	psect	dataBANK0
   227     0020                     __pdataBANK0:
   228     0020                     _arr:
   229     0020                     	ds	12
   230                           
   231                           	psect	inittext
   232     0741                     init_fetch0:	
   233                           ;	Called with low address in FSR and high address in W
   234                           
   235     0741  087E               	movf	btemp,w
   236     0742  008A               	movwf	10
   237     0743  087F               	movf	btemp+1,w
   238     0744  0082               	movwf	2
   239     0745                     init_ram0:	
   240                           ;Called with:
   241                           ;	high address of idata address in btemp 
   242                           ;	low address of idata address in btemp+1 
   243                           ;	low address of data in FSR
   244                           ;	high address + 1 of data in btemp-1
   245                           
   246     0745  120A  118A  2741  120A  118A  	fcall	init_fetch0
   247     074A  0080               	movwf	0
   248     074B  0A84               	incf	4,f
   249     074C  0804               	movf	4,w
   250     074D  067D               	xorwf	btemp+-1,w
   251     074E  1903               	btfsc	3,2
   252     074F  3400               	retlw	0
   253     0750  0AFF               	incf	btemp+1,f
   254     0751  1903               	btfsc	3,2
   255     0752  0AFE               	incf	btemp,f
   256     0753  2F45               	goto	init_ram0
   257                           
   258                           	psect	cstackCOMMON
   259     0070                     __pcstackCOMMON:
   260     0070                     ?_init:
   261     0070                     ?_LCD_Command:	
   262                           ; 1 bytes @ 0x0
   263                           
   264     0070                     ??_LCD_Command:	
   265                           ; 1 bytes @ 0x0
   266                           
   267     0070                     ?_LCD_Data:	
   268                           ; 1 bytes @ 0x0
   269                           
   270     0070                     ??_LCD_Data:	
   271                           ; 1 bytes @ 0x0
   272                           
   273     0070                     ?_main:	
   274                           ; 1 bytes @ 0x0
   275                           
   276                           
   277                           ; 1 bytes @ 0x0
   278     0070                     	ds	2
   279     0072                     LCD_Command@n:
   280     0072                     LCD_Data@n:	
   281                           ; 1 bytes @ 0x2
   282                           
   283                           
   284                           ; 1 bytes @ 0x2
   285     0072                     	ds	1
   286     0073                     ??_init:
   287                           
   288                           ; 1 bytes @ 0x3
   289     0073                     	ds	2
   290     0075                     ??_main:
   291                           
   292                           	psect	maintext
   293     0754                     __pmaintext:	
   294                           ; 1 bytes @ 0x5
   295 ;;
   296 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   297 ;;
   298 ;; *************** function _main *****************
   299 ;; Defined at:
   300 ;;		line 26 in file "LCD_Class.c"
   301 ;; Parameters:    Size  Location     Type
   302 ;;		None
   303 ;; Auto vars:     Size  Location     Type
   304 ;;		None
   305 ;; Return value:  Size  Location     Type
   306 ;;                  1    wreg      void 
   307 ;; Registers used:
   308 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   309 ;; Tracked objects:
   310 ;;		On entry : B00/0
   311 ;;		On exit  : 0/0
   312 ;;		Unchanged: 0/0
   313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   314 ;;      Params:         0       0       0       0       0
   315 ;;      Locals:         0       0       0       0       0
   316 ;;      Temps:          0       0       0       0       0
   317 ;;      Totals:         0       0       0       0       0
   318 ;;Total ram usage:        0 bytes
   319 ;; Hardware stack levels required when called: 2
   320 ;; This function calls:
   321 ;;		_LCD_Command
   322 ;;		_LCD_Data
   323 ;;		_init
   324 ;; This function is called by:
   325 ;;		Startup code after reset
   326 ;; This function uses a non-reentrant model
   327 ;;
   328                           
   329     0754                     _main:	
   330                           ;psect for function _main
   331                           
   332     0754                     l699:	
   333                           ;incstack = 0
   334                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   335                           
   336                           
   337                           ;LCD_Class.c: 27:     init();
   338     0754  120A  118A  2778  120A  118A  	fcall	_init
   339                           
   340                           ;LCD_Class.c: 28:     LCD_Command(0x80);
   341     0759  3080               	movlw	128
   342     075A  120A  118A  272E  120A  118A  	fcall	_LCD_Command
   343     075F                     l701:
   344                           
   345                           ;LCD_Class.c: 29:     for(i=0; i<=10; i++) {
   346     075F  01F5               	clrf	_i
   347     0760                     l707:
   348                           
   349                           ;LCD_Class.c: 30:         LCD_Data(arr[i]);
   350     0760  0875               	movf	_i,w
   351     0761  3E20               	addlw	(low (_arr| 0))& (0+255)
   352     0762  0084               	movwf	4
   353     0763  1383               	bcf	3,7	;select IRP bank0
   354     0764  0800               	movf	0,w
   355     0765  120A  118A  271B  120A  118A  	fcall	_LCD_Data
   356     076A                     l709:
   357                           
   358                           ;LCD_Class.c: 31:     }
   359     076A  3001               	movlw	1
   360     076B  00FF               	movwf	btemp+1
   361     076C  087F               	movf	btemp+1,w
   362     076D  07F5               	addwf	_i,f
   363     076E                     l711:
   364     076E  300B               	movlw	11
   365     076F  0275               	subwf	_i,w
   366     0770  1C03               	skipc
   367     0771  2F73               	goto	u21
   368     0772  2F74               	goto	u20
   369     0773                     u21:
   370     0773  2F60               	goto	l707
   371     0774                     u20:
   372     0774                     l29:	
   373                           ;LCD_Class.c: 32:     while(1);
   374                           
   375     0774  2F74               	goto	l29
   376     0775  120A  118A  2800   	ljmp	start
   377     0778                     __end_of_main:
   378                           
   379                           	psect	text1
   380     0778                     __ptext1:	
   381 ;; *************** function _init *****************
   382 ;; Defined at:
   383 ;;		line 35 in file "LCD_Class.c"
   384 ;; Parameters:    Size  Location     Type
   385 ;;		None
   386 ;; Auto vars:     Size  Location     Type
   387 ;;		None
   388 ;; Return value:  Size  Location     Type
   389 ;;                  1    wreg      void 
   390 ;; Registers used:
   391 ;;		wreg, status,2, status,0, pclath, cstack
   392 ;; Tracked objects:
   393 ;;		On entry : 0/0
   394 ;;		On exit  : 0/0
   395 ;;		Unchanged: 0/0
   396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   397 ;;      Params:         0       0       0       0       0
   398 ;;      Locals:         0       0       0       0       0
   399 ;;      Temps:          2       0       0       0       0
   400 ;;      Totals:         2       0       0       0       0
   401 ;;Total ram usage:        2 bytes
   402 ;; Hardware stack levels used: 1
   403 ;; Hardware stack levels required when called: 1
   404 ;; This function calls:
   405 ;;		_LCD_Command
   406 ;; This function is called by:
   407 ;;		_main
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411     0778                     _init:	
   412                           ;psect for function _init
   413                           
   414     0778                     l657:	
   415                           ;incstack = 0
   416                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
   417                           
   418                           
   419                           ;LCD_Class.c: 36:     TRISC = 0x00;
   420     0778  1683               	bsf	3,5	;RP0=1, select bank1
   421     0779  1303               	bcf	3,6	;RP1=0, select bank1
   422     077A  0187               	clrf	7	;volatile
   423                           
   424                           ;LCD_Class.c: 37:     TRISD = 0x00;
   425     077B  0188               	clrf	8	;volatile
   426     077C                     l659:
   427                           
   428                           ;LCD_Class.c: 38:     LCD_Command (0x30);
   429     077C  3030               	movlw	48
   430     077D  120A  118A  272E  120A  118A  	fcall	_LCD_Command
   431     0782                     l661:
   432                           
   433                           ;LCD_Class.c: 39:     _delay((unsigned long)((100)*(6000000/4000.0)));
   434     0782  30C3               	movlw	195
   435     0783  00F4               	movwf	??_init+1
   436     0784  30CD               	movlw	205
   437     0785  00F3               	movwf	??_init
   438     0786                     u37:
   439     0786  0BF3               	decfsz	??_init,f
   440     0787  2F86               	goto	u37
   441     0788  0BF4               	decfsz	??_init+1,f
   442     0789  2F86               	goto	u37
   443     078A                     l663:
   444                           
   445                           ;LCD_Class.c: 40:     LCD_Command (0x30);
   446     078A  3030               	movlw	48
   447     078B  120A  118A  272E  120A  118A  	fcall	_LCD_Command
   448     0790                     l665:
   449                           
   450                           ;LCD_Class.c: 41:     _delay((unsigned long)((100)*(6000000/4000.0)));
   451     0790  30C3               	movlw	195
   452     0791  00F4               	movwf	??_init+1
   453     0792  30CD               	movlw	205
   454     0793  00F3               	movwf	??_init
   455     0794                     u47:
   456     0794  0BF3               	decfsz	??_init,f
   457     0795  2F94               	goto	u47
   458     0796  0BF4               	decfsz	??_init+1,f
   459     0797  2F94               	goto	u47
   460     0798                     l667:
   461                           
   462                           ;LCD_Class.c: 42:     LCD_Command (0x30);
   463     0798  3030               	movlw	48
   464     0799  120A  118A  272E  120A  118A  	fcall	_LCD_Command
   465     079E                     l669:
   466                           
   467                           ;LCD_Class.c: 43:     _delay((unsigned long)((100)*(6000000/4000.0)));
   468     079E  30C3               	movlw	195
   469     079F  00F4               	movwf	??_init+1
   470     07A0  30CD               	movlw	205
   471     07A1  00F3               	movwf	??_init
   472     07A2                     u57:
   473     07A2  0BF3               	decfsz	??_init,f
   474     07A3  2FA2               	goto	u57
   475     07A4  0BF4               	decfsz	??_init+1,f
   476     07A5  2FA2               	goto	u57
   477     07A6                     l671:
   478                           
   479                           ;LCD_Class.c: 44:     LCD_Command (0x30);
   480     07A6  3030               	movlw	48
   481     07A7  120A  118A  272E  120A  118A  	fcall	_LCD_Command
   482     07AC                     l673:
   483                           
   484                           ;LCD_Class.c: 45:     _delay((unsigned long)((100)*(6000000/4000.0)));
   485     07AC  30C3               	movlw	195
   486     07AD  00F4               	movwf	??_init+1
   487     07AE  30CD               	movlw	205
   488     07AF  00F3               	movwf	??_init
   489     07B0                     u67:
   490     07B0  0BF3               	decfsz	??_init,f
   491     07B1  2FB0               	goto	u67
   492     07B2  0BF4               	decfsz	??_init+1,f
   493     07B3  2FB0               	goto	u67
   494     07B4                     l675:
   495                           
   496                           ;LCD_Class.c: 46:     LCD_Command (0x34);
   497     07B4  3034               	movlw	52
   498     07B5  120A  118A  272E  120A  118A  	fcall	_LCD_Command
   499     07BA                     l677:
   500                           
   501                           ;LCD_Class.c: 47:     _delay((unsigned long)((100)*(6000000/4000.0)));
   502     07BA  30C3               	movlw	195
   503     07BB  00F4               	movwf	??_init+1
   504     07BC  30CD               	movlw	205
   505     07BD  00F3               	movwf	??_init
   506     07BE                     u77:
   507     07BE  0BF3               	decfsz	??_init,f
   508     07BF  2FBE               	goto	u77
   509     07C0  0BF4               	decfsz	??_init+1,f
   510     07C1  2FBE               	goto	u77
   511     07C2                     l679:
   512                           
   513                           ;LCD_Class.c: 48:     LCD_Command (0x06);
   514     07C2  3006               	movlw	6
   515     07C3  120A  118A  272E  120A  118A  	fcall	_LCD_Command
   516     07C8                     l681:
   517                           
   518                           ;LCD_Class.c: 49:     _delay((unsigned long)((100)*(6000000/4000.0)));
   519     07C8  30C3               	movlw	195
   520     07C9  00F4               	movwf	??_init+1
   521     07CA  30CD               	movlw	205
   522     07CB  00F3               	movwf	??_init
   523     07CC                     u87:
   524     07CC  0BF3               	decfsz	??_init,f
   525     07CD  2FCC               	goto	u87
   526     07CE  0BF4               	decfsz	??_init+1,f
   527     07CF  2FCC               	goto	u87
   528     07D0                     l683:
   529                           
   530                           ;LCD_Class.c: 50:     LCD_Command (0x0F);
   531     07D0  300F               	movlw	15
   532     07D1  120A  118A  272E  120A  118A  	fcall	_LCD_Command
   533     07D6                     l685:
   534                           
   535                           ;LCD_Class.c: 51:     _delay((unsigned long)((100)*(6000000/4000.0)));
   536     07D6  30C3               	movlw	195
   537     07D7  00F4               	movwf	??_init+1
   538     07D8  30CD               	movlw	205
   539     07D9  00F3               	movwf	??_init
   540     07DA                     u97:
   541     07DA  0BF3               	decfsz	??_init,f
   542     07DB  2FDA               	goto	u97
   543     07DC  0BF4               	decfsz	??_init+1,f
   544     07DD  2FDA               	goto	u97
   545     07DE                     l687:
   546                           
   547                           ;LCD_Class.c: 52:     LCD_Command (0x01);
   548     07DE  3001               	movlw	1
   549     07DF  120A  118A  272E  120A  118A  	fcall	_LCD_Command
   550     07E4                     l689:
   551                           
   552                           ;LCD_Class.c: 53:     _delay((unsigned long)((100)*(6000000/4000.0)));
   553     07E4  30C3               	movlw	195
   554     07E5  00F4               	movwf	??_init+1
   555     07E6  30CD               	movlw	205
   556     07E7  00F3               	movwf	??_init
   557     07E8                     u107:
   558     07E8  0BF3               	decfsz	??_init,f
   559     07E9  2FE8               	goto	u107
   560     07EA  0BF4               	decfsz	??_init+1,f
   561     07EB  2FE8               	goto	u107
   562     07EC                     l35:
   563     07EC  0008               	return
   564     07ED                     __end_of_init:
   565                           
   566                           	psect	text2
   567     072E                     __ptext2:	
   568 ;; *************** function _LCD_Command *****************
   569 ;; Defined at:
   570 ;;		line 56 in file "LCD_Class.c"
   571 ;; Parameters:    Size  Location     Type
   572 ;;  n               1    wreg     unsigned char 
   573 ;; Auto vars:     Size  Location     Type
   574 ;;  n               1    2[COMMON] unsigned char 
   575 ;; Return value:  Size  Location     Type
   576 ;;                  1    wreg      void 
   577 ;; Registers used:
   578 ;;		wreg
   579 ;; Tracked objects:
   580 ;;		On entry : 0/0
   581 ;;		On exit  : 0/0
   582 ;;		Unchanged: 0/0
   583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   584 ;;      Params:         0       0       0       0       0
   585 ;;      Locals:         1       0       0       0       0
   586 ;;      Temps:          2       0       0       0       0
   587 ;;      Totals:         3       0       0       0       0
   588 ;;Total ram usage:        3 bytes
   589 ;; Hardware stack levels used: 1
   590 ;; This function calls:
   591 ;;		Nothing
   592 ;; This function is called by:
   593 ;;		_main
   594 ;;		_init
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598     072E                     _LCD_Command:	
   599                           ;psect for function _LCD_Command
   600                           
   601                           
   602                           ;incstack = 0
   603                           ; Regs used in _LCD_Command: [wreg]
   604                           ;LCD_Command@n stored from wreg
   605     072E  00F2               	movwf	LCD_Command@n
   606     072F                     l649:
   607                           
   608                           ;LCD_Class.c: 57:     RC3 = 0;
   609     072F  1283               	bcf	3,5	;RP0=0, select bank0
   610     0730  1303               	bcf	3,6	;RP1=0, select bank0
   611     0731  1187               	bcf	7,3	;volatile
   612     0732                     l651:
   613                           
   614                           ;LCD_Class.c: 58:     PORTD = n;
   615     0732  0872               	movf	LCD_Command@n,w
   616     0733  0088               	movwf	8	;volatile
   617     0734                     l653:
   618                           
   619                           ;LCD_Class.c: 59:     RC0 = 1;
   620     0734  1407               	bsf	7,0	;volatile
   621                           
   622                           ;LCD_Class.c: 60:     _delay((unsigned long)((100)*(6000000/4000.0)));
   623     0735  30C3               	movlw	195
   624     0736  00F1               	movwf	??_LCD_Command+1
   625     0737  30CD               	movlw	205
   626     0738  00F0               	movwf	??_LCD_Command
   627     0739                     u117:
   628     0739  0BF0               	decfsz	??_LCD_Command,f
   629     073A  2F39               	goto	u117
   630     073B  0BF1               	decfsz	??_LCD_Command+1,f
   631     073C  2F39               	goto	u117
   632     073D                     l655:
   633                           
   634                           ;LCD_Class.c: 61:     RC0 = 0;
   635     073D  1283               	bcf	3,5	;RP0=0, select bank0
   636     073E  1303               	bcf	3,6	;RP1=0, select bank0
   637     073F  1007               	bcf	7,0	;volatile
   638     0740                     l38:
   639     0740  0008               	return
   640     0741                     __end_of_LCD_Command:
   641                           
   642                           	psect	text3
   643     071B                     __ptext3:	
   644 ;; *************** function _LCD_Data *****************
   645 ;; Defined at:
   646 ;;		line 64 in file "LCD_Class.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;  n               1    wreg     unsigned char 
   649 ;; Auto vars:     Size  Location     Type
   650 ;;  n               1    2[COMMON] unsigned char 
   651 ;; Return value:  Size  Location     Type
   652 ;;                  1    wreg      void 
   653 ;; Registers used:
   654 ;;		wreg
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   660 ;;      Params:         0       0       0       0       0
   661 ;;      Locals:         1       0       0       0       0
   662 ;;      Temps:          2       0       0       0       0
   663 ;;      Totals:         3       0       0       0       0
   664 ;;Total ram usage:        3 bytes
   665 ;; Hardware stack levels used: 1
   666 ;; This function calls:
   667 ;;		Nothing
   668 ;; This function is called by:
   669 ;;		_main
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673     071B                     _LCD_Data:	
   674                           ;psect for function _LCD_Data
   675                           
   676                           
   677                           ;incstack = 0
   678                           ; Regs used in _LCD_Data: [wreg]
   679                           ;LCD_Data@n stored from wreg
   680     071B  00F2               	movwf	LCD_Data@n
   681     071C                     l691:
   682                           
   683                           ;LCD_Class.c: 65:     RC3 = 1;
   684     071C  1283               	bcf	3,5	;RP0=0, select bank0
   685     071D  1303               	bcf	3,6	;RP1=0, select bank0
   686     071E  1587               	bsf	7,3	;volatile
   687     071F                     l693:
   688                           
   689                           ;LCD_Class.c: 66:     PORTD = n;
   690     071F  0872               	movf	LCD_Data@n,w
   691     0720  0088               	movwf	8	;volatile
   692     0721                     l695:
   693                           
   694                           ;LCD_Class.c: 67:     RC0 = 1;
   695     0721  1407               	bsf	7,0	;volatile
   696                           
   697                           ;LCD_Class.c: 68:     _delay((unsigned long)((100)*(6000000/4000.0)));
   698     0722  30C3               	movlw	195
   699     0723  00F1               	movwf	??_LCD_Data+1
   700     0724  30CD               	movlw	205
   701     0725  00F0               	movwf	??_LCD_Data
   702     0726                     u127:
   703     0726  0BF0               	decfsz	??_LCD_Data,f
   704     0727  2F26               	goto	u127
   705     0728  0BF1               	decfsz	??_LCD_Data+1,f
   706     0729  2F26               	goto	u127
   707     072A                     l697:
   708                           
   709                           ;LCD_Class.c: 69:     RC0 = 0;
   710     072A  1283               	bcf	3,5	;RP0=0, select bank0
   711     072B  1303               	bcf	3,6	;RP1=0, select bank0
   712     072C  1007               	bcf	7,0	;volatile
   713     072D                     l41:
   714     072D  0008               	return
   715     072E                     __end_of_LCD_Data:
   716     007E                     btemp	set	126	;btemp
   717     007E                     wtemp0	set	126
   718                           
   719                           	psect	config
   720                           
   721                           ;Config register CONFIG @ 0x2007
   722                           ;	Oscillator Selection bits
   723                           ;	FOSC = EXTRC, RC oscillator
   724                           ;	Watchdog Timer Enable bit
   725                           ;	WDTE = OFF, WDT disabled
   726                           ;	Power-up Timer Enable bit
   727                           ;	PWRTE = OFF, PWRT disabled
   728                           ;	Brown-out Reset Enable bit
   729                           ;	BOREN = OFF, BOR disabled
   730                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   731                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   732                           ;	Data EEPROM Memory Code Protection bit
   733                           ;	CPD = OFF, Data EEPROM code protection off
   734                           ;	Flash Program Memory Write Enable bits
   735                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   736                           ;	In-Circuit Debugger Mode bit
   737                           ;	DEBUG = 0x1, unprogrammed default
   738                           ;	Flash Program Memory Code Protection bit
   739                           ;	CP = OFF, Code protection off
   740     2007                     	org	8199
   741     2007  3F3B               	dw	16187

Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       6
    BANK0            80      0      12
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_init
    _init->_LCD_Command

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      66
                        _LCD_Command
                           _LCD_Data
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0      22
                                              3 COMMON     2     2      0
                        _LCD_Command
 ---------------------------------------------------------------------------------
 (2) _LCD_Command                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Data                                             3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Command
   _LCD_Data
   _init
     _LCD_Command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       C       5       15.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       6       1       42.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      12      12        0.0%
ABS                  0      0      12       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Mon Dec 25 00:54:17 2023

                      _i 0075                        pc 0002             ?_LCD_Command 0070  
                     l41 072D                       l35 07EC                       l29 0774  
                     l38 0740                       u20 0774                       u21 0773  
                     u37 0786                       u47 0794                       u57 07A2  
                     u67 07B0                       u77 07BE                       u87 07CC  
                     u97 07DA                       fsr 0004                      l701 075F  
                    l711 076E                      l651 0732                      l707 0760  
                    l653 0734                      l661 0782                      l709 076A  
                    l655 073D                      l671 07A6                      l663 078A  
                    l649 072F                      l681 07C8                      l673 07AC  
                    l665 0790                      l657 0778                      l691 071C  
                    l683 07D0                      l675 07B4                      l667 0798  
                    l659 077C                      l693 071F                      l685 07D6  
                    l677 07BA                      l669 079E                      l695 0721  
                    l687 07DE                      l679 07C2                      l697 072A  
                    l689 07E4                      l699 0754                      _RC0 0038  
                    _RC3 003B                      u107 07E8                      u117 0739  
                    u127 0726                      _arr 0020                      fsr0 0004  
                    indf 0000                     _main 0754                     _init 0778  
                   btemp 007E                     start 0000         __end_of_LCD_Data 072E  
                  ?_main 0070                    ?_init 0070                    _PORTD 0008  
                  _TRISC 0087                    _TRISD 0088             LCD_Command@n 0072  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07ED             __end_of_main 0778             __end_of_init 07ED  
                 ??_main 0075                   ??_init 0073                ?_LCD_Data 0070  
__end_of__initialization 07FC                LCD_Data@n 0072           __pcstackCOMMON 0070  
           __pidataBANK0 070F               ??_LCD_Data 0070               __pmaintext 0754  
                __ptext1 0778                  __ptext2 072E                  __ptext3 071B  
   end_of_initialization 07FC            ??_LCD_Command 0070      start_initialization 07ED  
             init_fetch0 0741              __pdataBANK0 0020      __end_of_LCD_Command 0741  
            __pbssCOMMON 0075                ___latbits 0002                 _LCD_Data 071B  
            _LCD_Command 072E                 init_ram0 0745  
