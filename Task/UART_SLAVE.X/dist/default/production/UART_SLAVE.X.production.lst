

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Sat May 11 17:18:10 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19     0000                     
    20                           ; Generated 22/03/2023 GMT
    21                           ; 
    22                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution. Publication is not required when
    36                           ;        this file is used in an embedded application.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54     0000                     	;# 
    55     0001                     	;# 
    56     0002                     	;# 
    57     0003                     	;# 
    58     0004                     	;# 
    59     0005                     	;# 
    60     0006                     	;# 
    61     0007                     	;# 
    62     0008                     	;# 
    63     0009                     	;# 
    64     000A                     	;# 
    65     000B                     	;# 
    66     000C                     	;# 
    67     000D                     	;# 
    68     000E                     	;# 
    69     000E                     	;# 
    70     000F                     	;# 
    71     0010                     	;# 
    72     0011                     	;# 
    73     0012                     	;# 
    74     0013                     	;# 
    75     0014                     	;# 
    76     0015                     	;# 
    77     0015                     	;# 
    78     0016                     	;# 
    79     0017                     	;# 
    80     0018                     	;# 
    81     0019                     	;# 
    82     001A                     	;# 
    83     001B                     	;# 
    84     001B                     	;# 
    85     001C                     	;# 
    86     001D                     	;# 
    87     001E                     	;# 
    88     001F                     	;# 
    89     0081                     	;# 
    90     0085                     	;# 
    91     0086                     	;# 
    92     0087                     	;# 
    93     0088                     	;# 
    94     0089                     	;# 
    95     008C                     	;# 
    96     008D                     	;# 
    97     008E                     	;# 
    98     0091                     	;# 
    99     0092                     	;# 
   100     0093                     	;# 
   101     0094                     	;# 
   102     0098                     	;# 
   103     0099                     	;# 
   104     009C                     	;# 
   105     009D                     	;# 
   106     009E                     	;# 
   107     009F                     	;# 
   108     010C                     	;# 
   109     010D                     	;# 
   110     010E                     	;# 
   111     010F                     	;# 
   112     018C                     	;# 
   113     018D                     	;# 
   114     0000                     	;# 
   115     0001                     	;# 
   116     0002                     	;# 
   117     0003                     	;# 
   118     0004                     	;# 
   119     0005                     	;# 
   120     0006                     	;# 
   121     0007                     	;# 
   122     0008                     	;# 
   123     0009                     	;# 
   124     000A                     	;# 
   125     000B                     	;# 
   126     000C                     	;# 
   127     000D                     	;# 
   128     000E                     	;# 
   129     000E                     	;# 
   130     000F                     	;# 
   131     0010                     	;# 
   132     0011                     	;# 
   133     0012                     	;# 
   134     0013                     	;# 
   135     0014                     	;# 
   136     0015                     	;# 
   137     0015                     	;# 
   138     0016                     	;# 
   139     0017                     	;# 
   140     0018                     	;# 
   141     0019                     	;# 
   142     001A                     	;# 
   143     001B                     	;# 
   144     001B                     	;# 
   145     001C                     	;# 
   146     001D                     	;# 
   147     001E                     	;# 
   148     001F                     	;# 
   149     0081                     	;# 
   150     0085                     	;# 
   151     0086                     	;# 
   152     0087                     	;# 
   153     0088                     	;# 
   154     0089                     	;# 
   155     008C                     	;# 
   156     008D                     	;# 
   157     008E                     	;# 
   158     0091                     	;# 
   159     0092                     	;# 
   160     0093                     	;# 
   161     0094                     	;# 
   162     0098                     	;# 
   163     0099                     	;# 
   164     009C                     	;# 
   165     009D                     	;# 
   166     009E                     	;# 
   167     009F                     	;# 
   168     010C                     	;# 
   169     010D                     	;# 
   170     010E                     	;# 
   171     010F                     	;# 
   172     018C                     	;# 
   173     018D                     	;# 
   174                           
   175                           	psect	idataCOMMON
   176     05B4                     __pidataCOMMON:
   177                           
   178                           ;initializer for _TX
   179     05B4  3454               	retlw	84
   180     05B5  3458               	retlw	88
   181     05B6  3420               	retlw	32
   182     05B7  343A               	retlw	58
   183     05B8  3420               	retlw	32
   184                           
   185                           	psect	idataBANK0
   186     05AF                     __pidataBANK0:	
   187                           ;initializer for _RX
   188                           
   189     05AF  3452               	retlw	82
   190     05B0  3458               	retlw	88
   191     05B1  3420               	retlw	32
   192     05B2  343A               	retlw	58
   193     05B3  3420               	retlw	32
   194     0008                     _PORTD	set	8
   195     0007                     _PORTC	set	7
   196     0018                     _RCSTA	set	24
   197     0019                     _TXREG	set	25
   198     001A                     _RCREG	set	26
   199     000C                     _PIR1	set	12
   200     0099                     _SPBRG	set	153
   201     0098                     _TXSTA	set	152
   202     0088                     _TRISD	set	136
   203     0087                     _TRISC	set	135
   204                           
   205                           	psect	cinit
   206     07CE                     start_initialization:	
   207                           ; #config settings
   208                           
   209     07CE                     __initialization:
   210                           
   211                           ; Initialize objects allocated to BANK0
   212     07CE  1383               	bcf	3,7	;select IRP bank0
   213     07CF  3025               	movlw	low (__pdataBANK0+5)
   214     07D0  00FD               	movwf	btemp+-1
   215     07D1  3005               	movlw	high __pidataBANK0
   216     07D2  00FE               	movwf	btemp
   217     07D3  30AF               	movlw	low __pidataBANK0
   218     07D4  00FF               	movwf	btemp+1
   219     07D5  3020               	movlw	low __pdataBANK0
   220     07D6  0084               	movwf	4
   221     07D7  120A  118A  25CA  120A  118A  	fcall	init_ram0
   222                           
   223                           ; Initialize objects allocated to COMMON
   224     07DC  120A  118A  25B4  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   225     07E1  00F0               	movwf	__pdataCOMMON& (0+127)
   226     07E2  120A  118A  25B5  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   227     07E7  00F1               	movwf	(__pdataCOMMON+1)& (0+127)
   228     07E8  120A  118A  25B6  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   229     07ED  00F2               	movwf	(__pdataCOMMON+2)& (0+127)
   230     07EE  120A  118A  25B7  120A  118A  	fcall	__pidataCOMMON+3	;fetch initializer
   231     07F3  00F3               	movwf	(__pdataCOMMON+3)& (0+127)
   232     07F4  120A  118A  25B8  120A  118A  	fcall	__pidataCOMMON+4	;fetch initializer
   233     07F9  00F4               	movwf	(__pdataCOMMON+4)& (0+127)
   234                           
   235                           ; Clear objects allocated to COMMON
   236     07FA  01F8               	clrf	__pbssCOMMON& (0+127)
   237     07FB  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   238     07FC                     end_of_initialization:	
   239                           ;End of C runtime variable initialization code
   240                           
   241     07FC                     __end_of__initialization:
   242     07FC  0183               	clrf	3
   243     07FD  120A  118A  2E7F   	ljmp	_main	;jump to C main() function
   244                           
   245                           	psect	bssCOMMON
   246     0078                     __pbssCOMMON:
   247     0078                     _x:
   248     0078                     	ds	1
   249     0079                     _val:
   250     0079                     	ds	1
   251                           
   252                           	psect	dataCOMMON
   253     0070                     __pdataCOMMON:
   254     0070                     _TX:
   255     0070                     	ds	5
   256                           
   257                           	psect	dataBANK0
   258     0020                     __pdataBANK0:
   259     0020                     _RX:
   260     0020                     	ds	5
   261                           
   262                           	psect	inittext
   263     05C6                     init_fetch0:	
   264                           ;	Called with low address in FSR and high address in W
   265                           
   266     05C6  087E               	movf	btemp,w
   267     05C7  008A               	movwf	10
   268     05C8  087F               	movf	btemp+1,w
   269     05C9  0082               	movwf	2
   270     05CA                     init_ram0:	
   271                           ;Called with:
   272                           ;	high address of idata address in btemp 
   273                           ;	low address of idata address in btemp+1 
   274                           ;	low address of data in FSR
   275                           ;	high address + 1 of data in btemp-1
   276                           
   277     05CA  120A  118A  25C6  120A  118A  	fcall	init_fetch0
   278     05CF  0080               	movwf	0
   279     05D0  0A84               	incf	4,f
   280     05D1  0804               	movf	4,w
   281     05D2  067D               	xorwf	btemp+-1,w
   282     05D3  1903               	btfsc	3,2
   283     05D4  3400               	retlw	0
   284     05D5  0AFF               	incf	btemp+1,f
   285     05D6  1903               	btfsc	3,2
   286     05D7  0AFE               	incf	btemp,f
   287     05D8  2DCA               	goto	init_ram0
   288                           
   289                           	psect	cstackCOMMON
   290     0075                     __pcstackCOMMON:
   291     0075                     ?_init:
   292     0075                     ?_cmd:	
   293                           ; 1 bytes @ 0x0
   294                           
   295     0075                     ?_data:	
   296                           ; 1 bytes @ 0x0
   297                           
   298     0075                     ?_delay:	
   299                           ; 1 bytes @ 0x0
   300                           
   301     0075                     ?_main:	
   302                           ; 1 bytes @ 0x0
   303                           
   304     0075                     delay@x:	
   305                           ; 1 bytes @ 0x0
   306                           
   307                           
   308                           ; 2 bytes @ 0x0
   309     0075                     	ds	2
   310     0077                     ??_cmd:
   311     0077                     ??_data:	
   312                           ; 1 bytes @ 0x2
   313                           
   314     0077                     ??_delay:	
   315                           ; 1 bytes @ 0x2
   316                           
   317     0077                     cmd@i:	
   318                           ; 1 bytes @ 0x2
   319                           
   320     0077                     data@i:	
   321                           ; 1 bytes @ 0x2
   322                           
   323                           
   324                           ; 1 bytes @ 0x2
   325     0077                     	ds	1
   326     0078                     ??_init:
   327     0078                     ??_main:	
   328                           ; 1 bytes @ 0x3
   329                           
   330                           
   331                           	psect	maintext
   332     067F                     __pmaintext:	
   333                           ; 1 bytes @ 0x3
   334 ;;
   335 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   336 ;;
   337 ;; *************** function _main *****************
   338 ;; Defined at:
   339 ;;		line 17 in file "SLAVE.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;		None
   344 ;; Return value:  Size  Location     Type
   345 ;;                  1    wreg      void 
   346 ;; Registers used:
   347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   348 ;; Tracked objects:
   349 ;;		On entry : B00/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   353 ;;      Params:         0       0       0       0       0
   354 ;;      Locals:         0       0       0       0       0
   355 ;;      Temps:          0       0       0       0       0
   356 ;;      Totals:         0       0       0       0       0
   357 ;;Total ram usage:        0 bytes
   358 ;; Hardware stack levels required when called: 3
   359 ;; This function calls:
   360 ;;		_cmd
   361 ;;		_data
   362 ;;		_init
   363 ;; This function is called by:
   364 ;;		Startup code after reset
   365 ;; This function uses a non-reentrant model
   366 ;;
   367                           
   368     067F                     _main:	
   369                           ;psect for function _main
   370                           
   371     067F                     l899:	
   372                           ;incstack = 0
   373                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   374                           
   375                           
   376                           ;SLAVE.c: 18:     init();
   377     067F  120A  118A  2606  120A  118A  	fcall	_init
   378     0684                     l901:
   379                           
   380                           ;SLAVE.c: 20:         if(PIR1&0x20) {
   381     0684  1283               	bcf	3,5	;RP0=0, select bank0
   382     0685  1303               	bcf	3,6	;RP1=0, select bank0
   383     0686  1E8C               	btfss	12,5	;volatile
   384     0687  2E89               	goto	u161
   385     0688  2E8A               	goto	u160
   386     0689                     u161:
   387     0689  2E84               	goto	l901
   388     068A                     u160:
   389     068A                     l903:
   390                           
   391                           ;SLAVE.c: 21:             if(RCREG == 'A') {
   392     068A  3041               	movlw	65
   393     068B  061A               	xorwf	26,w	;volatile
   394     068C  1D03               	btfss	3,2
   395     068D  2E8F               	goto	u171
   396     068E  2E90               	goto	u170
   397     068F                     u171:
   398     068F  2EDA               	goto	l939
   399     0690                     u170:
   400     0690                     l905:
   401                           
   402                           ;SLAVE.c: 22:                 cmd(0x80);
   403     0690  3080               	movlw	128
   404     0691  120A  118A  25EE  120A  118A  	fcall	_cmd
   405     0696                     l907:
   406                           
   407                           ;SLAVE.c: 23:                 for(x=0; x<5; x++) {
   408     0696  01F8               	clrf	_x
   409     0697                     l913:
   410                           
   411                           ;SLAVE.c: 24:                     data(RX[x]);
   412     0697  0878               	movf	_x,w
   413     0698  3E20               	addlw	(low (_RX| 0))& (0+255)
   414     0699  0084               	movwf	4
   415     069A  1383               	bcf	3,7	;select IRP bank0
   416     069B  0800               	movf	0,w
   417     069C  120A  118A  25D9  120A  118A  	fcall	_data
   418     06A1                     l915:
   419                           
   420                           ;SLAVE.c: 25:                 } data(RCREG);
   421     06A1  3001               	movlw	1
   422     06A2  00FF               	movwf	btemp+1
   423     06A3  087F               	movf	btemp+1,w
   424     06A4  07F8               	addwf	_x,f
   425     06A5                     l917:
   426     06A5  3005               	movlw	5
   427     06A6  0278               	subwf	_x,w
   428     06A7  1C03               	skipc
   429     06A8  2EAA               	goto	u181
   430     06A9  2EAB               	goto	u180
   431     06AA                     u181:
   432     06AA  2E97               	goto	l913
   433     06AB                     u180:
   434     06AB                     l919:
   435     06AB  1283               	bcf	3,5	;RP0=0, select bank0
   436     06AC  1303               	bcf	3,6	;RP1=0, select bank0
   437     06AD  081A               	movf	26,w	;volatile
   438     06AE  120A  118A  25D9  120A  118A  	fcall	_data
   439     06B3                     l921:
   440                           
   441                           ;SLAVE.c: 26:                 TXREG = 'a';
   442     06B3  3061               	movlw	97
   443     06B4  1283               	bcf	3,5	;RP0=0, select bank0
   444     06B5  1303               	bcf	3,6	;RP1=0, select bank0
   445     06B6  0099               	movwf	25	;volatile
   446     06B7                     l923:
   447                           
   448                           ;SLAVE.c: 27:                 cmd(0xC0);
   449     06B7  30C0               	movlw	192
   450     06B8  120A  118A  25EE  120A  118A  	fcall	_cmd
   451     06BD                     l925:
   452                           
   453                           ;SLAVE.c: 28:                 for(x=0; x<5; x++) {
   454     06BD  01F8               	clrf	_x
   455     06BE                     l931:
   456                           
   457                           ;SLAVE.c: 29:                     data(TX[x]);
   458     06BE  0878               	movf	_x,w
   459     06BF  3E70               	addlw	(low (_TX| 0))& (0+255)
   460     06C0  0084               	movwf	4
   461     06C1  0800               	movf	0,w
   462     06C2  120A  118A  25D9  120A  118A  	fcall	_data
   463     06C7                     l933:
   464                           
   465                           ;SLAVE.c: 30:                 } data(TXREG);
   466     06C7  3001               	movlw	1
   467     06C8  00FF               	movwf	btemp+1
   468     06C9  087F               	movf	btemp+1,w
   469     06CA  07F8               	addwf	_x,f
   470     06CB                     l935:
   471     06CB  3005               	movlw	5
   472     06CC  0278               	subwf	_x,w
   473     06CD  1C03               	skipc
   474     06CE  2ED0               	goto	u191
   475     06CF  2ED1               	goto	u190
   476     06D0                     u191:
   477     06D0  2EBE               	goto	l931
   478     06D1                     u190:
   479     06D1                     l937:
   480     06D1  1283               	bcf	3,5	;RP0=0, select bank0
   481     06D2  1303               	bcf	3,6	;RP1=0, select bank0
   482     06D3  0819               	movf	25,w	;volatile
   483     06D4  120A  118A  25D9  120A  118A  	fcall	_data
   484                           
   485                           ;SLAVE.c: 31:             }
   486     06D9  2E84               	goto	l901
   487     06DA                     l939:
   488     06DA  3042               	movlw	66
   489     06DB  061A               	xorwf	26,w	;volatile
   490     06DC  1D03               	btfss	3,2
   491     06DD  2EDF               	goto	u201
   492     06DE  2EE0               	goto	u200
   493     06DF                     u201:
   494     06DF  2F2A               	goto	l975
   495     06E0                     u200:
   496     06E0                     l941:
   497                           
   498                           ;SLAVE.c: 33:                 cmd(0x80);
   499     06E0  3080               	movlw	128
   500     06E1  120A  118A  25EE  120A  118A  	fcall	_cmd
   501     06E6                     l943:
   502                           
   503                           ;SLAVE.c: 34:                 for(x=0; x<5; x++) {
   504     06E6  01F8               	clrf	_x
   505     06E7                     l949:
   506                           
   507                           ;SLAVE.c: 35:                     data(RX[x]);
   508     06E7  0878               	movf	_x,w
   509     06E8  3E20               	addlw	(low (_RX| 0))& (0+255)
   510     06E9  0084               	movwf	4
   511     06EA  1383               	bcf	3,7	;select IRP bank0
   512     06EB  0800               	movf	0,w
   513     06EC  120A  118A  25D9  120A  118A  	fcall	_data
   514     06F1                     l951:
   515                           
   516                           ;SLAVE.c: 36:                 } data(RCREG);
   517     06F1  3001               	movlw	1
   518     06F2  00FF               	movwf	btemp+1
   519     06F3  087F               	movf	btemp+1,w
   520     06F4  07F8               	addwf	_x,f
   521     06F5                     l953:
   522     06F5  3005               	movlw	5
   523     06F6  0278               	subwf	_x,w
   524     06F7  1C03               	skipc
   525     06F8  2EFA               	goto	u211
   526     06F9  2EFB               	goto	u210
   527     06FA                     u211:
   528     06FA  2EE7               	goto	l949
   529     06FB                     u210:
   530     06FB                     l955:
   531     06FB  1283               	bcf	3,5	;RP0=0, select bank0
   532     06FC  1303               	bcf	3,6	;RP1=0, select bank0
   533     06FD  081A               	movf	26,w	;volatile
   534     06FE  120A  118A  25D9  120A  118A  	fcall	_data
   535     0703                     l957:
   536                           
   537                           ;SLAVE.c: 37:                 TXREG = 'b';
   538     0703  3062               	movlw	98
   539     0704  1283               	bcf	3,5	;RP0=0, select bank0
   540     0705  1303               	bcf	3,6	;RP1=0, select bank0
   541     0706  0099               	movwf	25	;volatile
   542     0707                     l959:
   543                           
   544                           ;SLAVE.c: 38:                 cmd(0xC0);
   545     0707  30C0               	movlw	192
   546     0708  120A  118A  25EE  120A  118A  	fcall	_cmd
   547     070D                     l961:
   548                           
   549                           ;SLAVE.c: 39:                 for(x=0; x<5; x++) {
   550     070D  01F8               	clrf	_x
   551     070E                     l967:
   552                           
   553                           ;SLAVE.c: 40:                     data(TX[x]);
   554     070E  0878               	movf	_x,w
   555     070F  3E70               	addlw	(low (_TX| 0))& (0+255)
   556     0710  0084               	movwf	4
   557     0711  0800               	movf	0,w
   558     0712  120A  118A  25D9  120A  118A  	fcall	_data
   559     0717                     l969:
   560                           
   561                           ;SLAVE.c: 41:                 } data(TXREG);
   562     0717  3001               	movlw	1
   563     0718  00FF               	movwf	btemp+1
   564     0719  087F               	movf	btemp+1,w
   565     071A  07F8               	addwf	_x,f
   566     071B                     l971:
   567     071B  3005               	movlw	5
   568     071C  0278               	subwf	_x,w
   569     071D  1C03               	skipc
   570     071E  2F20               	goto	u221
   571     071F  2F21               	goto	u220
   572     0720                     u221:
   573     0720  2F0E               	goto	l967
   574     0721                     u220:
   575     0721                     l973:
   576     0721  1283               	bcf	3,5	;RP0=0, select bank0
   577     0722  1303               	bcf	3,6	;RP1=0, select bank0
   578     0723  0819               	movf	25,w	;volatile
   579     0724  120A  118A  25D9  120A  118A  	fcall	_data
   580                           
   581                           ;SLAVE.c: 42:             }
   582     0729  2E84               	goto	l901
   583     072A                     l975:
   584     072A  3043               	movlw	67
   585     072B  061A               	xorwf	26,w	;volatile
   586     072C  1D03               	btfss	3,2
   587     072D  2F2F               	goto	u231
   588     072E  2F30               	goto	u230
   589     072F                     u231:
   590     072F  2F7A               	goto	l1011
   591     0730                     u230:
   592     0730                     l977:
   593                           
   594                           ;SLAVE.c: 44:                 cmd(0x80);
   595     0730  3080               	movlw	128
   596     0731  120A  118A  25EE  120A  118A  	fcall	_cmd
   597     0736                     l979:
   598                           
   599                           ;SLAVE.c: 45:                 for(x=0; x<5; x++) {
   600     0736  01F8               	clrf	_x
   601     0737                     l985:
   602                           
   603                           ;SLAVE.c: 46:                     data(RX[x]);
   604     0737  0878               	movf	_x,w
   605     0738  3E20               	addlw	(low (_RX| 0))& (0+255)
   606     0739  0084               	movwf	4
   607     073A  1383               	bcf	3,7	;select IRP bank0
   608     073B  0800               	movf	0,w
   609     073C  120A  118A  25D9  120A  118A  	fcall	_data
   610     0741                     l987:
   611                           
   612                           ;SLAVE.c: 47:                 } data(RCREG);
   613     0741  3001               	movlw	1
   614     0742  00FF               	movwf	btemp+1
   615     0743  087F               	movf	btemp+1,w
   616     0744  07F8               	addwf	_x,f
   617     0745                     l989:
   618     0745  3005               	movlw	5
   619     0746  0278               	subwf	_x,w
   620     0747  1C03               	skipc
   621     0748  2F4A               	goto	u241
   622     0749  2F4B               	goto	u240
   623     074A                     u241:
   624     074A  2F37               	goto	l985
   625     074B                     u240:
   626     074B                     l991:
   627     074B  1283               	bcf	3,5	;RP0=0, select bank0
   628     074C  1303               	bcf	3,6	;RP1=0, select bank0
   629     074D  081A               	movf	26,w	;volatile
   630     074E  120A  118A  25D9  120A  118A  	fcall	_data
   631     0753                     l993:
   632                           
   633                           ;SLAVE.c: 48:                 TXREG = 'c';
   634     0753  3063               	movlw	99
   635     0754  1283               	bcf	3,5	;RP0=0, select bank0
   636     0755  1303               	bcf	3,6	;RP1=0, select bank0
   637     0756  0099               	movwf	25	;volatile
   638     0757                     l995:
   639                           
   640                           ;SLAVE.c: 49:                 cmd(0xC0);
   641     0757  30C0               	movlw	192
   642     0758  120A  118A  25EE  120A  118A  	fcall	_cmd
   643     075D                     l997:
   644                           
   645                           ;SLAVE.c: 50:                 for(x=0; x<5; x++) {
   646     075D  01F8               	clrf	_x
   647     075E                     l1003:
   648                           
   649                           ;SLAVE.c: 51:                     data(TX[x]);
   650     075E  0878               	movf	_x,w
   651     075F  3E70               	addlw	(low (_TX| 0))& (0+255)
   652     0760  0084               	movwf	4
   653     0761  0800               	movf	0,w
   654     0762  120A  118A  25D9  120A  118A  	fcall	_data
   655     0767                     l1005:
   656                           
   657                           ;SLAVE.c: 52:                 } data(TXREG);
   658     0767  3001               	movlw	1
   659     0768  00FF               	movwf	btemp+1
   660     0769  087F               	movf	btemp+1,w
   661     076A  07F8               	addwf	_x,f
   662     076B                     l1007:
   663     076B  3005               	movlw	5
   664     076C  0278               	subwf	_x,w
   665     076D  1C03               	skipc
   666     076E  2F70               	goto	u251
   667     076F  2F71               	goto	u250
   668     0770                     u251:
   669     0770  2F5E               	goto	l1003
   670     0771                     u250:
   671     0771                     l1009:
   672     0771  1283               	bcf	3,5	;RP0=0, select bank0
   673     0772  1303               	bcf	3,6	;RP1=0, select bank0
   674     0773  0819               	movf	25,w	;volatile
   675     0774  120A  118A  25D9  120A  118A  	fcall	_data
   676                           
   677                           ;SLAVE.c: 53:             }
   678     0779  2E84               	goto	l901
   679     077A                     l1011:
   680     077A  3044               	movlw	68
   681     077B  061A               	xorwf	26,w	;volatile
   682     077C  1D03               	btfss	3,2
   683     077D  2F7F               	goto	u261
   684     077E  2F80               	goto	u260
   685     077F                     u261:
   686     077F  2FCA               	goto	l48
   687     0780                     u260:
   688     0780                     l1013:
   689                           
   690                           ;SLAVE.c: 55:                 cmd(0x80);
   691     0780  3080               	movlw	128
   692     0781  120A  118A  25EE  120A  118A  	fcall	_cmd
   693     0786                     l1015:
   694                           
   695                           ;SLAVE.c: 56:                 for(x=0; x<5; x++) {
   696     0786  01F8               	clrf	_x
   697     0787                     l1021:
   698                           
   699                           ;SLAVE.c: 57:                     data(RX[x]);
   700     0787  0878               	movf	_x,w
   701     0788  3E20               	addlw	(low (_RX| 0))& (0+255)
   702     0789  0084               	movwf	4
   703     078A  1383               	bcf	3,7	;select IRP bank0
   704     078B  0800               	movf	0,w
   705     078C  120A  118A  25D9  120A  118A  	fcall	_data
   706     0791                     l1023:
   707                           
   708                           ;SLAVE.c: 58:                 } data(RCREG);
   709     0791  3001               	movlw	1
   710     0792  00FF               	movwf	btemp+1
   711     0793  087F               	movf	btemp+1,w
   712     0794  07F8               	addwf	_x,f
   713     0795                     l1025:
   714     0795  3005               	movlw	5
   715     0796  0278               	subwf	_x,w
   716     0797  1C03               	skipc
   717     0798  2F9A               	goto	u271
   718     0799  2F9B               	goto	u270
   719     079A                     u271:
   720     079A  2F87               	goto	l1021
   721     079B                     u270:
   722     079B                     l1027:
   723     079B  1283               	bcf	3,5	;RP0=0, select bank0
   724     079C  1303               	bcf	3,6	;RP1=0, select bank0
   725     079D  081A               	movf	26,w	;volatile
   726     079E  120A  118A  25D9  120A  118A  	fcall	_data
   727     07A3                     l1029:
   728                           
   729                           ;SLAVE.c: 59:                 TXREG = 'd';
   730     07A3  3064               	movlw	100
   731     07A4  1283               	bcf	3,5	;RP0=0, select bank0
   732     07A5  1303               	bcf	3,6	;RP1=0, select bank0
   733     07A6  0099               	movwf	25	;volatile
   734     07A7                     l1031:
   735                           
   736                           ;SLAVE.c: 60:                 cmd(0xC0);
   737     07A7  30C0               	movlw	192
   738     07A8  120A  118A  25EE  120A  118A  	fcall	_cmd
   739     07AD                     l1033:
   740                           
   741                           ;SLAVE.c: 61:                 for(x=0; x<5; x++) {
   742     07AD  01F8               	clrf	_x
   743     07AE                     l1039:
   744                           
   745                           ;SLAVE.c: 62:                     data(TX[x]);
   746     07AE  0878               	movf	_x,w
   747     07AF  3E70               	addlw	(low (_TX| 0))& (0+255)
   748     07B0  0084               	movwf	4
   749     07B1  0800               	movf	0,w
   750     07B2  120A  118A  25D9  120A  118A  	fcall	_data
   751     07B7                     l1041:
   752                           
   753                           ;SLAVE.c: 63:                 } data(TXREG);
   754     07B7  3001               	movlw	1
   755     07B8  00FF               	movwf	btemp+1
   756     07B9  087F               	movf	btemp+1,w
   757     07BA  07F8               	addwf	_x,f
   758     07BB                     l1043:
   759     07BB  3005               	movlw	5
   760     07BC  0278               	subwf	_x,w
   761     07BD  1C03               	skipc
   762     07BE  2FC0               	goto	u281
   763     07BF  2FC1               	goto	u280
   764     07C0                     u281:
   765     07C0  2FAE               	goto	l1039
   766     07C1                     u280:
   767     07C1                     l1045:
   768     07C1  1283               	bcf	3,5	;RP0=0, select bank0
   769     07C2  1303               	bcf	3,6	;RP1=0, select bank0
   770     07C3  0819               	movf	25,w	;volatile
   771     07C4  120A  118A  25D9  120A  118A  	fcall	_data
   772     07C9  2E84               	goto	l901
   773     07CA                     l48:
   774     07CA  2E84               	goto	l901
   775     07CB  120A  118A  2800   	ljmp	start
   776     07CE                     __end_of_main:
   777                           
   778                           	psect	text1
   779     0606                     __ptext1:	
   780 ;; *************** function _init *****************
   781 ;; Defined at:
   782 ;;		line 68 in file "SLAVE.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;		None
   785 ;; Auto vars:     Size  Location     Type
   786 ;;		None
   787 ;; Return value:  Size  Location     Type
   788 ;;                  1    wreg      void 
   789 ;; Registers used:
   790 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   791 ;; Tracked objects:
   792 ;;		On entry : 0/0
   793 ;;		On exit  : 0/0
   794 ;;		Unchanged: 0/0
   795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   796 ;;      Params:         0       0       0       0       0
   797 ;;      Locals:         0       0       0       0       0
   798 ;;      Temps:          0       0       0       0       0
   799 ;;      Totals:         0       0       0       0       0
   800 ;;Total ram usage:        0 bytes
   801 ;; Hardware stack levels used: 1
   802 ;; Hardware stack levels required when called: 2
   803 ;; This function calls:
   804 ;;		_cmd
   805 ;;		_delay
   806 ;; This function is called by:
   807 ;;		_main
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811     0606                     _init:	
   812                           ;psect for function _init
   813                           
   814     0606                     l851:	
   815                           ;incstack = 0
   816                           ; Regs used in _init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   817                           
   818                           
   819                           ;SLAVE.c: 69:     TRISC = 0xC0;
   820     0606  30C0               	movlw	192
   821     0607  1683               	bsf	3,5	;RP0=1, select bank1
   822     0608  1303               	bcf	3,6	;RP1=0, select bank1
   823     0609  0087               	movwf	7	;volatile
   824     060A                     l853:
   825                           
   826                           ;SLAVE.c: 70:     TRISD = 0x00;
   827     060A  0188               	clrf	8	;volatile
   828     060B                     l855:
   829                           
   830                           ;SLAVE.c: 71:     TXSTA = 0x20;
   831     060B  3020               	movlw	32
   832     060C  0098               	movwf	24	;volatile
   833     060D                     l857:
   834                           
   835                           ;SLAVE.c: 72:     RCSTA = 0x90;
   836     060D  3090               	movlw	144
   837     060E  1283               	bcf	3,5	;RP0=0, select bank0
   838     060F  1303               	bcf	3,6	;RP1=0, select bank0
   839     0610  0098               	movwf	24	;volatile
   840     0611                     l859:
   841                           
   842                           ;SLAVE.c: 73:     SPBRG = 0x20;
   843     0611  3020               	movlw	32
   844     0612  1683               	bsf	3,5	;RP0=1, select bank1
   845     0613  1303               	bcf	3,6	;RP1=0, select bank1
   846     0614  0099               	movwf	25	;volatile
   847     0615                     l861:
   848                           
   849                           ;SLAVE.c: 74:     cmd(0x38);
   850     0615  3038               	movlw	56
   851     0616  120A  118A  25EE  120A  118A  	fcall	_cmd
   852     061B                     l863:
   853                           
   854                           ;SLAVE.c: 75:     delay(100);
   855     061B  3064               	movlw	100
   856     061C  00F5               	movwf	delay@x
   857     061D  3000               	movlw	0
   858     061E  00F6               	movwf	delay@x+1
   859     061F  120A  118A  25B9  120A  118A  	fcall	_delay
   860     0624                     l865:
   861                           
   862                           ;SLAVE.c: 76:     cmd(0x38);
   863     0624  3038               	movlw	56
   864     0625  120A  118A  25EE  120A  118A  	fcall	_cmd
   865     062A                     l867:
   866                           
   867                           ;SLAVE.c: 77:     delay(100);
   868     062A  3064               	movlw	100
   869     062B  00F5               	movwf	delay@x
   870     062C  3000               	movlw	0
   871     062D  00F6               	movwf	delay@x+1
   872     062E  120A  118A  25B9  120A  118A  	fcall	_delay
   873     0633                     l869:
   874                           
   875                           ;SLAVE.c: 78:     cmd(0x38);
   876     0633  3038               	movlw	56
   877     0634  120A  118A  25EE  120A  118A  	fcall	_cmd
   878     0639                     l871:
   879                           
   880                           ;SLAVE.c: 79:     delay(100);
   881     0639  3064               	movlw	100
   882     063A  00F5               	movwf	delay@x
   883     063B  3000               	movlw	0
   884     063C  00F6               	movwf	delay@x+1
   885     063D  120A  118A  25B9  120A  118A  	fcall	_delay
   886     0642                     l873:
   887                           
   888                           ;SLAVE.c: 80:     cmd(0x38);
   889     0642  3038               	movlw	56
   890     0643  120A  118A  25EE  120A  118A  	fcall	_cmd
   891     0648                     l875:
   892                           
   893                           ;SLAVE.c: 81:     delay(100);
   894     0648  3064               	movlw	100
   895     0649  00F5               	movwf	delay@x
   896     064A  3000               	movlw	0
   897     064B  00F6               	movwf	delay@x+1
   898     064C  120A  118A  25B9  120A  118A  	fcall	_delay
   899     0651                     l877:
   900                           
   901                           ;SLAVE.c: 82:     cmd(0x0C);
   902     0651  300C               	movlw	12
   903     0652  120A  118A  25EE  120A  118A  	fcall	_cmd
   904     0657                     l879:
   905                           
   906                           ;SLAVE.c: 83:     delay(100);
   907     0657  3064               	movlw	100
   908     0658  00F5               	movwf	delay@x
   909     0659  3000               	movlw	0
   910     065A  00F6               	movwf	delay@x+1
   911     065B  120A  118A  25B9  120A  118A  	fcall	_delay
   912     0660                     l881:
   913                           
   914                           ;SLAVE.c: 84:     cmd(0x06);
   915     0660  3006               	movlw	6
   916     0661  120A  118A  25EE  120A  118A  	fcall	_cmd
   917     0666                     l883:
   918                           
   919                           ;SLAVE.c: 85:     delay(100);
   920     0666  3064               	movlw	100
   921     0667  00F5               	movwf	delay@x
   922     0668  3000               	movlw	0
   923     0669  00F6               	movwf	delay@x+1
   924     066A  120A  118A  25B9  120A  118A  	fcall	_delay
   925     066F                     l885:
   926                           
   927                           ;SLAVE.c: 86:     cmd(0x01);
   928     066F  3001               	movlw	1
   929     0670  120A  118A  25EE  120A  118A  	fcall	_cmd
   930     0675                     l887:
   931                           
   932                           ;SLAVE.c: 87:     delay(100);
   933     0675  3064               	movlw	100
   934     0676  00F5               	movwf	delay@x
   935     0677  3000               	movlw	0
   936     0678  00F6               	movwf	delay@x+1
   937     0679  120A  118A  25B9  120A  118A  	fcall	_delay
   938     067E                     l71:
   939     067E  0008               	return
   940     067F                     __end_of_init:
   941                           
   942                           	psect	text2
   943     05EE                     __ptext2:	
   944 ;; *************** function _cmd *****************
   945 ;; Defined at:
   946 ;;		line 89 in file "SLAVE.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  i               1    wreg     unsigned char 
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  i               1    2[COMMON] unsigned char 
   951 ;; Return value:  Size  Location     Type
   952 ;;                  1    wreg      void 
   953 ;; Registers used:
   954 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   955 ;; Tracked objects:
   956 ;;		On entry : 0/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   960 ;;      Params:         0       0       0       0       0
   961 ;;      Locals:         1       0       0       0       0
   962 ;;      Temps:          0       0       0       0       0
   963 ;;      Totals:         1       0       0       0       0
   964 ;;Total ram usage:        1 bytes
   965 ;; Hardware stack levels used: 1
   966 ;; Hardware stack levels required when called: 1
   967 ;; This function calls:
   968 ;;		_delay
   969 ;; This function is called by:
   970 ;;		_main
   971 ;;		_init
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975     05EE                     _cmd:	
   976                           ;psect for function _cmd
   977                           
   978                           
   979                           ;incstack = 0
   980                           ; Regs used in _cmd: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   981                           ;cmd@i stored from wreg
   982     05EE  00F7               	movwf	cmd@i
   983     05EF                     l841:
   984                           
   985                           ;SLAVE.c: 90:     PORTC &= 0xF7;
   986     05EF  30F7               	movlw	247
   987     05F0  00FF               	movwf	btemp+1
   988     05F1  087F               	movf	btemp+1,w
   989     05F2  1283               	bcf	3,5	;RP0=0, select bank0
   990     05F3  1303               	bcf	3,6	;RP1=0, select bank0
   991     05F4  0587               	andwf	7,f	;volatile
   992     05F5                     l843:
   993                           
   994                           ;SLAVE.c: 91:     PORTD = i;
   995     05F5  0877               	movf	cmd@i,w
   996     05F6  0088               	movwf	8	;volatile
   997     05F7                     l845:
   998                           
   999                           ;SLAVE.c: 92:     PORTC |= 0x01;
  1000     05F7  1407               	bsf	7,0	;volatile
  1001     05F8                     l847:
  1002                           
  1003                           ;SLAVE.c: 93:     PORTC &= ~(0x01);
  1004     05F8  30FE               	movlw	254
  1005     05F9  00FF               	movwf	btemp+1
  1006     05FA  087F               	movf	btemp+1,w
  1007     05FB  0587               	andwf	7,f	;volatile
  1008     05FC                     l849:
  1009                           
  1010                           ;SLAVE.c: 94:     delay(100);
  1011     05FC  3064               	movlw	100
  1012     05FD  00F5               	movwf	delay@x
  1013     05FE  3000               	movlw	0
  1014     05FF  00F6               	movwf	delay@x+1
  1015     0600  120A  118A  25B9  120A  118A  	fcall	_delay
  1016     0605                     l74:
  1017     0605  0008               	return
  1018     0606                     __end_of_cmd:
  1019                           
  1020                           	psect	text3
  1021     05D9                     __ptext3:	
  1022 ;; *************** function _data *****************
  1023 ;; Defined at:
  1024 ;;		line 96 in file "SLAVE.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;  i               1    wreg     unsigned char 
  1027 ;; Auto vars:     Size  Location     Type
  1028 ;;  i               1    2[COMMON] unsigned char 
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  1    wreg      void 
  1031 ;; Registers used:
  1032 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1038 ;;      Params:         0       0       0       0       0
  1039 ;;      Locals:         1       0       0       0       0
  1040 ;;      Temps:          0       0       0       0       0
  1041 ;;      Totals:         1       0       0       0       0
  1042 ;;Total ram usage:        1 bytes
  1043 ;; Hardware stack levels used: 1
  1044 ;; Hardware stack levels required when called: 1
  1045 ;; This function calls:
  1046 ;;		_delay
  1047 ;; This function is called by:
  1048 ;;		_main
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052     05D9                     _data:	
  1053                           ;psect for function _data
  1054                           
  1055                           
  1056                           ;incstack = 0
  1057                           ; Regs used in _data: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1058                           ;data@i stored from wreg
  1059     05D9  00F7               	movwf	data@i
  1060     05DA                     l889:
  1061                           
  1062                           ;SLAVE.c: 97:     PORTC |= 0x08;
  1063     05DA  1283               	bcf	3,5	;RP0=0, select bank0
  1064     05DB  1303               	bcf	3,6	;RP1=0, select bank0
  1065     05DC  1587               	bsf	7,3	;volatile
  1066     05DD                     l891:
  1067                           
  1068                           ;SLAVE.c: 98:     PORTD = i;
  1069     05DD  0877               	movf	data@i,w
  1070     05DE  0088               	movwf	8	;volatile
  1071     05DF                     l893:
  1072                           
  1073                           ;SLAVE.c: 99:     PORTC |= 0x01;
  1074     05DF  1407               	bsf	7,0	;volatile
  1075     05E0                     l895:
  1076                           
  1077                           ;SLAVE.c: 100:     PORTC &= ~(0x01);
  1078     05E0  30FE               	movlw	254
  1079     05E1  00FF               	movwf	btemp+1
  1080     05E2  087F               	movf	btemp+1,w
  1081     05E3  0587               	andwf	7,f	;volatile
  1082     05E4                     l897:
  1083                           
  1084                           ;SLAVE.c: 101:     delay(100);
  1085     05E4  3064               	movlw	100
  1086     05E5  00F5               	movwf	delay@x
  1087     05E6  3000               	movlw	0
  1088     05E7  00F6               	movwf	delay@x+1
  1089     05E8  120A  118A  25B9  120A  118A  	fcall	_delay
  1090     05ED                     l77:
  1091     05ED  0008               	return
  1092     05EE                     __end_of_data:
  1093                           
  1094                           	psect	text4
  1095     05B9                     __ptext4:	
  1096 ;; *************** function _delay *****************
  1097 ;; Defined at:
  1098 ;;		line 103 in file "SLAVE.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;  x               2    0[COMMON] unsigned int 
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;		None
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      void 
  1105 ;; Registers used:
  1106 ;;		wreg, status,2, status,0
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1112 ;;      Params:         2       0       0       0       0
  1113 ;;      Locals:         0       0       0       0       0
  1114 ;;      Temps:          0       0       0       0       0
  1115 ;;      Totals:         2       0       0       0       0
  1116 ;;Total ram usage:        2 bytes
  1117 ;; Hardware stack levels used: 1
  1118 ;; This function calls:
  1119 ;;		Nothing
  1120 ;; This function is called by:
  1121 ;;		_init
  1122 ;;		_cmd
  1123 ;;		_data
  1124 ;; This function uses a non-reentrant model
  1125 ;;
  1126                           
  1127     05B9                     _delay:	
  1128                           ;psect for function _delay
  1129                           
  1130     05B9                     l837:	
  1131                           ;incstack = 0
  1132                           ; Regs used in _delay: [wreg+status,2+status,0]
  1133                           
  1134     05B9                     l839:	
  1135                           ;SLAVE.c: 104:     while(--x);
  1136                           
  1137     05B9  3001               	movlw	1
  1138     05BA  02F5               	subwf	delay@x,f
  1139     05BB  3000               	movlw	0
  1140     05BC  1C03               	skipc
  1141     05BD  03F6               	decf	delay@x+1,f
  1142     05BE  02F6               	subwf	delay@x+1,f
  1143     05BF  0875               	movf	delay@x,w
  1144     05C0  0476               	iorwf	delay@x+1,w
  1145     05C1  1D03               	btfss	3,2
  1146     05C2  2DC4               	goto	u151
  1147     05C3  2DC5               	goto	u150
  1148     05C4                     u151:
  1149     05C4  2DB9               	goto	l839
  1150     05C5                     u150:
  1151     05C5                     l83:
  1152     05C5  0008               	return
  1153     05C6                     __end_of_delay:
  1154     007E                     btemp	set	126	;btemp
  1155     007E                     wtemp0	set	126
  1156                           
  1157                           	psect	config
  1158                           
  1159                           ;Config register CONFIG @ 0x2007
  1160                           ;	Oscillator Selection bits
  1161                           ;	FOSC = HS, HS oscillator
  1162                           ;	Watchdog Timer Enable bit
  1163                           ;	WDTE = ON, WDT enabled
  1164                           ;	Power-up Timer Enable bit
  1165                           ;	PWRTE = OFF, PWRT disabled
  1166                           ;	Brown-out Reset Enable bit
  1167                           ;	BOREN = ON, BOR enabled
  1168                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1169                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1170                           ;	Data EEPROM Memory Code Protection bit
  1171                           ;	CPD = OFF, Data EEPROM code protection off
  1172                           ;	Flash Program Memory Write Enable bits
  1173                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1174                           ;	In-Circuit Debugger Mode bit
  1175                           ;	DEBUG = 0x1, unprogrammed default
  1176                           ;	Flash Program Memory Code Protection bit
  1177                           ;	CP = OFF, Code protection off
  1178     2007                     	org	8199
  1179     2007  3FFE               	dw	16382

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      3      10
    BANK0            80      0       5
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_cmd
    _main->_data
    _init->_cmd
    _cmd->_delay
    _data->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2890
                                _cmd
                               _data
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0    1434
                                _cmd
                              _delay
 ---------------------------------------------------------------------------------
 (2) _cmd                                                  1     1      0     728
                                              2 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _data                                                 1     1      0     728
                                              2 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                2     0      2     706
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cmd
     _delay
   _data
     _delay
   _init
     _cmd
     _delay

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       5       5        6.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      3       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       F      12        0.0%
ABS                  0      0       F       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Sat May 11 17:18:10 2024

                      _x 0078                        pc 0002                       l71 067E  
                     l48 07CA                       l74 0605                       l83 05C5  
                     l77 05ED                       _RX 0020                       _TX 0070  
                     fsr 0004                      l901 0684                      l903 068A  
                    l841 05EF                      l921 06B3                      l913 0697  
                    l905 0690                      l843 05F5                      l851 0606  
                    l931 06BE                      l923 06B7                      l915 06A1  
                    l907 0696                      l837 05B9                      l845 05F7  
                    l861 0615                      l853 060A                      l941 06E0  
                    l933 06C7                      l925 06BD                      l917 06A5  
                    l839 05B9                      l847 05F8                      l871 0639  
                    l863 061B                      l855 060B                      l951 06F1  
                    l943 06E6                      l935 06CB                      l919 06AB  
                    l849 05FC                      l881 0660                      l873 0642  
                    l865 0624                      l857 060D                      l961 070D  
                    l953 06F5                      l937 06D1                      l891 05DD  
                    l883 0666                      l875 0648                      l867 062A  
                    l859 0611                      l971 071B                      l955 06FB  
                    l939 06DA                      l893 05DF                      l885 066F  
                    l877 0651                      l869 0633                      l973 0721  
                    l957 0703                      l949 06E7                      l895 05E0  
                    l887 0675                      l879 0657                      l991 074B  
                    l967 070E                      l959 0707                      l975 072A  
                    l897 05E4                      l889 05DA                      l993 0753  
                    l985 0737                      l977 0730                      l969 0717  
                    l995 0757                      l987 0741                      l979 0736  
                    l899 067F                      l997 075D                      l989 0745  
                    u200 06E0                      u201 06DF                      u210 06FB  
                    u211 06FA                      u220 0721                      u221 0720  
                    u150 05C5                      u230 0730                      u151 05C4  
                    u231 072F                      u240 074B                      u160 068A  
                    u241 074A                      u161 0689                      u250 0771  
                    u170 0690                      u251 0770                      u171 068F  
                    u260 0780                      u180 06AB                      u261 077F  
                    u181 06AA                      u270 079B                      u190 06D1  
                    u271 079A                      u191 06D0                      u280 07C1  
                    u281 07C0                      _cmd 05EE                      _val 0079  
                    fsr0 0004                      indf 0000                     l1003 075E  
                   l1011 077A                     l1021 0787                     l1013 0780  
                   l1005 0767                     l1031 07A7                     l1023 0791  
                   l1015 0786                     l1007 076B                     l1041 07B7  
                   l1033 07AD                     l1025 0795                     l1009 0771  
                   l1043 07BB                     l1027 079B                     l1045 07C1  
                   l1029 07A3                     l1039 07AE                     ?_cmd 0075  
                   _PIR1 000C                     _data 05D9                     cmd@i 0077  
                   _main 067F                     _init 0606                     btemp 007E  
                   start 0000                    ??_cmd 0077                    ?_data 0075  
                  ?_main 0075                    ?_init 0075                    _RCREG 001A  
                  _RCSTA 0018                    _SPBRG 0099                    _PORTC 0007  
                  _PORTD 0008                    _TRISC 0087                    _TRISD 0088  
                  _TXREG 0019                    _TXSTA 0098                    _delay 05B9  
                  data@i 0077                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07CE             __end_of_data 05EE  
           __end_of_main 07CE             __end_of_init 067F                   ??_data 0077  
                 ??_main 0078                   ??_init 0078                   ?_delay 0075  
                 delay@x 0075             __pdataCOMMON 0070  __end_of__initialization 07FC  
         __pcstackCOMMON 0075             __pidataBANK0 05AF            __end_of_delay 05C6  
                ??_delay 0077               __pmaintext 067F                  __ptext1 0606  
                __ptext2 05EE                  __ptext3 05D9                  __ptext4 05B9  
   end_of_initialization 07FC            __pidataCOMMON 05B4      start_initialization 07CE  
            __end_of_cmd 0606               init_fetch0 05C6              __pdataBANK0 0020  
            __pbssCOMMON 0078                ___latbits 0002                 init_ram0 05CA  
