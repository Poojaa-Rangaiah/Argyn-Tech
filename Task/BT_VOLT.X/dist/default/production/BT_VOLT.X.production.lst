

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Tue May 28 19:16:50 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    26                           	dabs	1,0x7E,2
    27     0000                     
    28                           ; Generated 22/03/2023 GMT
    29                           ; 
    30                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution. Publication is not required when
    44                           ;        this file is used in an embedded application.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F877A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62     0000                     	;# 
    63     0001                     	;# 
    64     0002                     	;# 
    65     0003                     	;# 
    66     0004                     	;# 
    67     0005                     	;# 
    68     0006                     	;# 
    69     0007                     	;# 
    70     0008                     	;# 
    71     0009                     	;# 
    72     000A                     	;# 
    73     000B                     	;# 
    74     000C                     	;# 
    75     000D                     	;# 
    76     000E                     	;# 
    77     000E                     	;# 
    78     000F                     	;# 
    79     0010                     	;# 
    80     0011                     	;# 
    81     0012                     	;# 
    82     0013                     	;# 
    83     0014                     	;# 
    84     0015                     	;# 
    85     0015                     	;# 
    86     0016                     	;# 
    87     0017                     	;# 
    88     0018                     	;# 
    89     0019                     	;# 
    90     001A                     	;# 
    91     001B                     	;# 
    92     001B                     	;# 
    93     001C                     	;# 
    94     001D                     	;# 
    95     001E                     	;# 
    96     001F                     	;# 
    97     0081                     	;# 
    98     0085                     	;# 
    99     0086                     	;# 
   100     0087                     	;# 
   101     0088                     	;# 
   102     0089                     	;# 
   103     008C                     	;# 
   104     008D                     	;# 
   105     008E                     	;# 
   106     0091                     	;# 
   107     0092                     	;# 
   108     0093                     	;# 
   109     0094                     	;# 
   110     0098                     	;# 
   111     0099                     	;# 
   112     009C                     	;# 
   113     009D                     	;# 
   114     009E                     	;# 
   115     009F                     	;# 
   116     010C                     	;# 
   117     010D                     	;# 
   118     010E                     	;# 
   119     010F                     	;# 
   120     018C                     	;# 
   121     018D                     	;# 
   122     0000                     	;# 
   123     0001                     	;# 
   124     0002                     	;# 
   125     0003                     	;# 
   126     0004                     	;# 
   127     0005                     	;# 
   128     0006                     	;# 
   129     0007                     	;# 
   130     0008                     	;# 
   131     0009                     	;# 
   132     000A                     	;# 
   133     000B                     	;# 
   134     000C                     	;# 
   135     000D                     	;# 
   136     000E                     	;# 
   137     000E                     	;# 
   138     000F                     	;# 
   139     0010                     	;# 
   140     0011                     	;# 
   141     0012                     	;# 
   142     0013                     	;# 
   143     0014                     	;# 
   144     0015                     	;# 
   145     0015                     	;# 
   146     0016                     	;# 
   147     0017                     	;# 
   148     0018                     	;# 
   149     0019                     	;# 
   150     001A                     	;# 
   151     001B                     	;# 
   152     001B                     	;# 
   153     001C                     	;# 
   154     001D                     	;# 
   155     001E                     	;# 
   156     001F                     	;# 
   157     0081                     	;# 
   158     0085                     	;# 
   159     0086                     	;# 
   160     0087                     	;# 
   161     0088                     	;# 
   162     0089                     	;# 
   163     008C                     	;# 
   164     008D                     	;# 
   165     008E                     	;# 
   166     0091                     	;# 
   167     0092                     	;# 
   168     0093                     	;# 
   169     0094                     	;# 
   170     0098                     	;# 
   171     0099                     	;# 
   172     009C                     	;# 
   173     009D                     	;# 
   174     009E                     	;# 
   175     009F                     	;# 
   176     010C                     	;# 
   177     010D                     	;# 
   178     010E                     	;# 
   179     010F                     	;# 
   180     018C                     	;# 
   181     018D                     	;# 
   182                           
   183                           	psect	idataBANK0
   184     053D                     __pidataBANK0:
   185                           
   186                           ;initializer for _high
   187     053D  3442               	retlw	66
   188     053E  3441               	retlw	65
   189     053F  3454               	retlw	84
   190     0540  3420               	retlw	32
   191     0541  3448               	retlw	72
   192     0542  3449               	retlw	73
   193     0543  3447               	retlw	71
   194     0544  3448               	retlw	72
   195     0545  3420               	retlw	32
   196     0546  3420               	retlw	32
   197     0547  3400               	retlw	0
   198     0548  3400               	retlw	0
   199     0549  3400               	retlw	0
   200     054A  3400               	retlw	0
   201     054B  3400               	retlw	0
   202                           
   203                           ;initializer for _norm
   204     054C  3442               	retlw	66
   205     054D  3441               	retlw	65
   206     054E  3454               	retlw	84
   207     054F  3420               	retlw	32
   208     0550  344E               	retlw	78
   209     0551  344F               	retlw	79
   210     0552  3452               	retlw	82
   211     0553  344D               	retlw	77
   212     0554  3441               	retlw	65
   213     0555  344C               	retlw	76
   214     0556  3400               	retlw	0
   215     0557  3400               	retlw	0
   216     0558  3400               	retlw	0
   217     0559  3400               	retlw	0
   218     055A  3400               	retlw	0
   219                           
   220                           ;initializer for _low
   221     055B  3442               	retlw	66
   222     055C  3441               	retlw	65
   223     055D  3454               	retlw	84
   224     055E  3420               	retlw	32
   225     055F  344C               	retlw	76
   226     0560  344F               	retlw	79
   227     0561  3457               	retlw	87
   228     0562  3420               	retlw	32
   229     0563  3420               	retlw	32
   230     0564  3420               	retlw	32
   231     0565  3400               	retlw	0
   232     0566  3400               	retlw	0
   233     0567  3400               	retlw	0
   234     0568  3400               	retlw	0
   235     0569  3400               	retlw	0
   236                           
   237                           	psect	idataBANK1
   238     051F                     __pidataBANK1:
   239                           
   240                           ;initializer for _arr
   241     051F  3442               	retlw	66
   242     0520  3441               	retlw	65
   243     0521  3454               	retlw	84
   244     0522  3420               	retlw	32
   245     0523  3456               	retlw	86
   246     0524  344F               	retlw	79
   247     0525  344C               	retlw	76
   248     0526  3454               	retlw	84
   249     0527  343A               	retlw	58
   250     0528  3420               	retlw	32
   251     0529  3400               	retlw	0
   252     052A  3400               	retlw	0
   253     052B  3400               	retlw	0
   254     052C  3400               	retlw	0
   255     052D  3400               	retlw	0
   256     052E  3400               	retlw	0
   257     052F  3400               	retlw	0
   258     0530  3400               	retlw	0
   259     0531  3400               	retlw	0
   260     0532  3400               	retlw	0
   261     0533  3400               	retlw	0
   262     0534  3400               	retlw	0
   263     0535  3400               	retlw	0
   264     0536  3400               	retlw	0
   265     0537  3400               	retlw	0
   266     0538  3400               	retlw	0
   267     0539  3400               	retlw	0
   268     053A  3400               	retlw	0
   269     053B  3400               	retlw	0
   270     053C  3400               	retlw	0
   271                           
   272                           	psect	nvBANK0
   273     0053                     __pnvBANK0:
   274     0053                     _n:
   275     0053                     	ds	2
   276     0055                     _j:
   277     0055                     	ds	2
   278     0057                     _val:
   279     0057                     	ds	1
   280     0019                     _TXREG	set	25
   281     0018                     _RCSTA	set	24
   282     0006                     _PORTB	set	6
   283     0099                     _SPBRG	set	153
   284     0098                     _TXSTA	set	152
   285     0081                     _OPTION_REG	set	129
   286     0086                     _TRISB	set	134
   287     0088                     _TRISD	set	136
   288     0087                     _TRISC	set	135
   289                           
   290                           	psect	cinit
   291     07DA                     start_initialization:	
   292                           ; #config settings
   293                           
   294     07DA                     __initialization:
   295                           
   296                           ; Initialize objects allocated to BANK1
   297     07DA  1383               	bcf	3,7	;select IRP bank0
   298     07DB  30BE               	movlw	low (__pdataBANK1+30)
   299     07DC  00FD               	movwf	btemp+-1
   300     07DD  3005               	movlw	high __pidataBANK1
   301     07DE  00FE               	movwf	btemp
   302     07DF  301F               	movlw	low __pidataBANK1
   303     07E0  00FF               	movwf	btemp+1
   304     07E1  30A0               	movlw	low __pdataBANK1
   305     07E2  0084               	movwf	4
   306     07E3  120A  118A  24DE  120A  118A  	fcall	init_ram0
   307                           
   308                           ; Initialize objects allocated to BANK0
   309     07E8  304D               	movlw	low (__pdataBANK0+45)
   310     07E9  00FD               	movwf	btemp+-1
   311     07EA  3005               	movlw	high __pidataBANK0
   312     07EB  00FE               	movwf	btemp
   313     07EC  303D               	movlw	low __pidataBANK0
   314     07ED  00FF               	movwf	btemp+1
   315     07EE  3020               	movlw	low __pdataBANK0
   316     07EF  0084               	movwf	4
   317     07F0  120A  118A  24DE  120A  118A  	fcall	init_ram0
   318                           
   319                           ; Clear objects allocated to BANK0
   320     07F5  01CD               	clrf	__pbssBANK0& (0+127)
   321     07F6  01CE               	clrf	(__pbssBANK0+1)& (0+127)
   322     07F7  01CF               	clrf	(__pbssBANK0+2)& (0+127)
   323     07F8  01D0               	clrf	(__pbssBANK0+3)& (0+127)
   324     07F9  01D1               	clrf	(__pbssBANK0+4)& (0+127)
   325     07FA  01D2               	clrf	(__pbssBANK0+5)& (0+127)
   326                           
   327                           ; Clear objects allocated to COMMON
   328     07FB  01FD               	clrf	__pbssCOMMON& (0+127)
   329     07FC                     end_of_initialization:	
   330                           ;End of C runtime variable initialization code
   331                           
   332     07FC                     __end_of__initialization:
   333     07FC  0183               	clrf	3
   334     07FD  120A  118A  2D02   	ljmp	_main	;jump to C main() function
   335                           
   336                           	psect	bssCOMMON
   337     007D                     __pbssCOMMON:
   338     007D                     _x:
   339     007D                     	ds	1
   340                           
   341                           	psect	bssBANK0
   342     004D                     __pbssBANK0:
   343     004D                     _d0:
   344     004D                     	ds	2
   345     004F                     _d1:
   346     004F                     	ds	2
   347     0051                     _d2:
   348     0051                     	ds	2
   349                           
   350                           	psect	dataBANK0
   351     0020                     __pdataBANK0:
   352     0020                     _high:
   353     0020                     	ds	15
   354     002F                     _norm:
   355     002F                     	ds	15
   356     003E                     _low:
   357     003E                     	ds	15
   358                           
   359                           	psect	dataBANK1
   360     00A0                     __pdataBANK1:
   361     00A0                     _arr:
   362     00A0                     	ds	30
   363                           
   364                           	psect	inittext
   365     04DA                     init_fetch0:	
   366                           ;	Called with low address in FSR and high address in W
   367                           
   368     04DA  087E               	movf	btemp,w
   369     04DB  008A               	movwf	10
   370     04DC  087F               	movf	btemp+1,w
   371     04DD  0082               	movwf	2
   372     04DE                     init_ram0:	
   373                           ;Called with:
   374                           ;	high address of idata address in btemp 
   375                           ;	low address of idata address in btemp+1 
   376                           ;	low address of data in FSR
   377                           ;	high address + 1 of data in btemp-1
   378                           
   379     04DE  120A  118A  24DA  120A  118A  	fcall	init_fetch0
   380     04E3  0080               	movwf	0
   381     04E4  0A84               	incf	4,f
   382     04E5  0804               	movf	4,w
   383     04E6  067D               	xorwf	btemp+-1,w
   384     04E7  1903               	btfsc	3,2
   385     04E8  3400               	retlw	0
   386     04E9  0AFF               	incf	btemp+1,f
   387     04EA  1903               	btfsc	3,2
   388     04EB  0AFE               	incf	btemp,f
   389     04EC  2CDE               	goto	init_ram0
   390                           
   391                           	psect	cstackCOMMON
   392     0070                     __pcstackCOMMON:
   393     0070                     ?_init:
   394     0070                     ??_init:	
   395                           ; 1 bytes @ 0x0
   396                           
   397     0070                     ?_UART_init:	
   398                           ; 1 bytes @ 0x0
   399                           
   400     0070                     ??_UART_init:	
   401                           ; 1 bytes @ 0x0
   402                           
   403     0070                     ?_keyscan:	
   404                           ; 1 bytes @ 0x0
   405                           
   406     0070                     ?_UART_send:	
   407                           ; 1 bytes @ 0x0
   408                           
   409     0070                     ??_UART_send:	
   410                           ; 1 bytes @ 0x0
   411                           
   412     0070                     ?_UART_newline:	
   413                           ; 1 bytes @ 0x0
   414                           
   415     0070                     ??_UART_newline:	
   416                           ; 1 bytes @ 0x0
   417                           
   418     0070                     ?_main:	
   419                           ; 1 bytes @ 0x0
   420                           
   421     0070                     ?___bmul:	
   422                           ; 1 bytes @ 0x0
   423                           
   424     0070                     ?___lwdiv:	
   425                           ; 1 bytes @ 0x0
   426                           
   427     0070                     ___bmul@multiplicand:	
   428                           ; 2 bytes @ 0x0
   429                           
   430     0070                     ___lwdiv@divisor:	
   431                           ; 1 bytes @ 0x0
   432                           
   433                           
   434                           ; 2 bytes @ 0x0
   435     0070                     	ds	1
   436     0071                     ??___bmul:
   437     0071                     ___bmul@product:	
   438                           ; 1 bytes @ 0x1
   439                           
   440                           
   441                           ; 1 bytes @ 0x1
   442     0071                     	ds	1
   443     0072                     UART_send@data:
   444     0072                     ___bmul@multiplier:	
   445                           ; 1 bytes @ 0x2
   446                           
   447     0072                     ___lwdiv@dividend:	
   448                           ; 1 bytes @ 0x2
   449                           
   450                           
   451                           ; 2 bytes @ 0x2
   452     0072                     	ds	1
   453     0073                     ?_Bt_Com:
   454     0073                     Bt_Com@j:	
   455                           ; 1 bytes @ 0x3
   456                           
   457                           
   458                           ; 2 bytes @ 0x3
   459     0073                     	ds	1
   460     0074                     ??___lwdiv:
   461     0074                     ___lwdiv@quotient:	
   462                           ; 1 bytes @ 0x4
   463                           
   464                           
   465                           ; 2 bytes @ 0x4
   466     0074                     	ds	1
   467     0075                     ??_Bt_Com:
   468                           
   469                           ; 1 bytes @ 0x5
   470     0075                     	ds	1
   471     0076                     ___lwdiv@counter:
   472                           
   473                           ; 1 bytes @ 0x6
   474     0076                     	ds	1
   475     0077                     ?_LCDOutput:
   476     0077                     LCDOutput@i:	
   477                           ; 1 bytes @ 0x7
   478                           
   479                           
   480                           ; 2 bytes @ 0x7
   481     0077                     	ds	2
   482     0079                     LCDOutput@k:
   483                           
   484                           ; 2 bytes @ 0x9
   485     0079                     	ds	2
   486     007B                     ??_LCDOutput:
   487                           
   488                           ; 1 bytes @ 0xB
   489     007B                     	ds	2
   490     007D                     ??_main:
   491                           
   492                           	psect	cstackBANK0
   493     0058                     __pcstackBANK0:	
   494                           ; 1 bytes @ 0xD
   495                           
   496     0058                     ??_keyscan:
   497                           
   498                           ; 1 bytes @ 0x0
   499     0058                     	ds	3
   500                           
   501                           	psect	maintext
   502     0502                     __pmaintext:	
   503 ;;
   504 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   505 ;;
   506 ;; *************** function _main *****************
   507 ;; Defined at:
   508 ;;		line 34 in file "Battery.c"
   509 ;; Parameters:    Size  Location     Type
   510 ;;		None
   511 ;; Auto vars:     Size  Location     Type
   512 ;;		None
   513 ;; Return value:  Size  Location     Type
   514 ;;                  1    wreg      void 
   515 ;; Registers used:
   516 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   517 ;; Tracked objects:
   518 ;;		On entry : B00/0
   519 ;;		On exit  : 0/0
   520 ;;		Unchanged: 0/0
   521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   522 ;;      Params:         0       0       0       0       0
   523 ;;      Locals:         0       0       0       0       0
   524 ;;      Temps:          0       0       0       0       0
   525 ;;      Totals:         0       0       0       0       0
   526 ;;Total ram usage:        0 bytes
   527 ;; Hardware stack levels required when called: 3
   528 ;; This function calls:
   529 ;;		_UART_init
   530 ;;		_init
   531 ;;		_keyscan
   532 ;; This function is called by:
   533 ;;		Startup code after reset
   534 ;; This function uses a non-reentrant model
   535 ;;
   536                           
   537     0502                     _main:	
   538                           ;psect for function _main
   539                           
   540     0502                     l1143:	
   541                           ;incstack = 0
   542                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   543                           
   544                           
   545                           ;Battery.c: 35:     init();
   546     0502  120A  118A  24B1  120A  118A  	fcall	_init
   547     0507                     l1145:
   548                           
   549                           ;Battery.c: 36:     UART_init();
   550     0507  120A  118A  24BC  120A  118A  	fcall	_UART_init
   551     050C                     l1147:
   552                           
   553                           ;Battery.c: 37:     j=15;
   554     050C  300F               	movlw	15
   555     050D  1283               	bcf	3,5	;RP0=0, select bank0
   556     050E  1303               	bcf	3,6	;RP1=0, select bank0
   557     050F  00D5               	movwf	_j
   558     0510  3000               	movlw	0
   559     0511  00D6               	movwf	_j+1
   560     0512                     l1149:
   561                           
   562                           ;Battery.c: 38:     n=5;
   563     0512  3005               	movlw	5
   564     0513  00D3               	movwf	_n
   565     0514  3000               	movlw	0
   566     0515  00D4               	movwf	_n+1
   567     0516                     l1151:
   568                           
   569                           ;Battery.c: 40:         keyscan();
   570     0516  120A  118A  26CE  120A  118A  	fcall	_keyscan
   571     051B  2D16               	goto	l1151
   572     051C  120A  118A  2800   	ljmp	start
   573     051F                     __end_of_main:
   574                           
   575                           	psect	text1
   576     06CE                     __ptext1:	
   577 ;; *************** function _keyscan *****************
   578 ;; Defined at:
   579 ;;		line 44 in file "Battery.c"
   580 ;; Parameters:    Size  Location     Type
   581 ;;		None
   582 ;; Auto vars:     Size  Location     Type
   583 ;;		None
   584 ;; Return value:  Size  Location     Type
   585 ;;                  1    wreg      void 
   586 ;; Registers used:
   587 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   588 ;; Tracked objects:
   589 ;;		On entry : 0/0
   590 ;;		On exit  : 0/0
   591 ;;		Unchanged: 0/0
   592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   593 ;;      Params:         0       0       0       0       0
   594 ;;      Locals:         0       0       0       0       0
   595 ;;      Temps:          0       3       0       0       0
   596 ;;      Totals:         0       3       0       0       0
   597 ;;Total ram usage:        3 bytes
   598 ;; Hardware stack levels used: 1
   599 ;; Hardware stack levels required when called: 2
   600 ;; This function calls:
   601 ;;		_Bt_Com
   602 ;;		_LCDOutput
   603 ;;		_UART_newline
   604 ;;		_UART_send
   605 ;; This function is called by:
   606 ;;		_main
   607 ;; This function uses a non-reentrant model
   608 ;;
   609                           
   610     06CE                     _keyscan:	
   611                           ;psect for function _keyscan
   612                           
   613     06CE                     l1055:	
   614                           ;incstack = 0
   615                           ; Regs used in _keyscan: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   616                           
   617                           
   618                           ;Battery.c: 45:     val = PORTB&0xF0;
   619     06CE  1283               	bcf	3,5	;RP0=0, select bank0
   620     06CF  1303               	bcf	3,6	;RP1=0, select bank0
   621     06D0  0806               	movf	6,w	;volatile
   622     06D1  39F0               	andlw	240
   623     06D2  00D7               	movwf	_val
   624                           
   625                           ;Battery.c: 46:     switch(val) {
   626     06D3  2FC3               	goto	l1135
   627     06D4                     l1057:
   628                           
   629                           ;Battery.c: 50:             for(x=0;x<=9;x++) {
   630     06D4  01FD               	clrf	_x
   631     06D5                     l1059:
   632     06D5  300A               	movlw	10
   633     06D6  027D               	subwf	_x,w
   634     06D7  1C03               	skipc
   635     06D8  2EDA               	goto	u621
   636     06D9  2EDB               	goto	u620
   637     06DA                     u621:
   638     06DA  2EDC               	goto	l1063
   639     06DB                     u620:
   640     06DB  2EEB               	goto	l1069
   641     06DC                     l1063:
   642                           
   643                           ;Battery.c: 51:                 UART_send(arr[x]);
   644     06DC  087D               	movf	_x,w
   645     06DD  3EA0               	addlw	(low (_arr| 0))& (0+255)
   646     06DE  0084               	movwf	4
   647     06DF  1383               	bcf	3,7	;select IRP bank1
   648     06E0  0800               	movf	0,w
   649     06E1  120A  118A  24CB  120A  118A  	fcall	_UART_send
   650     06E6                     l1065:
   651                           
   652                           ;Battery.c: 52:             }
   653     06E6  3001               	movlw	1
   654     06E7  00FF               	movwf	btemp+1
   655     06E8  087F               	movf	btemp+1,w
   656     06E9  07FD               	addwf	_x,f
   657     06EA  2ED5               	goto	l1059
   658     06EB                     l1069:
   659                           
   660                           ;Battery.c: 56:             LCDOutput(j,n);
   661     06EB  1283               	bcf	3,5	;RP0=0, select bank0
   662     06EC  1303               	bcf	3,6	;RP1=0, select bank0
   663     06ED  0856               	movf	_j+1,w
   664     06EE  00F8               	movwf	LCDOutput@i+1
   665     06EF  0855               	movf	_j,w
   666     06F0  00F7               	movwf	LCDOutput@i
   667     06F1  0854               	movf	_n+1,w
   668     06F2  00FA               	movwf	LCDOutput@k+1
   669     06F3  0853               	movf	_n,w
   670     06F4  00F9               	movwf	LCDOutput@k
   671     06F5  120A  118A  25AE  120A  118A  	fcall	_LCDOutput
   672     06FA                     l1071:
   673                           
   674                           ;Battery.c: 57:             UART_send('V');
   675     06FA  3056               	movlw	86
   676     06FB  120A  118A  24CB  120A  118A  	fcall	_UART_send
   677     0700                     l1073:
   678                           
   679                           ;Battery.c: 58:             UART_newline();
   680     0700  120A  118A  24AA  120A  118A  	fcall	_UART_newline
   681     0705                     l1075:
   682                           
   683                           ;Battery.c: 59:             Bt_Com(j);
   684     0705  1283               	bcf	3,5	;RP0=0, select bank0
   685     0706  1303               	bcf	3,6	;RP1=0, select bank0
   686     0707  0856               	movf	_j+1,w
   687     0708  00F4               	movwf	Bt_Com@j+1
   688     0709  0855               	movf	_j,w
   689     070A  00F3               	movwf	Bt_Com@j
   690     070B  120A  118A  25FC  120A  118A  	fcall	_Bt_Com
   691     0710                     l1077:
   692                           
   693                           ;Battery.c: 60:             _delay((unsigned long)((200)*(20000000/4000.0)));
   694     0710  3006               	movlw	6
   695     0711  1283               	bcf	3,5	;RP0=0, select bank0
   696     0712  1303               	bcf	3,6	;RP1=0, select bank0
   697     0713  00DA               	movwf	??_keyscan+2
   698     0714  3013               	movlw	19
   699     0715  00D9               	movwf	??_keyscan+1
   700     0716  30AD               	movlw	173
   701     0717  00D8               	movwf	??_keyscan
   702     0718                     u697:
   703     0718  0BD8               	decfsz	??_keyscan,f
   704     0719  2F18               	goto	u697
   705     071A  0BD9               	decfsz	??_keyscan+1,f
   706     071B  2F18               	goto	u697
   707     071C  0BDA               	decfsz	??_keyscan+2,f
   708     071D  2F18               	goto	u697
   709                           
   710                           ;Battery.c: 61:             break;
   711     071E  2FD9               	goto	l79
   712     071F                     l1079:
   713                           
   714                           ;Battery.c: 64:             n++;
   715     071F  3001               	movlw	1
   716     0720  07D3               	addwf	_n,f
   717     0721  1803               	skipnc
   718     0722  0AD4               	incf	_n+1,f
   719     0723  3000               	movlw	0
   720     0724  07D4               	addwf	_n+1,f
   721                           
   722                           ;Battery.c: 65:             if(n>9) {
   723     0725  3000               	movlw	0
   724     0726  0254               	subwf	_n+1,w
   725     0727  300A               	movlw	10
   726     0728  1903               	skipnz
   727     0729  0253               	subwf	_n,w
   728     072A  1C03               	skipc
   729     072B  2F2D               	goto	u631
   730     072C  2F2E               	goto	u630
   731     072D                     u631:
   732     072D  2F36               	goto	l1085
   733     072E                     u630:
   734     072E                     l1081:
   735                           
   736                           ;Battery.c: 66:                 n=0; j++;
   737     072E  01D3               	clrf	_n
   738     072F  01D4               	clrf	_n+1
   739     0730                     l1083:
   740     0730  3001               	movlw	1
   741     0731  07D5               	addwf	_j,f
   742     0732  1803               	skipnc
   743     0733  0AD6               	incf	_j+1,f
   744     0734  3000               	movlw	0
   745     0735  07D6               	addwf	_j+1,f
   746     0736                     l1085:
   747                           
   748                           ;Battery.c: 68:             if(j==22 && n>5) {
   749     0736  3016               	movlw	22
   750     0737  0655               	xorwf	_j,w
   751     0738  0456               	iorwf	_j+1,w
   752     0739  1D03               	btfss	3,2
   753     073A  2F3C               	goto	u641
   754     073B  2F3D               	goto	u640
   755     073C                     u641:
   756     073C  2F4E               	goto	l1091
   757     073D                     u640:
   758     073D                     l1087:
   759     073D  3000               	movlw	0
   760     073E  0254               	subwf	_n+1,w
   761     073F  3006               	movlw	6
   762     0740  1903               	skipnz
   763     0741  0253               	subwf	_n,w
   764     0742  1C03               	skipc
   765     0743  2F45               	goto	u651
   766     0744  2F46               	goto	u650
   767     0745                     u651:
   768     0745  2F4E               	goto	l1091
   769     0746                     u650:
   770     0746                     l1089:
   771                           
   772                           ;Battery.c: 69:                 j=22; n=5;
   773     0746  3016               	movlw	22
   774     0747  00D5               	movwf	_j
   775     0748  3000               	movlw	0
   776     0749  00D6               	movwf	_j+1
   777     074A  3005               	movlw	5
   778     074B  00D3               	movwf	_n
   779     074C  3000               	movlw	0
   780     074D  00D4               	movwf	_n+1
   781     074E                     l1091:
   782                           
   783                           ;Battery.c: 72:             LCDOutput(j,n);
   784     074E  0856               	movf	_j+1,w
   785     074F  00F8               	movwf	LCDOutput@i+1
   786     0750  0855               	movf	_j,w
   787     0751  00F7               	movwf	LCDOutput@i
   788     0752  0854               	movf	_n+1,w
   789     0753  00FA               	movwf	LCDOutput@k+1
   790     0754  0853               	movf	_n,w
   791     0755  00F9               	movwf	LCDOutput@k
   792     0756  120A  118A  25AE  120A  118A  	fcall	_LCDOutput
   793     075B                     l1093:
   794                           
   795                           ;Battery.c: 73:             UART_send('V');
   796     075B  3056               	movlw	86
   797     075C  120A  118A  24CB  120A  118A  	fcall	_UART_send
   798     0761  2F00               	goto	l1073
   799     0762                     l1101:
   800                           
   801                           ;Battery.c: 80:             n--;
   802     0762  3001               	movlw	1
   803     0763  02D3               	subwf	_n,f
   804     0764  3000               	movlw	0
   805     0765  1C03               	skipc
   806     0766  03D4               	decf	_n+1,f
   807     0767  02D4               	subwf	_n+1,f
   808                           
   809                           ;Battery.c: 81:             if(n>32767) {
   810     0768  3080               	movlw	128
   811     0769  0254               	subwf	_n+1,w
   812     076A  3000               	movlw	0
   813     076B  1903               	skipnz
   814     076C  0253               	subwf	_n,w
   815     076D  1C03               	skipc
   816     076E  2F70               	goto	u661
   817     076F  2F71               	goto	u660
   818     0770                     u661:
   819     0770  2F7B               	goto	l1105
   820     0771                     u660:
   821     0771                     l1103:
   822                           
   823                           ;Battery.c: 82:                 n=9; j--;
   824     0771  3009               	movlw	9
   825     0772  00D3               	movwf	_n
   826     0773  3000               	movlw	0
   827     0774  00D4               	movwf	_n+1
   828     0775  3001               	movlw	1
   829     0776  02D5               	subwf	_j,f
   830     0777  3000               	movlw	0
   831     0778  1C03               	skipc
   832     0779  03D6               	decf	_j+1,f
   833     077A  02D6               	subwf	_j+1,f
   834     077B                     l1105:
   835                           
   836                           ;Battery.c: 84:             if(j==15 && n<5) {
   837     077B  300F               	movlw	15
   838     077C  0655               	xorwf	_j,w
   839     077D  0456               	iorwf	_j+1,w
   840     077E  1D03               	btfss	3,2
   841     077F  2F81               	goto	u671
   842     0780  2F82               	goto	u670
   843     0781                     u671:
   844     0781  2F93               	goto	l1111
   845     0782                     u670:
   846     0782                     l1107:
   847     0782  3000               	movlw	0
   848     0783  0254               	subwf	_n+1,w
   849     0784  3005               	movlw	5
   850     0785  1903               	skipnz
   851     0786  0253               	subwf	_n,w
   852     0787  1803               	skipnc
   853     0788  2F8A               	goto	u681
   854     0789  2F8B               	goto	u680
   855     078A                     u681:
   856     078A  2F93               	goto	l1111
   857     078B                     u680:
   858     078B                     l1109:
   859                           
   860                           ;Battery.c: 85:                 j=15; n=5;
   861     078B  300F               	movlw	15
   862     078C  00D5               	movwf	_j
   863     078D  3000               	movlw	0
   864     078E  00D6               	movwf	_j+1
   865     078F  3005               	movlw	5
   866     0790  00D3               	movwf	_n
   867     0791  3000               	movlw	0
   868     0792  00D4               	movwf	_n+1
   869     0793                     l1111:
   870                           
   871                           ;Battery.c: 88:             LCDOutput(j,n);
   872     0793  0856               	movf	_j+1,w
   873     0794  00F8               	movwf	LCDOutput@i+1
   874     0795  0855               	movf	_j,w
   875     0796  00F7               	movwf	LCDOutput@i
   876     0797  0854               	movf	_n+1,w
   877     0798  00FA               	movwf	LCDOutput@k+1
   878     0799  0853               	movf	_n,w
   879     079A  00F9               	movwf	LCDOutput@k
   880     079B  120A  118A  25AE  120A  118A  	fcall	_LCDOutput
   881     07A0                     l1113:
   882                           
   883                           ;Battery.c: 89:             UART_send('V');
   884     07A0  3056               	movlw	86
   885     07A1  120A  118A  24CB  120A  118A  	fcall	_UART_send
   886     07A6  2F00               	goto	l1073
   887     07A7                     l1121:
   888                           
   889                           ;Battery.c: 96:             j=15; n=5;
   890     07A7  300F               	movlw	15
   891     07A8  00D5               	movwf	_j
   892     07A9  3000               	movlw	0
   893     07AA  00D6               	movwf	_j+1
   894     07AB  3005               	movlw	5
   895     07AC  00D3               	movwf	_n
   896     07AD  3000               	movlw	0
   897     07AE  00D4               	movwf	_n+1
   898     07AF                     l1123:
   899                           
   900                           ;Battery.c: 98:             LCDOutput(j,n);
   901     07AF  0856               	movf	_j+1,w
   902     07B0  00F8               	movwf	LCDOutput@i+1
   903     07B1  0855               	movf	_j,w
   904     07B2  00F7               	movwf	LCDOutput@i
   905     07B3  0854               	movf	_n+1,w
   906     07B4  00FA               	movwf	LCDOutput@k+1
   907     07B5  0853               	movf	_n,w
   908     07B6  00F9               	movwf	LCDOutput@k
   909     07B7  120A  118A  25AE  120A  118A  	fcall	_LCDOutput
   910     07BC                     l1125:
   911                           
   912                           ;Battery.c: 99:             UART_send('V');
   913     07BC  3056               	movlw	86
   914     07BD  120A  118A  24CB  120A  118A  	fcall	_UART_send
   915     07C2  2F00               	goto	l1073
   916     07C3                     l1135:
   917     07C3  0857               	movf	_val,w
   918     07C4  00D8               	movwf	??_keyscan
   919     07C5  01D9               	clrf	??_keyscan+1
   920                           
   921                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   922                           ; Switch size 1, requested type "simple"
   923                           ; Number of cases is 1, Range of values is 0 to 0
   924                           ; switch strategies available:
   925                           ; Name         Instructions Cycles
   926                           ; simple_byte            4     3 (average)
   927                           ; direct_byte           11     8 (fixed)
   928                           ; jumptable            260     6 (fixed)
   929                           ;	Chosen strategy is simple_byte
   930     07C6  0859               	movf	??_keyscan+1,w
   931     07C7  3A00               	xorlw	0	; case 0
   932     07C8  1903               	skipnz
   933     07C9  2FCB               	goto	l1183
   934     07CA  2FD9               	goto	l79
   935     07CB                     l1183:
   936                           
   937                           ; Switch size 1, requested type "simple"
   938                           ; Number of cases is 4, Range of values is 112 to 224
   939                           ; switch strategies available:
   940                           ; Name         Instructions Cycles
   941                           ; simple_byte           13     7 (average)
   942                           ; jumptable            263     9 (fixed)
   943                           ;	Chosen strategy is simple_byte
   944     07CB  0858               	movf	??_keyscan,w
   945     07CC  3A70               	xorlw	112	; case 112
   946     07CD  1903               	skipnz
   947     07CE  2FA7               	goto	l1121
   948     07CF  3AC0               	xorlw	192	; case 176
   949     07D0  1903               	skipnz
   950     07D1  2F62               	goto	l1101
   951     07D2  3A60               	xorlw	96	; case 208
   952     07D3  1903               	skipnz
   953     07D4  2F1F               	goto	l1079
   954     07D5  3A30               	xorlw	48	; case 224
   955     07D6  1903               	skipnz
   956     07D7  2ED4               	goto	l1057
   957     07D8  2FD9               	goto	l79
   958     07D9                     l79:
   959     07D9  0008               	return
   960     07DA                     __end_of_keyscan:
   961                           
   962                           	psect	text2
   963     05AE                     __ptext2:	
   964 ;; *************** function _LCDOutput *****************
   965 ;; Defined at:
   966 ;;		line 154 in file "Battery.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;  i               2    7[COMMON] unsigned int 
   969 ;;  k               2    9[COMMON] unsigned int 
   970 ;; Auto vars:     Size  Location     Type
   971 ;;		None
   972 ;; Return value:  Size  Location     Type
   973 ;;                  1    wreg      void 
   974 ;; Registers used:
   975 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   976 ;; Tracked objects:
   977 ;;		On entry : 0/0
   978 ;;		On exit  : 0/0
   979 ;;		Unchanged: 0/0
   980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   981 ;;      Params:         4       0       0       0       0
   982 ;;      Locals:         0       0       0       0       0
   983 ;;      Temps:          2       0       0       0       0
   984 ;;      Totals:         6       0       0       0       0
   985 ;;Total ram usage:        6 bytes
   986 ;; Hardware stack levels used: 1
   987 ;; Hardware stack levels required when called: 1
   988 ;; This function calls:
   989 ;;		_UART_send
   990 ;;		___bmul
   991 ;;		___lwdiv
   992 ;; This function is called by:
   993 ;;		_keyscan
   994 ;; This function uses a non-reentrant model
   995 ;;
   996                           
   997     05AE                     _LCDOutput:	
   998                           ;psect for function _LCDOutput
   999                           
  1000     05AE                     l967:	
  1001                           ;incstack = 0
  1002                           ; Regs used in _LCDOutput: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1003                           
  1004                           
  1005                           ;Battery.c: 155:     d2 = (unsigned char)(i/10);
  1006     05AE  300A               	movlw	10
  1007     05AF  00F0               	movwf	___lwdiv@divisor
  1008     05B0  3000               	movlw	0
  1009     05B1  00F1               	movwf	___lwdiv@divisor+1
  1010     05B2  0878               	movf	LCDOutput@i+1,w
  1011     05B3  00F3               	movwf	___lwdiv@dividend+1
  1012     05B4  0877               	movf	LCDOutput@i,w
  1013     05B5  00F2               	movwf	___lwdiv@dividend
  1014     05B6  120A  118A  256A  120A  118A  	fcall	___lwdiv
  1015     05BB  0870               	movf	?___lwdiv,w
  1016     05BC  00FB               	movwf	??_LCDOutput
  1017     05BD  01FC               	clrf	??_LCDOutput+1
  1018     05BE  087B               	movf	??_LCDOutput,w
  1019     05BF  1283               	bcf	3,5	;RP0=0, select bank0
  1020     05C0  1303               	bcf	3,6	;RP1=0, select bank0
  1021     05C1  00D1               	movwf	_d2
  1022     05C2  087C               	movf	??_LCDOutput+1,w
  1023     05C3  00D2               	movwf	_d2+1
  1024                           
  1025                           ;Battery.c: 156:     d1 = (unsigned char)(i-(d2*10));
  1026     05C4  30F6               	movlw	246
  1027     05C5  00F0               	movwf	___bmul@multiplicand
  1028     05C6  0851               	movf	_d2,w
  1029     05C7  120A  118A  24ED  120A  118A  	fcall	___bmul
  1030     05CC  0777               	addwf	LCDOutput@i,w
  1031     05CD  00FB               	movwf	??_LCDOutput
  1032     05CE  01FC               	clrf	??_LCDOutput+1
  1033     05CF  087B               	movf	??_LCDOutput,w
  1034     05D0  1283               	bcf	3,5	;RP0=0, select bank0
  1035     05D1  1303               	bcf	3,6	;RP1=0, select bank0
  1036     05D2  00CF               	movwf	_d1
  1037     05D3  087C               	movf	??_LCDOutput+1,w
  1038     05D4  00D0               	movwf	_d1+1
  1039     05D5                     l969:
  1040                           
  1041                           ;Battery.c: 157:     d0 = (unsigned char)k;
  1042     05D5  0879               	movf	LCDOutput@k,w
  1043     05D6  00FB               	movwf	??_LCDOutput
  1044     05D7  01FC               	clrf	??_LCDOutput+1
  1045     05D8  087B               	movf	??_LCDOutput,w
  1046     05D9  00CD               	movwf	_d0
  1047     05DA  087C               	movf	??_LCDOutput+1,w
  1048     05DB  00CE               	movwf	_d0+1
  1049     05DC                     l971:
  1050                           
  1051                           ;Battery.c: 158:     UART_send(0x30+d2);
  1052     05DC  0851               	movf	_d2,w
  1053     05DD  3E30               	addlw	48
  1054     05DE  120A  118A  24CB  120A  118A  	fcall	_UART_send
  1055     05E3                     l973:
  1056                           
  1057                           ;Battery.c: 159:     UART_send(0x30+d1);
  1058     05E3  1283               	bcf	3,5	;RP0=0, select bank0
  1059     05E4  1303               	bcf	3,6	;RP1=0, select bank0
  1060     05E5  084F               	movf	_d1,w
  1061     05E6  3E30               	addlw	48
  1062     05E7  120A  118A  24CB  120A  118A  	fcall	_UART_send
  1063     05EC                     l975:
  1064                           
  1065                           ;Battery.c: 160:     UART_send('.');
  1066     05EC  302E               	movlw	46
  1067     05ED  120A  118A  24CB  120A  118A  	fcall	_UART_send
  1068     05F2                     l977:
  1069                           
  1070                           ;Battery.c: 161:     UART_send(0x30+d0);
  1071     05F2  1283               	bcf	3,5	;RP0=0, select bank0
  1072     05F3  1303               	bcf	3,6	;RP1=0, select bank0
  1073     05F4  084D               	movf	_d0,w
  1074     05F5  3E30               	addlw	48
  1075     05F6  120A  118A  24CB  120A  118A  	fcall	_UART_send
  1076     05FB                     l106:
  1077     05FB  0008               	return
  1078     05FC                     __end_of_LCDOutput:
  1079                           
  1080                           	psect	text3
  1081     056A                     __ptext3:	
  1082 ;; *************** function ___lwdiv *****************
  1083 ;; Defined at:
  1084 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  1085 ;; Parameters:    Size  Location     Type
  1086 ;;  divisor         2    0[COMMON] unsigned int 
  1087 ;;  dividend        2    2[COMMON] unsigned int 
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;  quotient        2    4[COMMON] unsigned int 
  1090 ;;  counter         1    6[COMMON] unsigned char 
  1091 ;; Return value:  Size  Location     Type
  1092 ;;                  2    0[COMMON] unsigned int 
  1093 ;; Registers used:
  1094 ;;		wreg, status,2, status,0, btemp+1
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1100 ;;      Params:         4       0       0       0       0
  1101 ;;      Locals:         3       0       0       0       0
  1102 ;;      Temps:          0       0       0       0       0
  1103 ;;      Totals:         7       0       0       0       0
  1104 ;;Total ram usage:        7 bytes
  1105 ;; Hardware stack levels used: 1
  1106 ;; This function calls:
  1107 ;;		Nothing
  1108 ;; This function is called by:
  1109 ;;		_LCDOutput
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113     056A                     ___lwdiv:	
  1114                           ;psect for function ___lwdiv
  1115                           
  1116     056A                     l941:	
  1117                           ;incstack = 0
  1118                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
  1119                           
  1120     056A  01F4               	clrf	___lwdiv@quotient
  1121     056B  01F5               	clrf	___lwdiv@quotient+1
  1122     056C                     l943:
  1123     056C  0870               	movf	___lwdiv@divisor,w
  1124     056D  0471               	iorwf	___lwdiv@divisor+1,w
  1125     056E  1903               	btfsc	3,2
  1126     056F  2D71               	goto	u371
  1127     0570  2D72               	goto	u370
  1128     0571                     u371:
  1129     0571  2DA9               	goto	l963
  1130     0572                     u370:
  1131     0572                     l945:
  1132     0572  01F6               	clrf	___lwdiv@counter
  1133     0573  0AF6               	incf	___lwdiv@counter,f
  1134     0574  2D80               	goto	l951
  1135     0575                     l947:
  1136     0575  3001               	movlw	1
  1137     0576                     u385:
  1138     0576  1003               	clrc
  1139     0577  0DF0               	rlf	___lwdiv@divisor,f
  1140     0578  0DF1               	rlf	___lwdiv@divisor+1,f
  1141     0579  3EFF               	addlw	-1
  1142     057A  1D03               	skipz
  1143     057B  2D76               	goto	u385
  1144     057C                     l949:
  1145     057C  3001               	movlw	1
  1146     057D  00FF               	movwf	btemp+1
  1147     057E  087F               	movf	btemp+1,w
  1148     057F  07F6               	addwf	___lwdiv@counter,f
  1149     0580                     l951:
  1150     0580  1FF1               	btfss	___lwdiv@divisor+1,7
  1151     0581  2D83               	goto	u391
  1152     0582  2D84               	goto	u390
  1153     0583                     u391:
  1154     0583  2D75               	goto	l947
  1155     0584                     u390:
  1156     0584                     l953:
  1157     0584  3001               	movlw	1
  1158     0585                     u405:
  1159     0585  1003               	clrc
  1160     0586  0DF4               	rlf	___lwdiv@quotient,f
  1161     0587  0DF5               	rlf	___lwdiv@quotient+1,f
  1162     0588  3EFF               	addlw	-1
  1163     0589  1D03               	skipz
  1164     058A  2D85               	goto	u405
  1165     058B  0871               	movf	___lwdiv@divisor+1,w
  1166     058C  0273               	subwf	___lwdiv@dividend+1,w
  1167     058D  1D03               	skipz
  1168     058E  2D91               	goto	u415
  1169     058F  0870               	movf	___lwdiv@divisor,w
  1170     0590  0272               	subwf	___lwdiv@dividend,w
  1171     0591                     u415:
  1172     0591  1C03               	skipc
  1173     0592  2D94               	goto	u411
  1174     0593  2D95               	goto	u410
  1175     0594                     u411:
  1176     0594  2D9C               	goto	l959
  1177     0595                     u410:
  1178     0595                     l955:
  1179     0595  0870               	movf	___lwdiv@divisor,w
  1180     0596  02F2               	subwf	___lwdiv@dividend,f
  1181     0597  0871               	movf	___lwdiv@divisor+1,w
  1182     0598  1C03               	skipc
  1183     0599  03F3               	decf	___lwdiv@dividend+1,f
  1184     059A  02F3               	subwf	___lwdiv@dividend+1,f
  1185     059B                     l957:
  1186     059B  1474               	bsf	___lwdiv@quotient,0
  1187     059C                     l959:
  1188     059C  3001               	movlw	1
  1189     059D                     u425:
  1190     059D  1003               	clrc
  1191     059E  0CF1               	rrf	___lwdiv@divisor+1,f
  1192     059F  0CF0               	rrf	___lwdiv@divisor,f
  1193     05A0  3EFF               	addlw	-1
  1194     05A1  1D03               	skipz
  1195     05A2  2D9D               	goto	u425
  1196     05A3                     l961:
  1197     05A3  3001               	movlw	1
  1198     05A4  02F6               	subwf	___lwdiv@counter,f
  1199     05A5  1D03               	btfss	3,2
  1200     05A6  2DA8               	goto	u431
  1201     05A7  2DA9               	goto	u430
  1202     05A8                     u431:
  1203     05A8  2D84               	goto	l953
  1204     05A9                     u430:
  1205     05A9                     l963:
  1206     05A9  0875               	movf	___lwdiv@quotient+1,w
  1207     05AA  00F1               	movwf	?___lwdiv+1
  1208     05AB  0874               	movf	___lwdiv@quotient,w
  1209     05AC  00F0               	movwf	?___lwdiv
  1210     05AD                     l481:
  1211     05AD  0008               	return
  1212     05AE                     __end_of___lwdiv:
  1213                           
  1214                           	psect	text4
  1215     04ED                     __ptext4:	
  1216 ;; *************** function ___bmul *****************
  1217 ;; Defined at:
  1218 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul8.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;  multiplier      1    wreg     unsigned char 
  1221 ;;  multiplicand    1    0[COMMON] unsigned char 
  1222 ;; Auto vars:     Size  Location     Type
  1223 ;;  multiplier      1    2[COMMON] unsigned char 
  1224 ;;  product         1    1[COMMON] unsigned char 
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      unsigned char 
  1227 ;; Registers used:
  1228 ;;		wreg, status,2, status,0, btemp+1
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1234 ;;      Params:         1       0       0       0       0
  1235 ;;      Locals:         2       0       0       0       0
  1236 ;;      Temps:          0       0       0       0       0
  1237 ;;      Totals:         3       0       0       0       0
  1238 ;;Total ram usage:        3 bytes
  1239 ;; Hardware stack levels used: 1
  1240 ;; This function calls:
  1241 ;;		Nothing
  1242 ;; This function is called by:
  1243 ;;		_LCDOutput
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247     04ED                     ___bmul:	
  1248                           ;psect for function ___bmul
  1249                           
  1250                           
  1251                           ;incstack = 0
  1252                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  1253                           ;___bmul@multiplier stored from wreg
  1254     04ED  00F2               	movwf	___bmul@multiplier
  1255     04EE                     l925:
  1256     04EE  01F1               	clrf	___bmul@product
  1257     04EF                     l927:
  1258     04EF  1C72               	btfss	___bmul@multiplier,0
  1259     04F0  2CF2               	goto	u351
  1260     04F1  2CF3               	goto	u350
  1261     04F2                     u351:
  1262     04F2  2CF7               	goto	l931
  1263     04F3                     u350:
  1264     04F3                     l929:
  1265     04F3  0870               	movf	___bmul@multiplicand,w
  1266     04F4  00FF               	movwf	btemp+1
  1267     04F5  087F               	movf	btemp+1,w
  1268     04F6  07F1               	addwf	___bmul@product,f
  1269     04F7                     l931:
  1270     04F7  1003               	clrc
  1271     04F8  0DF0               	rlf	___bmul@multiplicand,f
  1272     04F9                     l933:
  1273     04F9  1003               	clrc
  1274     04FA  0CF2               	rrf	___bmul@multiplier,f
  1275     04FB                     l935:
  1276     04FB  0872               	movf	___bmul@multiplier,w
  1277     04FC  1D03               	btfss	3,2
  1278     04FD  2CFF               	goto	u361
  1279     04FE  2D00               	goto	u360
  1280     04FF                     u361:
  1281     04FF  2CEF               	goto	l927
  1282     0500                     u360:
  1283     0500                     l937:
  1284     0500  0871               	movf	___bmul@product,w
  1285     0501                     l227:
  1286     0501  0008               	return
  1287     0502                     __end_of___bmul:
  1288                           
  1289                           	psect	text5
  1290     05FC                     __ptext5:	
  1291 ;; *************** function _Bt_Com *****************
  1292 ;; Defined at:
  1293 ;;		line 128 in file "Battery.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;  j               2    3[COMMON] unsigned int 
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;		None
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  1    wreg      void 
  1300 ;; Registers used:
  1301 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1307 ;;      Params:         2       0       0       0       0
  1308 ;;      Locals:         0       0       0       0       0
  1309 ;;      Temps:          0       0       0       0       0
  1310 ;;      Totals:         2       0       0       0       0
  1311 ;;Total ram usage:        2 bytes
  1312 ;; Hardware stack levels used: 1
  1313 ;; Hardware stack levels required when called: 1
  1314 ;; This function calls:
  1315 ;;		_UART_newline
  1316 ;;		_UART_send
  1317 ;; This function is called by:
  1318 ;;		_keyscan
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322     05FC                     _Bt_Com:	
  1323                           ;psect for function _Bt_Com
  1324                           
  1325     05FC                     l979:	
  1326                           ;incstack = 0
  1327                           ; Regs used in _Bt_Com: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1328                           
  1329                           
  1330                           ;Battery.c: 130:     if(j>=15 && n>=5) {
  1331     05FC  3000               	movlw	0
  1332     05FD  0274               	subwf	Bt_Com@j+1,w
  1333     05FE  300F               	movlw	15
  1334     05FF  1903               	skipnz
  1335     0600  0273               	subwf	Bt_Com@j,w
  1336     0601  1C03               	skipc
  1337     0602  2E04               	goto	u441
  1338     0603  2E05               	goto	u440
  1339     0604                     u441:
  1340     0604  2E40               	goto	l1001
  1341     0605                     u440:
  1342     0605                     l981:
  1343     0605  3000               	movlw	0
  1344     0606  1283               	bcf	3,5	;RP0=0, select bank0
  1345     0607  1303               	bcf	3,6	;RP1=0, select bank0
  1346     0608  0254               	subwf	_n+1,w
  1347     0609  3005               	movlw	5
  1348     060A  1903               	skipnz
  1349     060B  0253               	subwf	_n,w
  1350     060C  1C03               	skipc
  1351     060D  2E0F               	goto	u451
  1352     060E  2E10               	goto	u450
  1353     060F                     u451:
  1354     060F  2E40               	goto	l1001
  1355     0610                     u450:
  1356     0610                     l983:
  1357                           
  1358                           ;Battery.c: 131:         if(j<17 || (j==17 && n<=5)) {
  1359     0610  3000               	movlw	0
  1360     0611  0274               	subwf	Bt_Com@j+1,w
  1361     0612  3011               	movlw	17
  1362     0613  1903               	skipnz
  1363     0614  0273               	subwf	Bt_Com@j,w
  1364     0615  1C03               	skipc
  1365     0616  2E18               	goto	u461
  1366     0617  2E19               	goto	u460
  1367     0618                     u461:
  1368     0618  2E29               	goto	l989
  1369     0619                     u460:
  1370     0619                     l985:
  1371     0619  3011               	movlw	17
  1372     061A  0673               	xorwf	Bt_Com@j,w
  1373     061B  0474               	iorwf	Bt_Com@j+1,w
  1374     061C  1D03               	btfss	3,2
  1375     061D  2E1F               	goto	u471
  1376     061E  2E20               	goto	u470
  1377     061F                     u471:
  1378     061F  2E40               	goto	l1001
  1379     0620                     u470:
  1380     0620                     l987:
  1381     0620  3000               	movlw	0
  1382     0621  0254               	subwf	_n+1,w
  1383     0622  3006               	movlw	6
  1384     0623  1903               	skipnz
  1385     0624  0253               	subwf	_n,w
  1386     0625  1803               	skipnc
  1387     0626  2E28               	goto	u481
  1388     0627  2E29               	goto	u480
  1389     0628                     u481:
  1390     0628  2E40               	goto	l1001
  1391     0629                     u480:
  1392     0629                     l989:
  1393                           
  1394                           ;Battery.c: 132:             for(x=0;x<10;x++) {
  1395     0629  01FD               	clrf	_x
  1396     062A                     l991:
  1397     062A  300A               	movlw	10
  1398     062B  027D               	subwf	_x,w
  1399     062C  1C03               	skipc
  1400     062D  2E2F               	goto	u491
  1401     062E  2E30               	goto	u490
  1402     062F                     u491:
  1403     062F  2E31               	goto	l995
  1404     0630                     u490:
  1405     0630  2E40               	goto	l1001
  1406     0631                     l995:
  1407                           
  1408                           ;Battery.c: 133:                 UART_send(low[x]);
  1409     0631  087D               	movf	_x,w
  1410     0632  3E3E               	addlw	(low (_low| 0))& (0+255)
  1411     0633  0084               	movwf	4
  1412     0634  1383               	bcf	3,7	;select IRP bank0
  1413     0635  0800               	movf	0,w
  1414     0636  120A  118A  24CB  120A  118A  	fcall	_UART_send
  1415     063B                     l997:
  1416                           
  1417                           ;Battery.c: 134:             }
  1418     063B  3001               	movlw	1
  1419     063C  00FF               	movwf	btemp+1
  1420     063D  087F               	movf	btemp+1,w
  1421     063E  07FD               	addwf	_x,f
  1422     063F  2E2A               	goto	l991
  1423     0640                     l1001:
  1424                           
  1425                           ;Battery.c: 137:     if(j>=17 && n>5) {
  1426     0640  3000               	movlw	0
  1427     0641  0274               	subwf	Bt_Com@j+1,w
  1428     0642  3011               	movlw	17
  1429     0643  1903               	skipnz
  1430     0644  0273               	subwf	Bt_Com@j,w
  1431     0645  1C03               	skipc
  1432     0646  2E48               	goto	u501
  1433     0647  2E49               	goto	u500
  1434     0648                     u501:
  1435     0648  2E84               	goto	l1023
  1436     0649                     u500:
  1437     0649                     l1003:
  1438     0649  3000               	movlw	0
  1439     064A  1283               	bcf	3,5	;RP0=0, select bank0
  1440     064B  1303               	bcf	3,6	;RP1=0, select bank0
  1441     064C  0254               	subwf	_n+1,w
  1442     064D  3006               	movlw	6
  1443     064E  1903               	skipnz
  1444     064F  0253               	subwf	_n,w
  1445     0650  1C03               	skipc
  1446     0651  2E53               	goto	u511
  1447     0652  2E54               	goto	u510
  1448     0653                     u511:
  1449     0653  2E84               	goto	l1023
  1450     0654                     u510:
  1451     0654                     l1005:
  1452                           
  1453                           ;Battery.c: 138:         if(j<20 || (j==20 && n<=5)) {
  1454     0654  3000               	movlw	0
  1455     0655  0274               	subwf	Bt_Com@j+1,w
  1456     0656  3014               	movlw	20
  1457     0657  1903               	skipnz
  1458     0658  0273               	subwf	Bt_Com@j,w
  1459     0659  1C03               	skipc
  1460     065A  2E5C               	goto	u521
  1461     065B  2E5D               	goto	u520
  1462     065C                     u521:
  1463     065C  2E6D               	goto	l1011
  1464     065D                     u520:
  1465     065D                     l1007:
  1466     065D  3014               	movlw	20
  1467     065E  0673               	xorwf	Bt_Com@j,w
  1468     065F  0474               	iorwf	Bt_Com@j+1,w
  1469     0660  1D03               	btfss	3,2
  1470     0661  2E63               	goto	u531
  1471     0662  2E64               	goto	u530
  1472     0663                     u531:
  1473     0663  2E84               	goto	l1023
  1474     0664                     u530:
  1475     0664                     l1009:
  1476     0664  3000               	movlw	0
  1477     0665  0254               	subwf	_n+1,w
  1478     0666  3006               	movlw	6
  1479     0667  1903               	skipnz
  1480     0668  0253               	subwf	_n,w
  1481     0669  1803               	skipnc
  1482     066A  2E6C               	goto	u541
  1483     066B  2E6D               	goto	u540
  1484     066C                     u541:
  1485     066C  2E84               	goto	l1023
  1486     066D                     u540:
  1487     066D                     l1011:
  1488                           
  1489                           ;Battery.c: 139:             for(x=0;x<10;x++) {
  1490     066D  01FD               	clrf	_x
  1491     066E                     l1013:
  1492     066E  300A               	movlw	10
  1493     066F  027D               	subwf	_x,w
  1494     0670  1C03               	skipc
  1495     0671  2E73               	goto	u551
  1496     0672  2E74               	goto	u550
  1497     0673                     u551:
  1498     0673  2E75               	goto	l1017
  1499     0674                     u550:
  1500     0674  2E84               	goto	l1023
  1501     0675                     l1017:
  1502                           
  1503                           ;Battery.c: 140:                 UART_send(norm[x]);
  1504     0675  087D               	movf	_x,w
  1505     0676  3E2F               	addlw	(low (_norm| 0))& (0+255)
  1506     0677  0084               	movwf	4
  1507     0678  1383               	bcf	3,7	;select IRP bank0
  1508     0679  0800               	movf	0,w
  1509     067A  120A  118A  24CB  120A  118A  	fcall	_UART_send
  1510     067F                     l1019:
  1511                           
  1512                           ;Battery.c: 141:             }
  1513     067F  3001               	movlw	1
  1514     0680  00FF               	movwf	btemp+1
  1515     0681  087F               	movf	btemp+1,w
  1516     0682  07FD               	addwf	_x,f
  1517     0683  2E6E               	goto	l1013
  1518     0684                     l1023:
  1519                           
  1520                           ;Battery.c: 144:     if(j>=20 && n>5) {
  1521     0684  3000               	movlw	0
  1522     0685  0274               	subwf	Bt_Com@j+1,w
  1523     0686  3014               	movlw	20
  1524     0687  1903               	skipnz
  1525     0688  0273               	subwf	Bt_Com@j,w
  1526     0689  1C03               	skipc
  1527     068A  2E8C               	goto	u561
  1528     068B  2E8D               	goto	u560
  1529     068C                     u561:
  1530     068C  2EC8               	goto	l1045
  1531     068D                     u560:
  1532     068D                     l1025:
  1533     068D  3000               	movlw	0
  1534     068E  1283               	bcf	3,5	;RP0=0, select bank0
  1535     068F  1303               	bcf	3,6	;RP1=0, select bank0
  1536     0690  0254               	subwf	_n+1,w
  1537     0691  3006               	movlw	6
  1538     0692  1903               	skipnz
  1539     0693  0253               	subwf	_n,w
  1540     0694  1C03               	skipc
  1541     0695  2E97               	goto	u571
  1542     0696  2E98               	goto	u570
  1543     0697                     u571:
  1544     0697  2EC8               	goto	l1045
  1545     0698                     u570:
  1546     0698                     l1027:
  1547                           
  1548                           ;Battery.c: 145:         if(j<22 || (j==22 && n<=5)) {
  1549     0698  3000               	movlw	0
  1550     0699  0274               	subwf	Bt_Com@j+1,w
  1551     069A  3016               	movlw	22
  1552     069B  1903               	skipnz
  1553     069C  0273               	subwf	Bt_Com@j,w
  1554     069D  1C03               	skipc
  1555     069E  2EA0               	goto	u581
  1556     069F  2EA1               	goto	u580
  1557     06A0                     u581:
  1558     06A0  2EB1               	goto	l1033
  1559     06A1                     u580:
  1560     06A1                     l1029:
  1561     06A1  3016               	movlw	22
  1562     06A2  0673               	xorwf	Bt_Com@j,w
  1563     06A3  0474               	iorwf	Bt_Com@j+1,w
  1564     06A4  1D03               	btfss	3,2
  1565     06A5  2EA7               	goto	u591
  1566     06A6  2EA8               	goto	u590
  1567     06A7                     u591:
  1568     06A7  2EC8               	goto	l1045
  1569     06A8                     u590:
  1570     06A8                     l1031:
  1571     06A8  3000               	movlw	0
  1572     06A9  0254               	subwf	_n+1,w
  1573     06AA  3006               	movlw	6
  1574     06AB  1903               	skipnz
  1575     06AC  0253               	subwf	_n,w
  1576     06AD  1803               	skipnc
  1577     06AE  2EB0               	goto	u601
  1578     06AF  2EB1               	goto	u600
  1579     06B0                     u601:
  1580     06B0  2EC8               	goto	l1045
  1581     06B1                     u600:
  1582     06B1                     l1033:
  1583                           
  1584                           ;Battery.c: 146:             for(x=0;x<10;x++) {
  1585     06B1  01FD               	clrf	_x
  1586     06B2                     l1035:
  1587     06B2  300A               	movlw	10
  1588     06B3  027D               	subwf	_x,w
  1589     06B4  1C03               	skipc
  1590     06B5  2EB7               	goto	u611
  1591     06B6  2EB8               	goto	u610
  1592     06B7                     u611:
  1593     06B7  2EB9               	goto	l1039
  1594     06B8                     u610:
  1595     06B8  2EC8               	goto	l1045
  1596     06B9                     l1039:
  1597                           
  1598                           ;Battery.c: 147:                 UART_send(high[x]);
  1599     06B9  087D               	movf	_x,w
  1600     06BA  3E20               	addlw	(low (_high| 0))& (0+255)
  1601     06BB  0084               	movwf	4
  1602     06BC  1383               	bcf	3,7	;select IRP bank0
  1603     06BD  0800               	movf	0,w
  1604     06BE  120A  118A  24CB  120A  118A  	fcall	_UART_send
  1605     06C3                     l1041:
  1606                           
  1607                           ;Battery.c: 148:             }
  1608     06C3  3001               	movlw	1
  1609     06C4  00FF               	movwf	btemp+1
  1610     06C5  087F               	movf	btemp+1,w
  1611     06C6  07FD               	addwf	_x,f
  1612     06C7  2EB2               	goto	l1035
  1613     06C8                     l1045:
  1614                           
  1615                           ;Battery.c: 151:     UART_newline();
  1616     06C8  120A  118A  24AA  120A  118A  	fcall	_UART_newline
  1617     06CD                     l103:
  1618     06CD  0008               	return
  1619     06CE                     __end_of_Bt_Com:
  1620                           
  1621                           	psect	text6
  1622     04CB                     __ptext6:	
  1623 ;; *************** function _UART_send *****************
  1624 ;; Defined at:
  1625 ;;		line 189 in file "Battery.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;  data            1    wreg     unsigned char 
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;  data            1    2[COMMON] unsigned char 
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		wreg
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1639 ;;      Params:         0       0       0       0       0
  1640 ;;      Locals:         1       0       0       0       0
  1641 ;;      Temps:          2       0       0       0       0
  1642 ;;      Totals:         3       0       0       0       0
  1643 ;;Total ram usage:        3 bytes
  1644 ;; Hardware stack levels used: 1
  1645 ;; This function calls:
  1646 ;;		Nothing
  1647 ;; This function is called by:
  1648 ;;		_keyscan
  1649 ;;		_Bt_Com
  1650 ;;		_LCDOutput
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654     04CB                     _UART_send:	
  1655                           ;psect for function _UART_send
  1656                           
  1657                           
  1658                           ;incstack = 0
  1659                           ; Regs used in _UART_send: [wreg]
  1660                           ;UART_send@data stored from wreg
  1661     04CB  00F2               	movwf	UART_send@data
  1662     04CC                     l921:
  1663                           
  1664                           ;Battery.c: 190:     TXREG = data;
  1665     04CC  0872               	movf	UART_send@data,w
  1666     04CD  1283               	bcf	3,5	;RP0=0, select bank0
  1667     04CE  1303               	bcf	3,6	;RP1=0, select bank0
  1668     04CF  0099               	movwf	25	;volatile
  1669                           
  1670                           ;Battery.c: 191:     _delay((unsigned long)((3)*(20000000/4000.0)));
  1671     04D0  3014               	movlw	20
  1672     04D1  00F1               	movwf	??_UART_send+1
  1673     04D2  3079               	movlw	121
  1674     04D3  00F0               	movwf	??_UART_send
  1675     04D4                     u707:
  1676     04D4  0BF0               	decfsz	??_UART_send,f
  1677     04D5  2CD4               	goto	u707
  1678     04D6  0BF1               	decfsz	??_UART_send+1,f
  1679     04D7  2CD4               	goto	u707
  1680     04D8  2CD9               	nop2
  1681     04D9                     l112:
  1682     04D9  0008               	return
  1683     04DA                     __end_of_UART_send:
  1684                           
  1685                           	psect	text7
  1686     04AA                     __ptext7:	
  1687 ;; *************** function _UART_newline *****************
  1688 ;; Defined at:
  1689 ;;		line 193 in file "Battery.c"
  1690 ;; Parameters:    Size  Location     Type
  1691 ;;		None
  1692 ;; Auto vars:     Size  Location     Type
  1693 ;;		None
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  1    wreg      void 
  1696 ;; Registers used:
  1697 ;;		wreg
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1703 ;;      Params:         0       0       0       0       0
  1704 ;;      Locals:         0       0       0       0       0
  1705 ;;      Temps:          0       0       0       0       0
  1706 ;;      Totals:         0       0       0       0       0
  1707 ;;Total ram usage:        0 bytes
  1708 ;; Hardware stack levels used: 1
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_keyscan
  1713 ;;		_Bt_Com
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717     04AA                     _UART_newline:	
  1718                           ;psect for function _UART_newline
  1719                           
  1720     04AA                     l923:	
  1721                           ;incstack = 0
  1722                           ; Regs used in _UART_newline: [wreg]
  1723                           
  1724                           
  1725                           ;Battery.c: 194:     TXREG = 0x0A;
  1726     04AA  300A               	movlw	10
  1727     04AB  1283               	bcf	3,5	;RP0=0, select bank0
  1728     04AC  1303               	bcf	3,6	;RP1=0, select bank0
  1729     04AD  0099               	movwf	25	;volatile
  1730                           
  1731                           ;Battery.c: 195:     TXREG = 0x0D;
  1732     04AE  300D               	movlw	13
  1733     04AF  0099               	movwf	25	;volatile
  1734     04B0                     l115:
  1735     04B0  0008               	return
  1736     04B1                     __end_of_UART_newline:
  1737                           
  1738                           	psect	text8
  1739     04B1                     __ptext8:	
  1740 ;; *************** function _init *****************
  1741 ;; Defined at:
  1742 ;;		line 107 in file "Battery.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;		None
  1745 ;; Auto vars:     Size  Location     Type
  1746 ;;		None
  1747 ;; Return value:  Size  Location     Type
  1748 ;;                  1    wreg      void 
  1749 ;; Registers used:
  1750 ;;		wreg, status,2, status,0, btemp+1
  1751 ;; Tracked objects:
  1752 ;;		On entry : 0/0
  1753 ;;		On exit  : 0/0
  1754 ;;		Unchanged: 0/0
  1755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1756 ;;      Params:         0       0       0       0       0
  1757 ;;      Locals:         0       0       0       0       0
  1758 ;;      Temps:          0       0       0       0       0
  1759 ;;      Totals:         0       0       0       0       0
  1760 ;;Total ram usage:        0 bytes
  1761 ;; Hardware stack levels used: 1
  1762 ;; This function calls:
  1763 ;;		Nothing
  1764 ;; This function is called by:
  1765 ;;		_main
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769     04B1                     _init:	
  1770                           ;psect for function _init
  1771                           
  1772     04B1                     l1047:	
  1773                           ;incstack = 0
  1774                           ; Regs used in _init: [wreg+status,2+status,0+btemp+1]
  1775                           
  1776                           
  1777                           ;Battery.c: 108:     TRISC=0x00;
  1778     04B1  1683               	bsf	3,5	;RP0=1, select bank1
  1779     04B2  1303               	bcf	3,6	;RP1=0, select bank1
  1780     04B3  0187               	clrf	7	;volatile
  1781                           
  1782                           ;Battery.c: 109:     TRISD=0x00;
  1783     04B4  0188               	clrf	8	;volatile
  1784     04B5                     l1049:
  1785                           
  1786                           ;Battery.c: 110:     TRISB=0xF0;
  1787     04B5  30F0               	movlw	240
  1788     04B6  0086               	movwf	6	;volatile
  1789     04B7                     l1051:
  1790                           
  1791                           ;Battery.c: 111:     OPTION_REG&=0x7F;
  1792     04B7  307F               	movlw	127
  1793     04B8  00FF               	movwf	btemp+1
  1794     04B9  087F               	movf	btemp+1,w
  1795     04BA  0581               	andwf	1,f	;volatile
  1796     04BB                     l82:
  1797     04BB  0008               	return
  1798     04BC                     __end_of_init:
  1799                           
  1800                           	psect	text9
  1801     04BC                     __ptext9:	
  1802 ;; *************** function _UART_init *****************
  1803 ;; Defined at:
  1804 ;;		line 183 in file "Battery.c"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;		None
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;		None
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  1    wreg      void 
  1811 ;; Registers used:
  1812 ;;		wreg
  1813 ;; Tracked objects:
  1814 ;;		On entry : 0/0
  1815 ;;		On exit  : 0/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1818 ;;      Params:         0       0       0       0       0
  1819 ;;      Locals:         0       0       0       0       0
  1820 ;;      Temps:          0       0       0       0       0
  1821 ;;      Totals:         0       0       0       0       0
  1822 ;;Total ram usage:        0 bytes
  1823 ;; Hardware stack levels used: 1
  1824 ;; This function calls:
  1825 ;;		Nothing
  1826 ;; This function is called by:
  1827 ;;		_main
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831     04BC                     _UART_init:	
  1832                           ;psect for function _UART_init
  1833                           
  1834     04BC                     l1053:	
  1835                           ;incstack = 0
  1836                           ; Regs used in _UART_init: [wreg]
  1837                           
  1838                           
  1839                           ;Battery.c: 184:     TRISC = 0xC0;
  1840     04BC  30C0               	movlw	192
  1841     04BD  1683               	bsf	3,5	;RP0=1, select bank1
  1842     04BE  1303               	bcf	3,6	;RP1=0, select bank1
  1843     04BF  0087               	movwf	7	;volatile
  1844                           
  1845                           ;Battery.c: 185:     TXSTA = 0x20;
  1846     04C0  3020               	movlw	32
  1847     04C1  0098               	movwf	24	;volatile
  1848                           
  1849                           ;Battery.c: 186:     RCSTA = 0x90;
  1850     04C2  3090               	movlw	144
  1851     04C3  1283               	bcf	3,5	;RP0=0, select bank0
  1852     04C4  1303               	bcf	3,6	;RP1=0, select bank0
  1853     04C5  0098               	movwf	24	;volatile
  1854                           
  1855                           ;Battery.c: 187:     SPBRG = 0x20;
  1856     04C6  3020               	movlw	32
  1857     04C7  1683               	bsf	3,5	;RP0=1, select bank1
  1858     04C8  1303               	bcf	3,6	;RP1=0, select bank1
  1859     04C9  0099               	movwf	25	;volatile
  1860     04CA                     l109:
  1861     04CA  0008               	return
  1862     04CB                     __end_of_UART_init:
  1863     007E                     btemp	set	126	;btemp
  1864     007E                     wtemp0	set	126
  1865                           
  1866                           	psect	config
  1867                           
  1868                           ;Config register CONFIG @ 0x2007
  1869                           ;	Oscillator Selection bits
  1870                           ;	FOSC = HS, HS oscillator
  1871                           ;	Watchdog Timer Enable bit
  1872                           ;	WDTE = OFF, WDT disabled
  1873                           ;	Power-up Timer Enable bit
  1874                           ;	PWRTE = OFF, PWRT disabled
  1875                           ;	Brown-out Reset Enable bit
  1876                           ;	BOREN = OFF, BOR disabled
  1877                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1878                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1879                           ;	Data EEPROM Memory Code Protection bit
  1880                           ;	CPD = OFF, Data EEPROM code protection off
  1881                           ;	Flash Program Memory Write Enable bits
  1882                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1883                           ;	In-Circuit Debugger Mode bit
  1884                           ;	DEBUG = 0x1, unprogrammed default
  1885                           ;	Flash Program Memory Code Protection bit
  1886                           ;	CP = OFF, Code protection off
  1887     2007                     	org	8199
  1888     2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        75
    BSS         7
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80      3      59
    BANK1            80      0      30
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _keyscan->_LCDOutput
    _LCDOutput->___lwdiv
    _Bt_Com->_UART_send

Critical Paths under _main in BANK0

    _main->_keyscan

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1724
                          _UART_init
                               _init
                            _keyscan
 ---------------------------------------------------------------------------------
 (1) _keyscan                                              3     3      0    1724
                                              0 BANK0      3     3      0
                             _Bt_Com
                          _LCDOutput
                       _UART_newline
                          _UART_send
 ---------------------------------------------------------------------------------
 (2) _LCDOutput                                            6     2      4    1178
                                              7 COMMON     6     2      4
                          _UART_send
                             ___bmul
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     168
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _Bt_Com                                               2     0      2     524
                                              3 COMMON     2     0      2
                       _UART_newline
                          _UART_send
 ---------------------------------------------------------------------------------
 (2) _UART_send                                            3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _UART_newline                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_init
   _init
   _keyscan
     _Bt_Com
       _UART_newline
       _UART_send
     _LCDOutput
       _UART_send
       ___bmul
       ___lwdiv
     _UART_newline
     _UART_send

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      1E       7       37.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      3      3B       5       73.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      67      12        0.0%
ABS                  0      0      67       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Tue May 28 19:16:50 2024

                      _j 0055                        _n 0053                        _x 007D  
                      pc 0002           ___bmul@product 0071                       l82 04BB  
                     l79 07D9                       _d0 004D                       _d1 004F  
                     _d2 0051                       fsr 0004                      l103 06CD  
                    l112 04D9                      l106 05FB                      l115 04B0  
                    l109 04CA                      l227 0501                      l481 05AD  
                    l921 04CC                      l923 04AA                      l931 04F7  
                    l933 04F9                      l925 04EE                      l941 056A  
                    l935 04FB                      l927 04EF                      l951 0580  
                    l943 056C                      l937 0500                      l929 04F3  
                    l961 05A3                      l953 0584                      l945 0572  
                    l955 0595                      l947 0575                      l963 05A9  
                    l971 05DC                      l981 0605                      l957 059B  
                    l949 057C                      l973 05E3                      l991 062A  
                    l983 0610                      l959 059C                      l975 05EC  
                    l967 05AE                      l985 0619                      l977 05F2  
                    l969 05D5                      l995 0631                      l987 0620  
                    l979 05FC                      l997 063B                      l989 0629  
                    u410 0595                      u411 0594                      u500 0649  
                    u501 0648                      u405 0585                      u510 0654  
                    u350 04F3                      u430 05A9                      u511 0653  
                    u351 04F2                      u431 05A8                      u415 0591  
                    u600 06B1                      u520 065D                      u440 0605  
                    u360 0500                      u601 06B0                      u521 065C  
                    u441 0604                      u361 04FF                      u425 059D  
                    u610 06B8                      u530 0664                      u450 0610  
                    u370 0572                      u611 06B7                      u531 0663  
                    u451 060F                      u371 0571                      u540 066D  
                    u460 0619                      u620 06DB                      u541 066C  
                    u461 0618                      u621 06DA                      u550 0674  
                    u470 0620                      u390 0584                      u630 072E  
                    u551 0673                      u471 061F                      u391 0583  
                    u631 072D                      u560 068D                      u480 0629  
                    u640 073D                      u561 068C                      u481 0628  
                    u385 0576                      u641 073C                      u570 0698  
                    u490 0630                      u650 0746                      u707 04D4  
                    u571 0697                      u491 062F                      u651 0745  
                    u580 06A1                      u660 0771                      u581 06A0  
                    u661 0770                      u590 06A8                      u670 0782  
                    u591 06A7                      u671 0781                      u680 078B  
                    u681 078A                      u697 0718                      _arr 00A0  
                    _low 003E                      _val 0057                      fsr0 0004  
                    indf 0000                     l1001 0640                     l1011 066D  
                   l1003 0649                     l1013 066E                     l1005 0654  
                   l1101 0762                     l1031 06A8                     l1007 065D  
                   l1023 0684                     l1111 0793                     l1103 0771  
                   l1041 06C3                     l1033 06B1                     l1025 068D  
                   l1017 0675                     l1009 0664                     l1121 07A7  
                   l1113 07A0                     l1105 077B                     l1051 04B7  
                   l1035 06B2                     l1027 0698                     l1019 067F  
                   l1123 07AF                     l1107 0782                     l1053 04BC  
                   l1029 06A1                     l1045 06C8                     l1125 07BC  
                   l1109 078B                     l1047 04B1                     l1039 06B9  
                   l1071 06FA                     l1063 06DC                     l1135 07C3  
                   l1055 06CE                     l1151 0516                     l1143 0502  
                   l1049 04B5                     l1081 072E                     l1073 0700  
                   l1065 06E6                     l1057 06D4                     l1145 0507  
                   l1091 074E                     l1083 0730                     l1075 0705  
                   l1059 06D5                     l1147 050C                     l1093 075B  
                   l1085 0736                     l1077 0710                     l1069 06EB  
                   l1149 0512                     l1183 07CB                     l1087 073D  
                   l1079 071F                     l1089 0746                     _high 0020  
                   _main 0502                     _init 04B1                     _norm 002F  
                   btemp 007E                     start 0000        ___bmul@multiplier 0072  
                  ?_main 0070                    ?_init 0070          __end_of___lwdiv 05AE  
                  _RCSTA 0018                    _SPBRG 0099                    _PORTB 0006  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
                  _TXREG 0019                    _TXSTA 0098          __end_of_keyscan 07DA  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07DA             __end_of_main 051F             __end_of_init 04BC  
                 ??_main 007D                   ??_init 0070        __end_of_LCDOutput 05FC  
                 _Bt_Com 05FC                   ___bmul 04ED        __end_of_UART_init 04CB  
      __end_of_UART_send 04DA                ??___lwdiv 0074                ??_keyscan 0058  
__end_of__initialization 07FC      ___bmul@multiplicand 0070           __pcstackCOMMON 0070  
           __pidataBANK0 053D             __pidataBANK1 051F               __pbssBANK0 004D  
                ?_Bt_Com 0073               __pmaintext 0502                  ?___bmul 0070  
                Bt_Com@j 0073                  ___lwdiv 056A                  __ptext1 06CE  
                __ptext2 05AE                  __ptext3 056A                  __ptext4 04ED  
                __ptext5 05FC                  __ptext6 04CB                  __ptext7 04AA  
                __ptext8 04B1                  __ptext9 04BC            ?_UART_newline 0070  
                _keyscan 06CE                _LCDOutput 05AE     end_of_initialization 07FC  
         ??_UART_newline 0070                _UART_init 04BC                _UART_send 04CB  
             ?_LCDOutput 0077           __end_of_Bt_Com 06CE           __end_of___bmul 0502  
             LCDOutput@i 0077               LCDOutput@k 0079               ?_UART_init 0070  
             ?_UART_send 0070      start_initialization 07DA                 ??_Bt_Com 0075  
               ??___bmul 0071               init_fetch0 04DA              __pdataBANK0 0020  
            __pdataBANK1 00A0              __pbssCOMMON 007D                ___latbits 0002  
          __pcstackBANK0 0058              ??_LCDOutput 007B     __end_of_UART_newline 04B1  
              __pnvBANK0 0053         ___lwdiv@dividend 0072                 ?___lwdiv 0070  
            ??_UART_init 0070              ??_UART_send 0070                 ?_keyscan 0070  
       ___lwdiv@quotient 0074            UART_send@data 0072          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0076             _UART_newline 04AA                 init_ram0 04DE  
             _OPTION_REG 0081  
